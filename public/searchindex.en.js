var relearn_searchindex = [
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!\nSolution Easy mode Assignment 1 Unlike the defined standards of a curling sheet, embedded devices often have web servers on non-standard ports. Use curl to retrieve the web page on host “curlingfun” port 8080. If you need help, run the ‘hint’ command. curl http:/curlingfun:8080 Assignment 2 Embedded devices often use self-signed certificates, where your browser will not trust the certificate presented. Use curl to retrieve the TLS-protected web page at https://curlingfun:9090/ curl --insecure https://curlingfun:9090 Assignment 3 Working with APIs and embedded devices often requires making HTTP POST requests. Use curl to send a request to https://curlingfun:9090/ with the parameter “skip” set to the value “alabaster”, declaring Alabaster as the team captain. curl --insecure https://curlingfun:9090 -X POST -d \"skip=alabaster\" Assignment 4 Working with APIs and embedded devices often requires maintaining session state by passing a cookie. Use curl to send a request to https://curlingfun:9090/ with a cookie called “end” with the value “3”, indicating we’re on the third end of the curling match. curl --insecure --cookie \"end=3\" https://curlingfun:9090/ Assignment 5 Working with APIs and embedded devices sometimes requires working with raw HTTP headers. Use curl to view the HTTP headers returned by a request to https://curlingfun:9090/ curl --insecure --head https://curlingfun:9090/ Assignment 6 Working with APIs and embedded devices sometimes requires working with custom HTTP headers. Use curl to send a request to https://curlingfun:9090/ with an HTTP header called “Stone” and the value “Granite”. curl --insecure --header \"Stone: Granite\" https://curlingfun:9090/ Assignment 7 curl will modify your URL unless you tell it not to. For example, use curl to retrieve the following URL containing special characters: https://curlingfun:9090/../../etc/hacks curl --insecure --path-as-is \"https://curlingfun:9090/../../etc/hacks\" Last assignment Hard mode Hard mode hints and assignment is placed in a text file (HARD-MODE.txt) on disk:\nls HARD-MODE.txt HELP Assignment 1 Content is of HARD-MODE.txt is:\nPrefer to skip ahead without guidance? Use curl to craft a request meeting these requirements:\nHTTP POST request to https://curlingfun:9090/ Parameter “skip” set to “bow” Cookie “end” set to “10” Header “Hack” set to “12ft” Command to solve this assignment:\ncurl --insecure https://curlingfun:9090/ -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" Assignment 2 Excellent! Now, use curl to access this URL: https://curlingfun:9090/../../etc/button\nCommand to solve this assignment:\ncurl --insecure https://curlingfun:9090/../../etc/button -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" --path-as-is Assignment 3 Command to solve this assignment:\ncurl --insecure https://curlingfun:9090/GoodSportsmanship -X POST -d \"skip=bow\" --cookie \"end=10\" --header \"Hack: 12ft\" --path-as-is -L",
    "description": "Objective Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!\nSolution Easy mode Assignment 1 Unlike the defined standards of a curling sheet, embedded devices often have web servers on non-standard ports. Use curl to retrieve the web page on host “curlingfun” port 8080. If you need help, run the ‘hint’ command.",
    "tags": [],
    "title": "Curling",
    "uri": "/act1/curling/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "Welcome back to the Geese Islands! Let’s help the elves pack up to return to the North Pole.\nTalk to Jingle, Angel, and Poinsettia about their challenges.\nThis is a new chapter at the Frosty Beach\nJingle Ringford (Frosty’s Beach)\nWelcome to the Geese Islands and the 2023 SANS Holiday Hack Challenge!\nI’m Jingle Ringford, one of Santa’s many elves.\n…\nJust kidding! It’s actually the 2024 SANS Holiday Hack Challenge!\nAnd although we’re on Frosty’s Beach on Christmas Island, we’ll soon be on our way back to the North Pole.\nI thought it best to wait here for people that heard we’re on the Geese Islands but may not know we’re leaving.\nI haven’t seen Santa since we started packing up, but he always asks me to give a quick orientation to newcomers, so I’m continuing the tradition.\nBefore you head out any further onto the island, you need to accomplish two simple tasks.\nBut first, here’s a parting gift. I packed this snowball made of the magical, never-melting snow of Christmas Island. A little souvenir to take with you when we leave for the North Pole.\nClick on the snowball on your avatar. That’s where you will see your Objectives, Hints, resource links, and Conversations for the Holiday Hack Challenge.\nNow, click on the Cranberry Pi Terminal and follow the on-screen instructions.",
    "description": "Welcome back to the Geese Islands! Let’s help the elves pack up to return to the North Pole.\nTalk to Jingle, Angel, and Poinsettia about their challenges.\nThis is a new chapter at the Frosty Beach\nJingle Ringford (Frosty’s Beach)\nWelcome to the Geese Islands and the 2023 SANS Holiday Hack Challenge!\nI’m Jingle Ringford, one of Santa’s many elves.\n…\nJust kidding! It’s actually the 2024 SANS Holiday Hack Challenge!",
    "tags": [],
    "title": "Prologue",
    "uri": "/prologue/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Talk to Jingle Ringford on Christmas Island and get your bearings at Geese Islands\nQuestion Answer",
    "description": "Objective Talk to Jingle Ringford on Christmas Island and get your bearings at Geese Islands\nQuestion Answer",
    "tags": [],
    "title": "Orientation Challenge",
    "uri": "/prologue/orientation-challenge/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter at the Front Yard.\nWith Santa away, Wombley Cube and Alabaster Snowball have each tried to lead. Surely they won’t mess up the naughty and nice list…\nHelp Bow, Morcel, and Jewell solve their challenges.",
    "description": "This is a new chapter at the Front Yard.\nWith Santa away, Wombley Cube and Alabaster Snowball have each tried to lead. Surely they won’t mess up the naughty and nice list…\nHelp Bow, Morcel, and Jewell solve their challenges.",
    "tags": [],
    "title": "Act1",
    "uri": "/act1/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "Objective In a swirl of shredded paper, lies the key. Can you unlock the shredder’s code and uncover Santa’s lost secrets?\nHints UV light Numbers found from lighting at the keypad using the UV light:\n[ 2, 6, 7, 8 ] Hint from the book This is the hint we get:\nThinking about it, it appears to correpond to\npage:word:letter Using this formula I got:\nSequence From book 2:6:1 S 4:19:3 A 6:1:1 N 3:10:4 T 14:8:3 A Somehow I got “SANTA”. After much thoughtwork I came up with a scheme on how I can use this word - let’s look at it with some Regex filter spectacles:\nPosition Letter Pattern 1 S Pos 1 should not be same as pos. 5 2 A Pos 2 should be the same as pos. 5 3 N Pos 3 should not be the same as pos, 1, 2, 4, 5 4 T Pos 4 should not be the same as post 1, 2, 3, 5 5 A Pos 5 should be the same as pos. 2 Solution Silver solution Bruteforcer Given the filter outlined under “Hint from the book”, I created the following Python script to calcualte permutations and apply the filter scheme. I picked up the the remote URL and POST format from a BurpSuite session. The script:\nimport requests, itertools, time for perm in [''.join(p) for p in itertools.product(['2', '6', '7', '8'], repeat=5)]: if perm[0] is not perm[-1] and perm[1] == perm[-1]: if (perm[0] not in list(set(perm[2:4]))) and (perm[1] not in list(set(perm[2:4]))) and len(list(set(perm[2:4]))) \u003e 1: res = requests.post( \"https://hhc24-frostykeypad.holidayhackchallenge.com/submit\", json = { \"answer\": perm } ) if res.status_code != 400: print(perm) break else: time.sleep(1) After just a couple of seconds, it produced the correct pin code:\n72682 As evident here, the pincode got accepted:\nGold solution There’s a second pincode to be found that doesn’t fit the tips already given. Time to modify the above script and bruteforce the solution:\nimport requests, itertools, time for perm in [''.join(p) for p in itertools.product(['2', '6', '7', '8'], repeat=5)]: print(f\"trying '{perm}' ... \", end=\"\") res = requests.post( \"https://hhc24-frostykeypad.holidayhackchallenge.com/submit\", json = { \"answer\": perm } ) if res.status_code != 400: print(f\"{res.status_code} - {res.json()} - {perm}\") else: print(\" Negative\") time.sleep(1) This script found the other pincode within seconds: 22786",
    "description": "Objective In a swirl of shredded paper, lies the key. Can you unlock the shredder’s code and uncover Santa’s lost secrets?\nHints UV light Numbers found from lighting at the keypad using the UV light:\n[ 2, 6, 7, 8 ] Hint from the book This is the hint we get:\nThinking about it, it appears to correpond to\npage:word:letter Using this formula I got:\nSequence From book 2:6:1 S 4:19:3 A 6:1:1 N 3:10:4 T 14:8:3 A Somehow I got “SANTA”.",
    "tags": [],
    "title": "Frosty Keypad",
    "uri": "/act1/frosty-keypad/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Help Angel Candysalt connect the dots in a game of connections.\nObservations # Observation 1 Inspected network traffic, game is hosted at https://hhc24-elfconnect.holidayhackchallenge.com/ 2 Playing game through Burpsuite we can get hold of the Javascript controlling the game 3 In Javascript, variable “wordSets” holds the words 4 In Javascript, variable “correctSets” holds the correct words for each round 5 Round is controlled by https://hhc24-elfconnect.holidayhackchallenge.com/?round=2 6 It appears that “correctSets” isn’t updated between rounds. Thus, the same positions pr. set is reused. 7 In Javascript, if we set variable “score” to a high number, it reflects in the GUI. 8 We need to set “id” in local storage to beat this game if we load the game in a new window or tab, as evident in code localStorage.getItem('id'); Solution Based on the observation, this appears to be a straight and easy task to solve. Since we found the Javascript controlling the game, and observing what it does, we can create a short and sweet Javascript that simply loops through each sets in wordSets and maps it to the corresponding solution in correctSets. We also make sure to bump the topscore by simply setting it to a huge number to beat this game with gold.\nfunction mapWordsByCorrectSets(wordSets, correctSets) { let result = {}; for (let setKey in wordSets) { result[setKey] = correctSets.map(indices =\u003e indices.map(i =\u003e wordSets[setKey][i]) ); } return result; } score = 10000000000000; console.log(mapWordsByCorrectSets(wordSets, correctSets)); Applying code Selecting the right iframe we are going to work in:\nPasting and running the Javascript code:\nThen it is just a matter of selecting the first word set from the GUI and you have beaten the game with a new high score!\nJavascript controlling the game let urlParams = new URLSearchParams(window.location.search); const roundCheck = urlParams.get('round'); if (!roundCheck) { // If 'round' is absent or has no value sessionStorage.clear(); } // Configuring the Phaser game const config = { type: Phaser.AUTO, scale: { // sets the auto scaling of the canvas for all browsers mode: Phaser.Scale.FIT, parent: 'phaser-example', autoCenter: Phaser.Scale.CENTER_BOTH, width: 800, height: 600 }, backgroundColor: '#2fb3fe', // background border color scene: { preload: preload, create: create, update: update }, physics: { default: 'arcade', //defines game as an arcade type arcade: { gravity: { y: 0 }, debug: false } } }; const game = new Phaser.Game(config); const wordSets = { 1: [\"Tinsel\", \"Sleigh\", \"Belafonte\", \"Bag\", \"Comet\", \"Garland\", \"Jingle Bells\", \"Mittens\", \"Vixen\", \"Gifts\", \"Star\", \"Crosby\", \"White Christmas\", \"Prancer\", \"Lights\", \"Blitzen\"], 2: [\"Nmap\", \"burp\", \"Frida\", \"OWASP Zap\", \"Metasploit\", \"netcat\", \"Cycript\", \"Nikto\", \"Cobalt Strike\", \"wfuzz\", \"Wireshark\", \"AppMon\", \"apktool\", \"HAVOC\", \"Nessus\", \"Empire\"], 3: [\"AES\", \"WEP\", \"Symmetric\", \"WPA2\", \"Caesar\", \"RSA\", \"Asymmetric\", \"TKIP\", \"One-time Pad\", \"LEAP\", \"Blowfish\", \"hash\", \"hybrid\", \"Ottendorf\", \"3DES\", \"Scytale\"], 4: [\"IGMP\", \"TLS\", \"Ethernet\", \"SSL\", \"HTTP\", \"IPX\", \"PPP\", \"IPSec\", \"FTP\", \"SSH\", \"IP\", \"IEEE 802.11\", \"ARP\", \"SMTP\", \"ICMP\", \"DNS\"] }; let wordBoxes = []; let selectedBoxes = []; let correctSets = [ [0, 5, 10, 14], // Set 1 [1, 3, 7, 9], // Set 2 [2, 6, 11, 12], // Set 3 [4, 8, 13, 15] // Set 4 ]; let completedSets = []; let shuffledIndices = []; let emitter; let successText; let successBackground; let mainScene; let score = parseInt(sessionStorage.getItem('score') || '0'); // Initialize score let scoreText; // Text object for score display let highScore = 50000; let highScoreText; // text object for high score let roundComplete = sessionStorage.getItem('roundComplete'); if (roundComplete == null) { roundComplete = 0; } // let urlParams = new URLSearchParams(window.location.search); let round = parseInt(urlParams.get('round') ?? 1, 10); // Default to round 1 if no parameter is set let words = wordSets[round]; document.addEventListener(\"DOMContentLoaded\", function() { setTimeout(function() { const urlParams = new URLSearchParams(window.location.search); const id = urlParams.get('id'); // Regular expression to validate a UUID v4 const uuidV4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i; // Check if the id parameter exists and is a valid UUID v4 if (id \u0026\u0026 uuidV4Regex.test(id)) { localStorage.setItem('id', id); } else { let id = localStorage.getItem('id'); if (!id) { alert('Invalid id provided in the URL. Please provide a valid ID in order to get completion if you beat this challenge.'); } } if (!round) { urlParams.set('round', roundComplete++); window.location.href = `${window.location.origin}${window.location.pathname}?${urlParams.toString()}`; } }, 250); }); const gridCols = 4; const gridRows = 4; const boxWidth = 180; const boxHeight = 120; const gridXOffset = 50; const gridYOffset = 50; function preload() { this.load.image('flares', \"/static/images/candyCane.png\"); this.load.image('overlay', \"/static/images/background.webp\"); this.load.image('landing', \"/static/images/landing.png\"); this.load.audio('bzzzt', '/static/audio/bzzzt.wav'); //this.sound.play('bzzzt'); this.load.audio('click', '/static/audio/click.wav'); //this.sound.play('click'); this.load.audio('ding', '/static/audio/ding.wav'); //this.sound.play('ding'); this.load.audio('horaay', '/static/audio/horaay.wav'); //this.sound.play('horaay'); console.log(\"Static files loaded\"); } function create() { //console.log('round ' + roundComplete); //console.log('score ' + score); mainScene = this; var overlay = this.add.image(400, 300, 'overlay').setDepth(0).setOrigin(0.5, 0.5); overlay.setScale(0.5); // Add title text (centered horizontally and aligned with the score's y-position) titleText = this.add.text(400, 15, 'Elf Connect', { fontSize: '30px', fill: '#000', // Black color for the title align: 'center' }); titleText.setOrigin(0.5, 0); // Center the title horizontally on the x-axis if (roundComplete == 0) { var landing = this.add.image(400, 250, 'landing').setScale(.6).setDepth(2).setOrigin(0.5, 0.5).setInteractive(); mainScene.input.once('pointerdown', function () { landing.destroy(); }) } shuffledIndices = Phaser.Utils.Array.Shuffle([...Array(16).keys()]); for (let i = 0; i \u003c 16; i++) { let col = i % gridCols; let row = Math.floor(i / gridCols); let xPos = gridXOffset + col * boxWidth; let yPos = gridYOffset + row * boxHeight; let box = this.add.text(xPos, yPos, words[shuffledIndices[i]], { fontSize: '20px', //backgroundColor: '#0a7e28', // card color unselected backgroundColor: '#10ca40', // card color unselected color: '#000000', //text color for cards padding: { top: 20, left: 10, right: 10, bottom: 20 }, align: 'center', fixedWidth: boxWidth - 20, fixedHeight: boxHeight - 20, wordWrap: { width: boxWidth - 40, useAdvancedWrap: true } }).setInteractive(); box.index = shuffledIndices[i]; box.selected = false; box.gridPos = i; box.on('pointerdown', function () { if (!this.selected) { this.setStyle({ backgroundColor: '#edbb99' }); // card color selected this.selected = true; selectedBoxes.push(this); } else { //this.setStyle({ backgroundColor: '#0a7e28' }); // card color unselected this.setStyle({ backgroundColor: '#10ca40' }); // card color unselected this.selected = false; selectedBoxes = selectedBoxes.filter(box =\u003e box !== this); } if (selectedBoxes.length === 4) { checkSelectedSet(this.scene); } else { mainScene.sound.play('click'); } }); wordBoxes.push(box); } emitter = this.add.particles(400, 250, 'flares', { lifespan: 4000, speed: { min: 150, max: 250 }, scale: { start: 0.8, end: 0 }, gravityY: 150, blendMode: 'ADD', emitting: false }); // Add scoreboard text scoreText = this.add.text(600, 20, 'Score: ' + score, { fontSize: '20px', fill: '#000000' }); highScoreText = this.add.text(20, 20, 'High Score: 50000', { fontSize: '20px', fill: '#000' }); } function update() { // Nothing needed in the update loop for this simple game } function checkSelectedSet(scene) { let selectedIndices = selectedBoxes.map(box =\u003e box.index); selectedIndices.sort((a, b) =\u003e a - b); let isCorrectSet = false; let matchedSetIndex = -1; for (let i = 0; i \u003c correctSets.length; i++) { if (JSON.stringify(selectedIndices) === JSON.stringify(correctSets[i])) { isCorrectSet = true; matchedSetIndex = i; break; } } if (isCorrectSet) { completedSets.push(matchedSetIndex); positionCompletedSets(); disableCompletedSet(matchedSetIndex); // Disable interaction on the completed set shuffleRemainingRows(); // Update score by 100 points score += 100; scoreText.setText('Score: ' + score); // Add high-score board if (score \u003e 50000) { highScoreText.setText('High Score: ' + score); emitter.explode(20); submitAction(2); displaySuccessMessage('Great Job Hacker! Elf Connect Complete and Hacked!', function () { }); } // If all sets are completed, trigger the fireworks effect if (completedSets.length === 4) { roundComplete++; scene.sound.play('horaay'); gameStatus(); } else { scene.sound.play('ding'); } } else { selectedBoxes.forEach(box =\u003e { //box.setStyle({ backgroundColor: '#0a7e28' }); // card color unselected original box.setStyle({ backgroundColor: '#10ca40' }); // card color unselected box.selected = false; }); scene.sound.play('bzzzt'); } selectedBoxes = []; } function disableCompletedSet(setIndex) { correctSets[setIndex].forEach((wordIndex) =\u003e { let box = wordBoxes.find(box =\u003e box.index === wordIndex); if (box) { box.disableInteractive(); // Disable interaction on the box } }); } function positionCompletedSets() { completedSets.forEach((setIndex, completedRowIndex) =\u003e { let yPos = gridYOffset + completedRowIndex * boxHeight; correctSets[setIndex].forEach((wordIndex, boxIndex) =\u003e { let box = wordBoxes.find(box =\u003e box.index === wordIndex); let xPos = gridXOffset + boxIndex * boxWidth; box.setStyle({ backgroundColor: '#126079', // completed row color color: '#fff' //text color completed row cards }); box.setPosition(xPos, yPos); }); }); } function shuffleRemainingRows() { let remainingBoxes = wordBoxes.filter(box =\u003e !completedSets.includes(correctSets.findIndex(set =\u003e set.includes(box.index)))); let shuffledIndices = Phaser.Utils.Array.Shuffle(remainingBoxes.map(box =\u003e box.index)); remainingBoxes.forEach((box, i) =\u003e { let remainingRowIndex = Math.floor(i / gridCols) + completedSets.length; let colIndex = i % gridCols; let xPos = gridXOffset + colIndex * boxWidth; let yPos = gridYOffset + remainingRowIndex * boxHeight; box.index = shuffledIndices[i]; box.setText(words[shuffledIndices[i]]); box.setPosition(xPos, yPos); //box.setStyle({ backgroundColor: '#0a7e28' }); // unselected card color box.setStyle({ backgroundColor: '#10ca40' }); // unselected card color }); } function gameStatus() { //console.log(roundComplete); if (roundComplete \u003c 4) { emitter.explode(20); displaySuccessMessage('Round ' + roundComplete + ' Completed', function () { this.sessionStorage.setItem('score', score); this.sessionStorage.setItem('roundComplete', roundComplete); window.location.href = `${window.location.origin}${window.location.pathname}?round=${roundComplete + 1}`; }); } else { emitter.explode(20); submitAction(1); displaySuccessMessage.call(this, 'Success! You have defeated the Elf Connect!!!!'); } } async function submitAction(answer) { //const urlParams = new URLSearchParams(window.location.search); //const id = urlParams.get('id'); //localStorage.setItem('id', id); let id = localStorage.getItem('id'); if (!id) { alert('No ID found in localstorage so we could not submit your results'); } const url = `/submit?id=${id}`; const data = { answer: answer }; // Send the answer as a JSON object //Original //const url = '/submit'; //const data = { answer: answer }; try { const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }); if (response.ok) { const result = await response.json(); console.log('Success:', result); return true; } else { console.error('Error:', response.statusText); } } catch (error) { console.error('Error:', error); } } function displaySuccessMessage(message, callback) { if (successText) { successText.destroy(); } if (successBackground) { successBackground.destroy(); } const padding = 10; const textStyle = { fontSize: '24px', fill: '#00FF00', align: 'center' }; successText = mainScene.add.text(mainScene.cameras.main.centerX, mainScene.cameras.main.centerY, message, textStyle); successText.setOrigin(0.5, 0.5); const textWidth = successText.width + 2 * padding; const textHeight = successText.height + 2 * padding; successBackground = mainScene.add.graphics(); successBackground.fillStyle(0x000000, 0.8); successBackground.fillRect( mainScene.cameras.main.centerX - textWidth / 2, mainScene.cameras.main.centerY - textHeight / 2, textWidth, textHeight ); mainScene.children.bringToTop(successText); setTimeout(() =\u003e { if (successText) { successText.destroy(); successText = null; } if (successBackground) { successBackground.destroy(); successBackground = null; } //console.log(roundComplete) if (roundComplete != 4) { callback(); } }, 3000); }",
    "description": "Objective Help Angel Candysalt connect the dots in a game of connections.\nObservations # Observation 1 Inspected network traffic, game is hosted at https://hhc24-elfconnect.holidayhackchallenge.com/ 2 Playing game through Burpsuite we can get hold of the Javascript controlling the game 3 In Javascript, variable “wordSets” holds the words 4 In Javascript, variable “correctSets” holds the correct words for each round 5 Round is controlled by https://hhc24-elfconnect.holidayhackchallenge.com/?round=2 6 It appears that “correctSets” isn’t updated between rounds.",
    "tags": [],
    "title": "Elf Connect",
    "uri": "/prologue/elf-connect/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Act1",
    "content": "In the hint section I found this helpful hint:\nOn the Cutting Edge From: Morcel Nougat Terminal: Hardware Part 1 Hey, I just caught wind of this neat way to piece back shredded paper! It’s a fancy heuristic detection technique—sharp as an elf’s wit, I tell ya! Got a sample Python script right here, courtesy of Arnydo. Check it out when you have a sec: heuristic_edge_detection.py.\"\nI downloaded the script:\nimport os import numpy as np from PIL import Image def load_images(folder): images = [] filenames = sorted(os.listdir(folder)) for filename in filenames: if filename.endswith('.png') or filename.endswith('.jpg'): img = Image.open(os.path.join(folder, filename)).convert('RGB') images.append(np.array(img)) return images def calculate_difference(slice1, slice2): # Calculate the sum of squared differences between the right edge of slice1 and the left edge of slice2 return np.sum((slice1[:, -1] - slice2[:, 0]) ** 2) def find_best_match(slices): n = len(slices) matched_slices = [slices[0]] slices.pop(0) while slices: last_slice = matched_slices[-1] differences = [calculate_difference(last_slice, s) for s in slices] best_match_index = np.argmin(differences) matched_slices.append(slices.pop(best_match_index)) return matched_slices def save_image(images, output_path): heights, widths, _ = zip(*(i.shape for i in images)) total_width = sum(widths) max_height = max(heights) new_image = Image.new('RGB', (total_width, max_height)) x_offset = 0 for img in images: pil_img = Image.fromarray(img) new_image.paste(pil_img, (x_offset, 0)) x_offset += pil_img.width new_image.save(output_path) def main(): input_folder = \"/mnt/c/Users/Roger Johnsen/Downloads/HHC2024/shreds/slices\" output_path = \"/mnt/c/Users/Roger Johnsen/Downloads/HHC2024/assembled_image.png\" slices = load_images(input_folder) matched_slices = find_best_match(slices) save_image(matched_slices, output_path) if __name__ == '__main__': main() I only changed the “input_folder” and “output_path” variables and ran the script. Once finished, it assembled the pieced into this image:\nImage isn’t particularly easy to read. Thus some manual work needs to be done:\nImage assembled are mirrored. In order to mirror it readable, I used this site which offers basic image editing tools: https://www.resizepixel.com/ After mirroring the image, I used https://www.photopea.com/ to rearrange the elements in the picture, making the whole lot readable:",
    "description": "In the hint section I found this helpful hint:\nOn the Cutting Edge From: Morcel Nougat Terminal: Hardware Part 1 Hey, I just caught wind of this neat way to piece back shredded paper! It’s a fancy heuristic detection technique—sharp as an elf’s wit, I tell ya! Got a sample Python script right here, courtesy of Arnydo. Check it out when you have a sec: heuristic_edge_detection.py.\"\nI downloaded the script:",
    "tags": [],
    "title": "Hardware Hacking 101",
    "uri": "/act1/hardware-hacking/index.html"
  },
  {
    "breadcrumb": "HHC 2024 \u003e Prologue",
    "content": "Objective Assist Poinsettia McMittens with playing a game of Elf Minder 9000.\nSolution pr. level. Sandy Start Waves and crates Tidal Treasures Dune Dash In order to solve this, we must turn the trajectory path for the elf once he has gone back into the tunnel, so that on the return he’ll hook up to the path leading to the goal flag.\nCoral Cove Shell Seekers Palm Gove Shuffle Once the elf has gone through the tunnel, we change the trajectory path so upon return the elf will head for the spring instead.\nTropical Tangle For this level we must change trajectory two times in order to traverse into the goal flag.\nCrate Caper In this level we must change the trajectory multiple times. The elf has to be routed to the goal flag and back using multiple routes in order to collect the crates.\nShoreline Shuffle Yet again, this level consists of multiple trajectory path changes in order to collec the crates\nBeach Bounty Driftwood Dunes This was pretty straight forward, no change of trajectory neeeded\nA real pickle Stumbled on this part in the HTML source code, apparently it is an editor:\nRemoved the “hidden” stylesheet tag to make it visible:\nClicked the “Clear Entities” button, and placed a tunnel at the goal flag:\nThen clicked restart:\nhttps://hhc24-elfminder.holidayhackchallenge.com/game2.js\nif (isEditor) { adminControls.classList.remove('hidden'); console.log('⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡'); console.log('⚡ Hey, I noticed you are in edit mode! Awesome!'); console.log('⚡ Use the tools to create your own level.'); console.log('⚡ Level data is saved to a variable called `game.entities`.'); console.log('⚡ I\\'d love to check out your level--'); console.log('⚡ Email `JSON.stringify(game.entities)` to evan@counterhack.com'); console.log('⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡⚡'); } Mapping Movement Y-axis Position Value Content game.entities[0][1] 1 First dot from upper right corner game.entities[0][1] 10 Last dot from upper right corner, max. 10 X-axis Position Value Content game.entities[0][0] 1 First dot from upper left side game.entities[0][0] 10 Last dot from upper left side, max. 12 Entities Entity Value Entity Type game.entities[0][2] 0 Start game.entities[0][2] 1 Flag game.entities[0][2] 2 Crate game.entities[0][2] 3 Stone game.entities[0][2] 4 Sleepy Crab game.entities[0][2] 5 Sizzling Sand game.entities[0][2] 6 Tunnel game.entities[0][2] 7 Spring game.entities.forEach((item) =\u003e { // Move start flag if (item[2] == 0) { item[0] = 1; item[1] = 1; } // Move goal flag else if (item[2] == 1) { item[0] = 1; item[1] = 9; } // Move crates else if (item[2] == 2) { item[0] = 1; } // Other things else { item[1] = 12 } }); game.entities.forEach((item) =\u003e { if (item[2] !== 0 \u0026\u0026 item[2] !== 1 \u0026\u0026 item[2] !== 2) { item[1] = 12; } }); enable edit mode: https://hhc24-elfminder.holidayhackchallenge.com/index.html?id=30d23f1c-4d17-4646-8475-f8ed051fbaf2\u0026level=Sandy%20Start\u0026edit=1",
    "description": "Objective Assist Poinsettia McMittens with playing a game of Elf Minder 9000.\nSolution pr. level. Sandy Start Waves and crates Tidal Treasures Dune Dash In order to solve this, we must turn the trajectory path for the elf once he has gone back into the tunnel, so that on the return he’ll hook up to the path leading to the goal flag.\nCoral Cove Shell Seekers Palm Gove Shuffle Once the elf has gone through the tunnel, we change the trajectory path so upon return the elf will head for the spring instead.",
    "tags": [],
    "title": "Elf Minder 9000",
    "uri": "/prologue/elf-minder-9000/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Act2",
    "uri": "/act2/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "Act3",
    "uri": "/act3/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "This is a new chapter.",
    "description": "This is a new chapter.",
    "tags": [],
    "title": "About",
    "uri": "/about/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "HHC 2024",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "HHC 2024",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
